// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketTokenRPL.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketTokenRPL
{
    public partial class RocketTokenRPLService: RocketTokenRPLServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketTokenRPLDeployment rocketTokenRPLDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketTokenRPLDeployment>().SendRequestAndWaitForReceiptAsync(rocketTokenRPLDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketTokenRPLDeployment rocketTokenRPLDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketTokenRPLDeployment>().SendRequestAsync(rocketTokenRPLDeployment);
        }

        public static async Task<RocketTokenRPLService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketTokenRPLDeployment rocketTokenRPLDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketTokenRPLDeployment, cancellationTokenSource);
            return new RocketTokenRPLService(web3, receipt.ContractAddress);
        }

        public RocketTokenRPLService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketTokenRPLServiceBase: ContractWeb3ServiceBase
    {

        public RocketTokenRPLServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public Task<BigInteger> AllowanceQueryAsync(AllowanceFunction allowanceFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<AllowanceFunction, BigInteger>(allowanceFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> AllowanceQueryAsync(string owner, string spender, BlockParameter blockParameter = null)
        {
            var allowanceFunction = new AllowanceFunction();
                allowanceFunction.Owner = owner;
                allowanceFunction.Spender = spender;
            
            return ContractHandler.QueryAsync<AllowanceFunction, BigInteger>(allowanceFunction, blockParameter);
        }

        public virtual Task<string> ApproveRequestAsync(ApproveFunction approveFunction)
        {
             return ContractHandler.SendRequestAsync(approveFunction);
        }

        public virtual Task<TransactionReceipt> ApproveRequestAndWaitForReceiptAsync(ApproveFunction approveFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(approveFunction, cancellationToken);
        }

        public virtual Task<string> ApproveRequestAsync(string spender, BigInteger amount)
        {
            var approveFunction = new ApproveFunction();
                approveFunction.Spender = spender;
                approveFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(approveFunction);
        }

        public virtual Task<TransactionReceipt> ApproveRequestAndWaitForReceiptAsync(string spender, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var approveFunction = new ApproveFunction();
                approveFunction.Spender = spender;
                approveFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(approveFunction, cancellationToken);
        }

        public Task<BigInteger> BalanceOfQueryAsync(BalanceOfFunction balanceOfFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<BalanceOfFunction, BigInteger>(balanceOfFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> BalanceOfQueryAsync(string account, BlockParameter blockParameter = null)
        {
            var balanceOfFunction = new BalanceOfFunction();
                balanceOfFunction.Account = account;
            
            return ContractHandler.QueryAsync<BalanceOfFunction, BigInteger>(balanceOfFunction, blockParameter);
        }

        public virtual Task<string> BurnRequestAsync(BurnFunction burnFunction)
        {
             return ContractHandler.SendRequestAsync(burnFunction);
        }

        public virtual Task<TransactionReceipt> BurnRequestAndWaitForReceiptAsync(BurnFunction burnFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(burnFunction, cancellationToken);
        }

        public virtual Task<string> BurnRequestAsync(BigInteger amount)
        {
            var burnFunction = new BurnFunction();
                burnFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(burnFunction);
        }

        public virtual Task<TransactionReceipt> BurnRequestAndWaitForReceiptAsync(BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var burnFunction = new BurnFunction();
                burnFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(burnFunction, cancellationToken);
        }

        public virtual Task<string> BurnFromRequestAsync(BurnFromFunction burnFromFunction)
        {
             return ContractHandler.SendRequestAsync(burnFromFunction);
        }

        public virtual Task<TransactionReceipt> BurnFromRequestAndWaitForReceiptAsync(BurnFromFunction burnFromFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(burnFromFunction, cancellationToken);
        }

        public virtual Task<string> BurnFromRequestAsync(string account, BigInteger amount)
        {
            var burnFromFunction = new BurnFromFunction();
                burnFromFunction.Account = account;
                burnFromFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(burnFromFunction);
        }

        public virtual Task<TransactionReceipt> BurnFromRequestAndWaitForReceiptAsync(string account, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var burnFromFunction = new BurnFromFunction();
                burnFromFunction.Account = account;
                burnFromFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(burnFromFunction, cancellationToken);
        }

        public Task<byte> DecimalsQueryAsync(DecimalsFunction decimalsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<DecimalsFunction, byte>(decimalsFunction, blockParameter);
        }

        
        public virtual Task<byte> DecimalsQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<DecimalsFunction, byte>(null, blockParameter);
        }

        public virtual Task<string> DecreaseAllowanceRequestAsync(DecreaseAllowanceFunction decreaseAllowanceFunction)
        {
             return ContractHandler.SendRequestAsync(decreaseAllowanceFunction);
        }

        public virtual Task<TransactionReceipt> DecreaseAllowanceRequestAndWaitForReceiptAsync(DecreaseAllowanceFunction decreaseAllowanceFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(decreaseAllowanceFunction, cancellationToken);
        }

        public virtual Task<string> DecreaseAllowanceRequestAsync(string spender, BigInteger subtractedValue)
        {
            var decreaseAllowanceFunction = new DecreaseAllowanceFunction();
                decreaseAllowanceFunction.Spender = spender;
                decreaseAllowanceFunction.SubtractedValue = subtractedValue;
            
             return ContractHandler.SendRequestAsync(decreaseAllowanceFunction);
        }

        public virtual Task<TransactionReceipt> DecreaseAllowanceRequestAndWaitForReceiptAsync(string spender, BigInteger subtractedValue, CancellationTokenSource cancellationToken = null)
        {
            var decreaseAllowanceFunction = new DecreaseAllowanceFunction();
                decreaseAllowanceFunction.Spender = spender;
                decreaseAllowanceFunction.SubtractedValue = subtractedValue;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(decreaseAllowanceFunction, cancellationToken);
        }

        public Task<BigInteger> GetInflationCalcTimeQueryAsync(GetInflationCalcTimeFunction getInflationCalcTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationCalcTimeFunction, BigInteger>(getInflationCalcTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetInflationCalcTimeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationCalcTimeFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetInflationIntervalRateQueryAsync(GetInflationIntervalRateFunction getInflationIntervalRateFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalRateFunction, BigInteger>(getInflationIntervalRateFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetInflationIntervalRateQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalRateFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetInflationIntervalStartTimeQueryAsync(GetInflationIntervalStartTimeFunction getInflationIntervalStartTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalStartTimeFunction, BigInteger>(getInflationIntervalStartTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetInflationIntervalStartTimeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalStartTimeFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetInflationIntervalTimeQueryAsync(GetInflationIntervalTimeFunction getInflationIntervalTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalTimeFunction, BigInteger>(getInflationIntervalTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetInflationIntervalTimeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalTimeFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetInflationIntervalsPassedQueryAsync(GetInflationIntervalsPassedFunction getInflationIntervalsPassedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalsPassedFunction, BigInteger>(getInflationIntervalsPassedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetInflationIntervalsPassedQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationIntervalsPassedFunction, BigInteger>(null, blockParameter);
        }

        public Task<string> GetInflationRewardsContractAddressQueryAsync(GetInflationRewardsContractAddressFunction getInflationRewardsContractAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationRewardsContractAddressFunction, string>(getInflationRewardsContractAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetInflationRewardsContractAddressQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetInflationRewardsContractAddressFunction, string>(null, blockParameter);
        }

        public virtual Task<string> IncreaseAllowanceRequestAsync(IncreaseAllowanceFunction increaseAllowanceFunction)
        {
             return ContractHandler.SendRequestAsync(increaseAllowanceFunction);
        }

        public virtual Task<TransactionReceipt> IncreaseAllowanceRequestAndWaitForReceiptAsync(IncreaseAllowanceFunction increaseAllowanceFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(increaseAllowanceFunction, cancellationToken);
        }

        public virtual Task<string> IncreaseAllowanceRequestAsync(string spender, BigInteger addedValue)
        {
            var increaseAllowanceFunction = new IncreaseAllowanceFunction();
                increaseAllowanceFunction.Spender = spender;
                increaseAllowanceFunction.AddedValue = addedValue;
            
             return ContractHandler.SendRequestAsync(increaseAllowanceFunction);
        }

        public virtual Task<TransactionReceipt> IncreaseAllowanceRequestAndWaitForReceiptAsync(string spender, BigInteger addedValue, CancellationTokenSource cancellationToken = null)
        {
            var increaseAllowanceFunction = new IncreaseAllowanceFunction();
                increaseAllowanceFunction.Spender = spender;
                increaseAllowanceFunction.AddedValue = addedValue;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(increaseAllowanceFunction, cancellationToken);
        }

        public Task<BigInteger> InflationCalculateQueryAsync(InflationCalculateFunction inflationCalculateFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<InflationCalculateFunction, BigInteger>(inflationCalculateFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> InflationCalculateQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<InflationCalculateFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<string> InflationMintTokensRequestAsync(InflationMintTokensFunction inflationMintTokensFunction)
        {
             return ContractHandler.SendRequestAsync(inflationMintTokensFunction);
        }

        public virtual Task<string> InflationMintTokensRequestAsync()
        {
             return ContractHandler.SendRequestAsync<InflationMintTokensFunction>();
        }

        public virtual Task<TransactionReceipt> InflationMintTokensRequestAndWaitForReceiptAsync(InflationMintTokensFunction inflationMintTokensFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(inflationMintTokensFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> InflationMintTokensRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<InflationMintTokensFunction>(null, cancellationToken);
        }

        public Task<string> NameQueryAsync(NameFunction nameFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<NameFunction, string>(nameFunction, blockParameter);
        }

        
        public virtual Task<string> NameQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<NameFunction, string>(null, blockParameter);
        }

        public virtual Task<string> SwapTokensRequestAsync(SwapTokensFunction swapTokensFunction)
        {
             return ContractHandler.SendRequestAsync(swapTokensFunction);
        }

        public virtual Task<TransactionReceipt> SwapTokensRequestAndWaitForReceiptAsync(SwapTokensFunction swapTokensFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(swapTokensFunction, cancellationToken);
        }

        public virtual Task<string> SwapTokensRequestAsync(BigInteger amount)
        {
            var swapTokensFunction = new SwapTokensFunction();
                swapTokensFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(swapTokensFunction);
        }

        public virtual Task<TransactionReceipt> SwapTokensRequestAndWaitForReceiptAsync(BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var swapTokensFunction = new SwapTokensFunction();
                swapTokensFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(swapTokensFunction, cancellationToken);
        }

        public Task<string> SymbolQueryAsync(SymbolFunction symbolFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<SymbolFunction, string>(symbolFunction, blockParameter);
        }

        
        public virtual Task<string> SymbolQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<SymbolFunction, string>(null, blockParameter);
        }

        public Task<BigInteger> TotalSupplyQueryAsync(TotalSupplyFunction totalSupplyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSupplyFunction, BigInteger>(totalSupplyFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> TotalSupplyQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSupplyFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> TotalSwappedRPLQueryAsync(TotalSwappedRPLFunction totalSwappedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSwappedRPLFunction, BigInteger>(totalSwappedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> TotalSwappedRPLQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSwappedRPLFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<string> TransferRequestAsync(TransferFunction transferFunction)
        {
             return ContractHandler.SendRequestAsync(transferFunction);
        }

        public virtual Task<TransactionReceipt> TransferRequestAndWaitForReceiptAsync(TransferFunction transferFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFunction, cancellationToken);
        }

        public virtual Task<string> TransferRequestAsync(string recipient, BigInteger amount)
        {
            var transferFunction = new TransferFunction();
                transferFunction.Recipient = recipient;
                transferFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(transferFunction);
        }

        public virtual Task<TransactionReceipt> TransferRequestAndWaitForReceiptAsync(string recipient, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var transferFunction = new TransferFunction();
                transferFunction.Recipient = recipient;
                transferFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFunction, cancellationToken);
        }

        public virtual Task<string> TransferFromRequestAsync(TransferFromFunction transferFromFunction)
        {
             return ContractHandler.SendRequestAsync(transferFromFunction);
        }

        public virtual Task<TransactionReceipt> TransferFromRequestAndWaitForReceiptAsync(TransferFromFunction transferFromFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFromFunction, cancellationToken);
        }

        public virtual Task<string> TransferFromRequestAsync(string sender, string recipient, BigInteger amount)
        {
            var transferFromFunction = new TransferFromFunction();
                transferFromFunction.Sender = sender;
                transferFromFunction.Recipient = recipient;
                transferFromFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(transferFromFunction);
        }

        public virtual Task<TransactionReceipt> TransferFromRequestAndWaitForReceiptAsync(string sender, string recipient, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var transferFromFunction = new TransferFromFunction();
                transferFromFunction.Sender = sender;
                transferFromFunction.Recipient = recipient;
                transferFromFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFromFunction, cancellationToken);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(AllowanceFunction),
                typeof(ApproveFunction),
                typeof(BalanceOfFunction),
                typeof(BurnFunction),
                typeof(BurnFromFunction),
                typeof(DecimalsFunction),
                typeof(DecreaseAllowanceFunction),
                typeof(GetInflationCalcTimeFunction),
                typeof(GetInflationIntervalRateFunction),
                typeof(GetInflationIntervalStartTimeFunction),
                typeof(GetInflationIntervalTimeFunction),
                typeof(GetInflationIntervalsPassedFunction),
                typeof(GetInflationRewardsContractAddressFunction),
                typeof(IncreaseAllowanceFunction),
                typeof(InflationCalculateFunction),
                typeof(InflationMintTokensFunction),
                typeof(NameFunction),
                typeof(SwapTokensFunction),
                typeof(SymbolFunction),
                typeof(TotalSupplyFunction),
                typeof(TotalSwappedRPLFunction),
                typeof(TransferFunction),
                typeof(TransferFromFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(ApprovalEventDTO),
                typeof(RPLFixedSupplyBurnEventDTO),
                typeof(RPLInflationLogEventDTO),
                typeof(TransferEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
