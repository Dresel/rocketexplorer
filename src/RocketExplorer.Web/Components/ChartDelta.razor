@using System.Runtime.InteropServices.JavaScript
@using LiveChartsCore.Defaults
@inherits ChartBase

<ChartTemplate Title="@Title" Aggregation="Aggregation" AggregationChanged="SetAggregation" Expanded="Expanded" ExpandedChanged="SetExpanded">
	@if (Data == null)
	{
		<MudText Align="Align.Center">
			<MudProgressCircular Class="mt-20 mb-20" Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
		</MudText>
	}
	else
	{
		<CartesianChart @key="Key" Series="Series" XAxes="XAxes" YAxes="YAxes" TooltipTextSize="13">
		</CartesianChart>
	}
</ChartTemplate>

@code {

	protected override void OnInitialized() =>
		Series =
		[
			new ColumnSeries<DateTimePoint>
			{
				Padding = 6,
				MaxBarWidth = 20,
			},
		];

	protected override void SetSeries()
	{
		if (Series == null || Data == null || Series.Length != Data.Length)
		{
			return;
		}

		DateOnly target;

		switch (Aggregation)
		{
			case ChartAggregation.Yearly:
				target = Data?.Sum(x => x.Count) > 0 ? Data.Where(data => data.Count > 0).Min(data => data.Min(x => x.Key)) : new DateOnly(2020, 1, 1);
				break;

			case ChartAggregation.Monthly:
				target = DateOnly.FromDateTime(DateTime.Now).AddMonths(Expanded ? -36 : -12);
				target = new DateOnly(target.Year, target.Month, 1);
				break;

			case ChartAggregation.Daily:
				target = DateOnly.FromDateTime(DateTime.Now).AddDays(Expanded ? -42 : -14);
				break;

			default:
				throw new ArgumentOutOfRangeException(nameof(Aggregation));
		}

		foreach ((SortedList<DateOnly, int> data, int index) in (Data ?? []).Select((data, index) => (data, index)))
		{
			Series[index].Values = data.PrepareDelta(DataTransform?[index], Aggregation, target).ToList();
		}
	}

}