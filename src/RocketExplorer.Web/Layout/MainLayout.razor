@using LiveChartsCore.Kernel
@using LiveChartsCore.Themes
@using MaterialColorUtilities.Palettes
@using MaterialColorUtilities.Schemes
@using MaterialColorUtilities.Utils
@using Environment = Environment

@inherits LayoutComponentBase

<CustomThemeProvider @ref="themeProvider" Theme="theme" @bind-IsDarkMode="@ThemeService.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
	<MudAppBar Elevation="1">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" Class="mr-4" OnClick="() => drawerOpen = !drawerOpen" />
		<MudImage Style="height: calc(100% - 16px)" Src="images/rpl.svg"></MudImage>
		<div class="mud-typography-h5 ml-2">Rocket Explorer @(Configuration.Environment != Environment.Mainnet ? $"({Configuration.Environment})" : "")</div>
		<MudSpacer />
		<MudTooltip Text="@(DarkLightModeButtonText)">
			<MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="() => ThemeService.CycleDarkLightMode()" aria-label="@(DarkLightModeButtonText)" />
		</MudTooltip>
		<MudTooltip Text="Open GitHub">
			<MudIconButton Href="https://github.com/Dresel/rocketexplorer" Target="_blank" Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" aria-label="Open GitHub" />
		</MudTooltip>
	</MudAppBar>
	<MudDrawer @bind-Open="@drawerOpen">
		<NavMenu />
	</MudDrawer>
	<MudMainContent>
		<CascadingValue Value="@themeProvider">
			<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8 mb-8">@Body</MudContainer>
		</CascadingValue>
	</MudMainContent>
	@if (AppState.CurrentBlock != null)
	{
		<div Class="footer">
			<MudContainer MaxWidth="MaxWidth.Large">
				<MudText Typo="Typo.body2" Style="color: var(--mud-palette-text-secondary)" Align="Align.Right">Last processed block: @AppState.ProcessedBlockNumber (@(AppState.BlockDifference == 0 ? "up to date" : $"{AppState.BlockDifference} blocks ago"))</MudText>
			</MudContainer>
		</div>
	}
</MudLayout>

@code {

	private string ObjectStoreMetadataUrl => $"{Configuration.ObjectStoreBaseUrl}/snapshot-metadata.msgpack";

	private string DarkLightModeButtonText => ThemeService.CurrentDarkLightMode switch
	{
		DarkLightMode.Dark => "Use system mode",
		DarkLightMode.Light => "Use dark mode",
		_ => "Use light mode",
	};

	private string DarkLightModeButtonIcon => ThemeService.CurrentDarkLightMode switch
	{
		DarkLightMode.Dark => Icons.Material.Rounded.AutoMode,
		DarkLightMode.Light => Icons.Material.Outlined.DarkMode,
		_ => Icons.Material.Filled.LightMode,
	};

	private void SetMudTheme()
	{
		uint brandColor = ColorUtils.ArgbFromRgb(255, 110, 48);
		uint markColor = ColorUtils.ArgbFromRgb(255, 235, 59);

		Scheme<uint> darkSchemeVibrant = new DarkSchemeMapper().Map(CorePalette.Of(brandColor, Style.Vibrant));
		CorePalette markPalette = CorePalette.Of(markColor, Style.Vibrant);

		PaletteLight paletteLight = SetPalette(new CustomPaletteLight(), new LightSchemeMapper().Map(CorePalette.Of(brandColor, Style.Vibrant)), new LightSchemeMapper().Map(markPalette));

		// Override primary colors with vibrant style
		PaletteDark paletteDark = SetPalette(new CustomPaletteDark(), new DarkSchemeMapper().Map(CorePalette.Of(brandColor, Style.Spritz)), new DarkSchemeMapper().Map(markPalette));
		paletteDark.Primary = darkSchemeVibrant.Primary.ToMudColor();
		paletteDark.PrimaryContrastText = darkSchemeVibrant.OnPrimary.ToMudColor();
		paletteDark.AppbarText = darkSchemeVibrant.OnPrimary.ToMudColor();
		paletteDark.AppbarBackground = darkSchemeVibrant.Primary.ToMudColor();

		theme = new MudTheme
		{
			Typography = CreateTypography(),
			PaletteLight = paletteLight,
			PaletteDark = paletteDark,
		};
	}

	private T SetPalette<T>(T palette, Scheme<uint> scheme, Scheme<uint> markScheme) where T : Palette
	{
		palette.Primary = scheme.Primary.ToMudColor();
		palette.PrimaryContrastText = scheme.OnPrimary.ToMudColor();
		palette.Secondary = scheme.Secondary.ToMudColor();
		palette.SecondaryContrastText = scheme.OnSecondary.ToMudColor();
		palette.Tertiary = markScheme.PrimaryContainer.ToMudColor();
		palette.TertiaryContrastText = markScheme.OnPrimaryContainer.ToMudColor();

		palette.AppbarText = scheme.OnPrimary.ToMudColor();
		palette.AppbarBackground = scheme.Primary.ToMudColor();

		palette.DrawerText = scheme.OnSurface.ToMudColor();
		palette.DrawerBackground = scheme.Surface.ToMudColor();

		palette.Background = scheme.Background.ToMudColor();
		palette.TextPrimary = scheme.OnBackground.ToMudColor();
		palette.TextSecondary = scheme.OnSurfaceVariant.ToMudColor();

		palette.SetPrimaryContainer(scheme.PrimaryContainer.ToMudColor());
		palette.SetOnPrimaryContainer(scheme.OnPrimaryContainer.ToMudColor());
		palette.SetSecondaryContainer(scheme.SecondaryContainer.ToMudColor());
		palette.SetOnSecondaryContainer(scheme.OnSecondaryContainer.ToMudColor());

		palette.Surface = scheme.Surface.ToMudColor();
		palette.SetOnSurface(scheme.OnSurface.ToMudColor());
		palette.SetSurfaceVariant(scheme.SurfaceVariant.ToMudColor());
		palette.SetOnSurfaceVariant(scheme.OnSurfaceVariant.ToMudColor());

		palette.LinesDefault = scheme.Outline.ToMudColor();
		palette.LinesInputs = scheme.Outline.ToMudColor();
		palette.TableLines = scheme.Outline.ToMudColor();
		palette.TableHover = scheme.ToHover(x => x.Surface).ToMudColor();

		palette.SetSurfaceContainerLowest(scheme.SurfaceContainerLowest.ToMudColor());
		palette.SetSurfaceContainerLow(scheme.SurfaceContainerLow.ToMudColor());
		palette.SetSurfaceContainer(scheme.SurfaceContainer.ToMudColor());
		palette.SetSurfaceContainerHigh(scheme.SurfaceContainerHigh.ToMudColor());
		palette.SetSurfaceContainerHighest(scheme.SurfaceContainerHighest.ToMudColor());

		return palette;
	}

	private void SetLiveChartsLightTheme()
	{
		LiveCharts.DefaultSettings.HasTheme(_ =>
		{
			LiveChartsSettings defaultSettings = new();

			LiveCharts.DefaultSettings.TooltipBackgroundPaint = defaultSettings.TooltipBackgroundPaint;
			LiveCharts.DefaultSettings.TooltipTextPaint = defaultSettings.TooltipTextPaint;
			LiveCharts.DefaultSettings.LegendTextPaint = defaultSettings.LegendTextPaint;
		});

		LiveCharts.DefaultSettings.AddLightTheme(chartsTheme =>
		{
			chartsTheme.Colors =
			[
				ThemeService.CurrentPalette.Primary.ToLvcColor(),
				CorePalette.Of(ColorUtils.ArgbFromRgb(156, 39, 176), Style.Vibrant).Primary[40].ToLvcColor(),
				CorePalette.Of(ColorUtils.ArgbFromRgb(33, 150, 243), Style.Vibrant).Primary[40].ToLvcColor(),
			];

			chartsTheme.HasRuleForAxes(axis =>
			{
				axis.NamePaint = ThemeService.CurrentPalette.OnSurface().ToPaint();
				axis.LabelsPaint = ThemeService.CurrentPalette.OnSurfaceVariant().ToPaint();
			});

			chartsTheme.HasRuleForLineSeries(rule =>
			{
				rule.Stroke!.StrokeThickness = 3.0f;

				rule.GeometrySize = 10;
				rule.GeometryStroke!.StrokeThickness = 3.0f;
			});
		});

		LiveCharts.DefaultSettings.WithTooltipBackgroundPaint(ThemeService.CurrentPalette.SurfaceContainerHigh().ToPaint());
		LiveCharts.DefaultSettings.WithTooltipTextPaint(ThemeService.CurrentPalette.OnSurface().ToPaint());
		LiveCharts.DefaultSettings.WithLegendTextPaint(ThemeService.CurrentPalette.OnSurface().ToPaint());
	}

	private void SetLiveChartsDarkTheme()
	{
		LiveCharts.DefaultSettings.HasTheme(_ =>
		{
			LiveChartsSettings defaultSettings = new();

			LiveCharts.DefaultSettings.TooltipBackgroundPaint = defaultSettings.TooltipBackgroundPaint;
			LiveCharts.DefaultSettings.TooltipTextPaint = defaultSettings.TooltipTextPaint;
			LiveCharts.DefaultSettings.LegendTextPaint = defaultSettings.LegendTextPaint;
		});

		LiveCharts.DefaultSettings.AddDarkTheme(chartsTheme =>
		{
			chartsTheme.Colors =
			[
				ThemeService.CurrentPalette.Primary.ToLvcColor(),
				CorePalette.Of(ColorUtils.ArgbFromRgb(156, 39, 176), Style.Vibrant).Primary[80].ToLvcColor(),
				CorePalette.Of(ColorUtils.ArgbFromRgb(33, 150, 243), Style.Vibrant).Primary[80].ToLvcColor(),
			];

			chartsTheme.HasRuleForAxes(axis =>
			{
				axis.NamePaint = ThemeService.CurrentPalette.OnSurface().ToPaint();
				axis.LabelsPaint = ThemeService.CurrentPalette.OnSurfaceVariant().ToPaint();
			});

			chartsTheme.HasRuleForLineSeries(rule =>
			{
				rule.Stroke!.StrokeThickness = 3.0f;

				rule.GeometrySize = 10;
				rule.GeometryStroke!.StrokeThickness = 3.0f;
			});
		});

		LiveCharts.DefaultSettings.WithTooltipBackgroundPaint(ThemeService.CurrentPalette.SurfaceContainerHigh().ToPaint());
		LiveCharts.DefaultSettings.WithTooltipTextPaint(ThemeService.CurrentPalette.OnSurface().ToPaint());
		LiveCharts.DefaultSettings.WithLegendTextPaint(ThemeService.CurrentPalette.OnSurfaceVariant().ToPaint());
	}
}