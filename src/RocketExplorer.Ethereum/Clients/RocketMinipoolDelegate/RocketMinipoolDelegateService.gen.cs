// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketMinipoolDelegate.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketMinipoolDelegate
{
    public partial class RocketMinipoolDelegateService: RocketMinipoolDelegateServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolDelegateDeployment rocketMinipoolDelegateDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMinipoolDelegateDeployment>().SendRequestAndWaitForReceiptAsync(rocketMinipoolDelegateDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolDelegateDeployment rocketMinipoolDelegateDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMinipoolDelegateDeployment>().SendRequestAsync(rocketMinipoolDelegateDeployment);
        }

        public static async Task<RocketMinipoolDelegateService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolDelegateDeployment rocketMinipoolDelegateDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketMinipoolDelegateDeployment, cancellationTokenSource);
            return new RocketMinipoolDelegateService(web3, receipt.ContractAddress);
        }

        public RocketMinipoolDelegateService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketMinipoolDelegateServiceBase: ContractWeb3ServiceBase
    {

        public RocketMinipoolDelegateServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> BeginUserDistributeRequestAsync(BeginUserDistributeFunction beginUserDistributeFunction)
        {
             return ContractHandler.SendRequestAsync(beginUserDistributeFunction);
        }

        public virtual Task<string> BeginUserDistributeRequestAsync()
        {
             return ContractHandler.SendRequestAsync<BeginUserDistributeFunction>();
        }

        public virtual Task<TransactionReceipt> BeginUserDistributeRequestAndWaitForReceiptAsync(BeginUserDistributeFunction beginUserDistributeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(beginUserDistributeFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> BeginUserDistributeRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<BeginUserDistributeFunction>(null, cancellationToken);
        }

        public Task<BigInteger> CalculateNodeShareQueryAsync(CalculateNodeShareFunction calculateNodeShareFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<CalculateNodeShareFunction, BigInteger>(calculateNodeShareFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> CalculateNodeShareQueryAsync(BigInteger balance, BlockParameter blockParameter = null)
        {
            var calculateNodeShareFunction = new CalculateNodeShareFunction();
                calculateNodeShareFunction.Balance = balance;
            
            return ContractHandler.QueryAsync<CalculateNodeShareFunction, BigInteger>(calculateNodeShareFunction, blockParameter);
        }

        public Task<BigInteger> CalculateUserShareQueryAsync(CalculateUserShareFunction calculateUserShareFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<CalculateUserShareFunction, BigInteger>(calculateUserShareFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> CalculateUserShareQueryAsync(BigInteger balance, BlockParameter blockParameter = null)
        {
            var calculateUserShareFunction = new CalculateUserShareFunction();
                calculateUserShareFunction.Balance = balance;
            
            return ContractHandler.QueryAsync<CalculateUserShareFunction, BigInteger>(calculateUserShareFunction, blockParameter);
        }

        public Task<bool> CanPromoteQueryAsync(CanPromoteFunction canPromoteFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<CanPromoteFunction, bool>(canPromoteFunction, blockParameter);
        }

        
        public virtual Task<bool> CanPromoteQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<CanPromoteFunction, bool>(null, blockParameter);
        }

        public Task<bool> CanStakeQueryAsync(CanStakeFunction canStakeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<CanStakeFunction, bool>(canStakeFunction, blockParameter);
        }

        
        public virtual Task<bool> CanStakeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<CanStakeFunction, bool>(null, blockParameter);
        }

        public virtual Task<string> CloseRequestAsync(CloseFunction closeFunction)
        {
             return ContractHandler.SendRequestAsync(closeFunction);
        }

        public virtual Task<string> CloseRequestAsync()
        {
             return ContractHandler.SendRequestAsync<CloseFunction>();
        }

        public virtual Task<TransactionReceipt> CloseRequestAndWaitForReceiptAsync(CloseFunction closeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(closeFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> CloseRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<CloseFunction>(null, cancellationToken);
        }

        public virtual Task<string> DepositRequestAsync(DepositFunction depositFunction)
        {
             return ContractHandler.SendRequestAsync(depositFunction);
        }

        public virtual Task<string> DepositRequestAsync()
        {
             return ContractHandler.SendRequestAsync<DepositFunction>();
        }

        public virtual Task<TransactionReceipt> DepositRequestAndWaitForReceiptAsync(DepositFunction depositFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(depositFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> DepositRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<DepositFunction>(null, cancellationToken);
        }

        public virtual Task<string> DissolveRequestAsync(DissolveFunction dissolveFunction)
        {
             return ContractHandler.SendRequestAsync(dissolveFunction);
        }

        public virtual Task<string> DissolveRequestAsync()
        {
             return ContractHandler.SendRequestAsync<DissolveFunction>();
        }

        public virtual Task<TransactionReceipt> DissolveRequestAndWaitForReceiptAsync(DissolveFunction dissolveFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dissolveFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> DissolveRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<DissolveFunction>(null, cancellationToken);
        }

        public virtual Task<string> DistributeBalanceRequestAsync(DistributeBalanceFunction distributeBalanceFunction)
        {
             return ContractHandler.SendRequestAsync(distributeBalanceFunction);
        }

        public virtual Task<TransactionReceipt> DistributeBalanceRequestAndWaitForReceiptAsync(DistributeBalanceFunction distributeBalanceFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(distributeBalanceFunction, cancellationToken);
        }

        public virtual Task<string> DistributeBalanceRequestAsync(bool rewardsOnly)
        {
            var distributeBalanceFunction = new DistributeBalanceFunction();
                distributeBalanceFunction.RewardsOnly = rewardsOnly;
            
             return ContractHandler.SendRequestAsync(distributeBalanceFunction);
        }

        public virtual Task<TransactionReceipt> DistributeBalanceRequestAndWaitForReceiptAsync(bool rewardsOnly, CancellationTokenSource cancellationToken = null)
        {
            var distributeBalanceFunction = new DistributeBalanceFunction();
                distributeBalanceFunction.RewardsOnly = rewardsOnly;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(distributeBalanceFunction, cancellationToken);
        }

        public virtual Task<string> FinaliseRequestAsync(FinaliseFunction finaliseFunction)
        {
             return ContractHandler.SendRequestAsync(finaliseFunction);
        }

        public virtual Task<string> FinaliseRequestAsync()
        {
             return ContractHandler.SendRequestAsync<FinaliseFunction>();
        }

        public virtual Task<TransactionReceipt> FinaliseRequestAndWaitForReceiptAsync(FinaliseFunction finaliseFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(finaliseFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> FinaliseRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<FinaliseFunction>(null, cancellationToken);
        }

        public Task<byte> GetDepositTypeQueryAsync(GetDepositTypeFunction getDepositTypeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetDepositTypeFunction, byte>(getDepositTypeFunction, blockParameter);
        }

        
        public virtual Task<byte> GetDepositTypeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetDepositTypeFunction, byte>(null, blockParameter);
        }

        public Task<bool> GetFinalisedQueryAsync(GetFinalisedFunction getFinalisedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetFinalisedFunction, bool>(getFinalisedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetFinalisedQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetFinalisedFunction, bool>(null, blockParameter);
        }

        public Task<string> GetNodeAddressQueryAsync(GetNodeAddressFunction getNodeAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeAddressFunction, string>(getNodeAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeAddressQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeAddressFunction, string>(null, blockParameter);
        }

        public Task<bool> GetNodeDepositAssignedQueryAsync(GetNodeDepositAssignedFunction getNodeDepositAssignedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeDepositAssignedFunction, bool>(getNodeDepositAssignedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetNodeDepositAssignedQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeDepositAssignedFunction, bool>(null, blockParameter);
        }

        public Task<BigInteger> GetNodeDepositBalanceQueryAsync(GetNodeDepositBalanceFunction getNodeDepositBalanceFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeDepositBalanceFunction, BigInteger>(getNodeDepositBalanceFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeDepositBalanceQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeDepositBalanceFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetNodeFeeQueryAsync(GetNodeFeeFunction getNodeFeeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeFeeFunction, BigInteger>(getNodeFeeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeFeeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeFeeFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetNodeRefundBalanceQueryAsync(GetNodeRefundBalanceFunction getNodeRefundBalanceFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeRefundBalanceFunction, BigInteger>(getNodeRefundBalanceFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeRefundBalanceQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeRefundBalanceFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetNodeTopUpValueQueryAsync(GetNodeTopUpValueFunction getNodeTopUpValueFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeTopUpValueFunction, BigInteger>(getNodeTopUpValueFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeTopUpValueQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeTopUpValueFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetPreLaunchValueQueryAsync(GetPreLaunchValueFunction getPreLaunchValueFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetPreLaunchValueFunction, BigInteger>(getPreLaunchValueFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetPreLaunchValueQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetPreLaunchValueFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetPreMigrationBalanceQueryAsync(GetPreMigrationBalanceFunction getPreMigrationBalanceFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetPreMigrationBalanceFunction, BigInteger>(getPreMigrationBalanceFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetPreMigrationBalanceQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetPreMigrationBalanceFunction, BigInteger>(null, blockParameter);
        }

        public Task<bool> GetScrubVotedQueryAsync(GetScrubVotedFunction getScrubVotedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetScrubVotedFunction, bool>(getScrubVotedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetScrubVotedQueryAsync(string member, BlockParameter blockParameter = null)
        {
            var getScrubVotedFunction = new GetScrubVotedFunction();
                getScrubVotedFunction.Member = member;
            
            return ContractHandler.QueryAsync<GetScrubVotedFunction, bool>(getScrubVotedFunction, blockParameter);
        }

        public Task<byte> GetStatusQueryAsync(GetStatusFunction getStatusFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStatusFunction, byte>(getStatusFunction, blockParameter);
        }

        
        public virtual Task<byte> GetStatusQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStatusFunction, byte>(null, blockParameter);
        }

        public Task<BigInteger> GetStatusBlockQueryAsync(GetStatusBlockFunction getStatusBlockFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStatusBlockFunction, BigInteger>(getStatusBlockFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetStatusBlockQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStatusBlockFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetStatusTimeQueryAsync(GetStatusTimeFunction getStatusTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStatusTimeFunction, BigInteger>(getStatusTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetStatusTimeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStatusTimeFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetTotalScrubVotesQueryAsync(GetTotalScrubVotesFunction getTotalScrubVotesFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalScrubVotesFunction, BigInteger>(getTotalScrubVotesFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetTotalScrubVotesQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalScrubVotesFunction, BigInteger>(null, blockParameter);
        }

        public Task<bool> GetUserDepositAssignedQueryAsync(GetUserDepositAssignedFunction getUserDepositAssignedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDepositAssignedFunction, bool>(getUserDepositAssignedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetUserDepositAssignedQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDepositAssignedFunction, bool>(null, blockParameter);
        }

        public Task<BigInteger> GetUserDepositAssignedTimeQueryAsync(GetUserDepositAssignedTimeFunction getUserDepositAssignedTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDepositAssignedTimeFunction, BigInteger>(getUserDepositAssignedTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetUserDepositAssignedTimeQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDepositAssignedTimeFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetUserDepositBalanceQueryAsync(GetUserDepositBalanceFunction getUserDepositBalanceFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDepositBalanceFunction, BigInteger>(getUserDepositBalanceFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetUserDepositBalanceQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDepositBalanceFunction, BigInteger>(null, blockParameter);
        }

        public Task<bool> GetUserDistributedQueryAsync(GetUserDistributedFunction getUserDistributedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDistributedFunction, bool>(getUserDistributedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetUserDistributedQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserDistributedFunction, bool>(null, blockParameter);
        }

        public Task<bool> GetVacantQueryAsync(GetVacantFunction getVacantFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetVacantFunction, bool>(getVacantFunction, blockParameter);
        }

        
        public virtual Task<bool> GetVacantQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetVacantFunction, bool>(null, blockParameter);
        }

        public virtual Task<string> InitialiseRequestAsync(InitialiseFunction initialiseFunction)
        {
             return ContractHandler.SendRequestAsync(initialiseFunction);
        }

        public virtual Task<TransactionReceipt> InitialiseRequestAndWaitForReceiptAsync(InitialiseFunction initialiseFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(initialiseFunction, cancellationToken);
        }

        public virtual Task<string> InitialiseRequestAsync(string nodeAddress)
        {
            var initialiseFunction = new InitialiseFunction();
                initialiseFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(initialiseFunction);
        }

        public virtual Task<TransactionReceipt> InitialiseRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var initialiseFunction = new InitialiseFunction();
                initialiseFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(initialiseFunction, cancellationToken);
        }

        public virtual Task<string> PreDepositRequestAsync(PreDepositFunction preDepositFunction)
        {
             return ContractHandler.SendRequestAsync(preDepositFunction);
        }

        public virtual Task<TransactionReceipt> PreDepositRequestAndWaitForReceiptAsync(PreDepositFunction preDepositFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(preDepositFunction, cancellationToken);
        }

        public virtual Task<string> PreDepositRequestAsync(BigInteger bondValue, byte[] validatorPubkey, byte[] validatorSignature, byte[] depositDataRoot)
        {
            var preDepositFunction = new PreDepositFunction();
                preDepositFunction.BondValue = bondValue;
                preDepositFunction.ValidatorPubkey = validatorPubkey;
                preDepositFunction.ValidatorSignature = validatorSignature;
                preDepositFunction.DepositDataRoot = depositDataRoot;
            
             return ContractHandler.SendRequestAsync(preDepositFunction);
        }

        public virtual Task<TransactionReceipt> PreDepositRequestAndWaitForReceiptAsync(BigInteger bondValue, byte[] validatorPubkey, byte[] validatorSignature, byte[] depositDataRoot, CancellationTokenSource cancellationToken = null)
        {
            var preDepositFunction = new PreDepositFunction();
                preDepositFunction.BondValue = bondValue;
                preDepositFunction.ValidatorPubkey = validatorPubkey;
                preDepositFunction.ValidatorSignature = validatorSignature;
                preDepositFunction.DepositDataRoot = depositDataRoot;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(preDepositFunction, cancellationToken);
        }

        public virtual Task<string> PrepareVacancyRequestAsync(PrepareVacancyFunction prepareVacancyFunction)
        {
             return ContractHandler.SendRequestAsync(prepareVacancyFunction);
        }

        public virtual Task<TransactionReceipt> PrepareVacancyRequestAndWaitForReceiptAsync(PrepareVacancyFunction prepareVacancyFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(prepareVacancyFunction, cancellationToken);
        }

        public virtual Task<string> PrepareVacancyRequestAsync(BigInteger bondAmount, BigInteger currentBalance)
        {
            var prepareVacancyFunction = new PrepareVacancyFunction();
                prepareVacancyFunction.BondAmount = bondAmount;
                prepareVacancyFunction.CurrentBalance = currentBalance;
            
             return ContractHandler.SendRequestAsync(prepareVacancyFunction);
        }

        public virtual Task<TransactionReceipt> PrepareVacancyRequestAndWaitForReceiptAsync(BigInteger bondAmount, BigInteger currentBalance, CancellationTokenSource cancellationToken = null)
        {
            var prepareVacancyFunction = new PrepareVacancyFunction();
                prepareVacancyFunction.BondAmount = bondAmount;
                prepareVacancyFunction.CurrentBalance = currentBalance;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(prepareVacancyFunction, cancellationToken);
        }

        public virtual Task<string> PromoteRequestAsync(PromoteFunction promoteFunction)
        {
             return ContractHandler.SendRequestAsync(promoteFunction);
        }

        public virtual Task<string> PromoteRequestAsync()
        {
             return ContractHandler.SendRequestAsync<PromoteFunction>();
        }

        public virtual Task<TransactionReceipt> PromoteRequestAndWaitForReceiptAsync(PromoteFunction promoteFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(promoteFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> PromoteRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<PromoteFunction>(null, cancellationToken);
        }

        public virtual Task<string> ReduceBondAmountRequestAsync(ReduceBondAmountFunction reduceBondAmountFunction)
        {
             return ContractHandler.SendRequestAsync(reduceBondAmountFunction);
        }

        public virtual Task<string> ReduceBondAmountRequestAsync()
        {
             return ContractHandler.SendRequestAsync<ReduceBondAmountFunction>();
        }

        public virtual Task<TransactionReceipt> ReduceBondAmountRequestAndWaitForReceiptAsync(ReduceBondAmountFunction reduceBondAmountFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(reduceBondAmountFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> ReduceBondAmountRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<ReduceBondAmountFunction>(null, cancellationToken);
        }

        public virtual Task<string> RefundRequestAsync(RefundFunction refundFunction)
        {
             return ContractHandler.SendRequestAsync(refundFunction);
        }

        public virtual Task<string> RefundRequestAsync()
        {
             return ContractHandler.SendRequestAsync<RefundFunction>();
        }

        public virtual Task<TransactionReceipt> RefundRequestAndWaitForReceiptAsync(RefundFunction refundFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(refundFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> RefundRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<RefundFunction>(null, cancellationToken);
        }

        public virtual Task<string> SlashRequestAsync(SlashFunction slashFunction)
        {
             return ContractHandler.SendRequestAsync(slashFunction);
        }

        public virtual Task<string> SlashRequestAsync()
        {
             return ContractHandler.SendRequestAsync<SlashFunction>();
        }

        public virtual Task<TransactionReceipt> SlashRequestAndWaitForReceiptAsync(SlashFunction slashFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(slashFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> SlashRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<SlashFunction>(null, cancellationToken);
        }

        public virtual Task<string> StakeRequestAsync(StakeFunction stakeFunction)
        {
             return ContractHandler.SendRequestAsync(stakeFunction);
        }

        public virtual Task<TransactionReceipt> StakeRequestAndWaitForReceiptAsync(StakeFunction stakeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeFunction, cancellationToken);
        }

        public virtual Task<string> StakeRequestAsync(byte[] validatorSignature, byte[] depositDataRoot)
        {
            var stakeFunction = new StakeFunction();
                stakeFunction.ValidatorSignature = validatorSignature;
                stakeFunction.DepositDataRoot = depositDataRoot;
            
             return ContractHandler.SendRequestAsync(stakeFunction);
        }

        public virtual Task<TransactionReceipt> StakeRequestAndWaitForReceiptAsync(byte[] validatorSignature, byte[] depositDataRoot, CancellationTokenSource cancellationToken = null)
        {
            var stakeFunction = new StakeFunction();
                stakeFunction.ValidatorSignature = validatorSignature;
                stakeFunction.DepositDataRoot = depositDataRoot;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeFunction, cancellationToken);
        }

        public virtual Task<string> UserDepositRequestAsync(UserDepositFunction userDepositFunction)
        {
             return ContractHandler.SendRequestAsync(userDepositFunction);
        }

        public virtual Task<string> UserDepositRequestAsync()
        {
             return ContractHandler.SendRequestAsync<UserDepositFunction>();
        }

        public virtual Task<TransactionReceipt> UserDepositRequestAndWaitForReceiptAsync(UserDepositFunction userDepositFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(userDepositFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> UserDepositRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<UserDepositFunction>(null, cancellationToken);
        }

        public Task<bool> UserDistributeAllowedQueryAsync(UserDistributeAllowedFunction userDistributeAllowedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<UserDistributeAllowedFunction, bool>(userDistributeAllowedFunction, blockParameter);
        }

        
        public virtual Task<bool> UserDistributeAllowedQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<UserDistributeAllowedFunction, bool>(null, blockParameter);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public virtual Task<string> VoteScrubRequestAsync(VoteScrubFunction voteScrubFunction)
        {
             return ContractHandler.SendRequestAsync(voteScrubFunction);
        }

        public virtual Task<string> VoteScrubRequestAsync()
        {
             return ContractHandler.SendRequestAsync<VoteScrubFunction>();
        }

        public virtual Task<TransactionReceipt> VoteScrubRequestAndWaitForReceiptAsync(VoteScrubFunction voteScrubFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(voteScrubFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> VoteScrubRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<VoteScrubFunction>(null, cancellationToken);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(BeginUserDistributeFunction),
                typeof(CalculateNodeShareFunction),
                typeof(CalculateUserShareFunction),
                typeof(CanPromoteFunction),
                typeof(CanStakeFunction),
                typeof(CloseFunction),
                typeof(DepositFunction),
                typeof(DissolveFunction),
                typeof(DistributeBalanceFunction),
                typeof(FinaliseFunction),
                typeof(GetDepositTypeFunction),
                typeof(GetFinalisedFunction),
                typeof(GetNodeAddressFunction),
                typeof(GetNodeDepositAssignedFunction),
                typeof(GetNodeDepositBalanceFunction),
                typeof(GetNodeFeeFunction),
                typeof(GetNodeRefundBalanceFunction),
                typeof(GetNodeTopUpValueFunction),
                typeof(GetPreLaunchValueFunction),
                typeof(GetPreMigrationBalanceFunction),
                typeof(GetScrubVotedFunction),
                typeof(GetStatusFunction),
                typeof(GetStatusBlockFunction),
                typeof(GetStatusTimeFunction),
                typeof(GetTotalScrubVotesFunction),
                typeof(GetUserDepositAssignedFunction),
                typeof(GetUserDepositAssignedTimeFunction),
                typeof(GetUserDepositBalanceFunction),
                typeof(GetUserDistributedFunction),
                typeof(GetVacantFunction),
                typeof(InitialiseFunction),
                typeof(PreDepositFunction),
                typeof(PrepareVacancyFunction),
                typeof(PromoteFunction),
                typeof(ReduceBondAmountFunction),
                typeof(RefundFunction),
                typeof(SlashFunction),
                typeof(StakeFunction),
                typeof(UserDepositFunction),
                typeof(UserDistributeAllowedFunction),
                typeof(VersionFunction),
                typeof(VoteScrubFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(BondReducedEventDTO),
                typeof(EtherDepositedEventDTO),
                typeof(EtherWithdrawalProcessedEventDTO),
                typeof(EtherWithdrawnEventDTO),
                typeof(MinipoolPrestakedEventDTO),
                typeof(MinipoolPromotedEventDTO),
                typeof(MinipoolScrubbedEventDTO),
                typeof(MinipoolVacancyPreparedEventDTO),
                typeof(ScrubVotedEventDTO),
                typeof(StatusUpdatedEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
