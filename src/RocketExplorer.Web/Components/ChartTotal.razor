@using LiveChartsCore.Defaults
@inherits ChartBase

<ChartTemplate Title="@Title" Aggregation="Aggregation" AggregationChanged="SetAggregation" Expanded="Expanded" ExpandedChanged="SetExpanded">
	@if (Data == null)
	{
		<MudText Align="Align.Center">
			<MudProgressCircular Class="mt-20 mb-20" Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
		</MudText>
	}
	else
	{
		<CartesianChart @key="Key" Series="Series" XAxes="XAxes" YAxes="YAxes" TooltipTextSize="13">
		</CartesianChart>
	}
</ChartTemplate>

@code {

	protected override void OnInitialized() =>
		Series =
		[
			new LineSeries<DateTimePoint>
			{
				LineSmoothness = 0,
				DataLabelsSize = 14,
			},
		];

	protected override void SetSeries()
	{
		// TODO: Support Data.Length > 1
		if (Series == null || Data == null || Series.Length != Data.Length)
		{
			return;
		}

		DateOnly target;

		switch (Aggregation)
		{
			case ChartAggregation.Yearly:
				if (Data.FirstOrDefault()?.Count > 0)
				{
					target = Data.FirstOrDefault()!.Min(x => x.Key);
					target = new DateOnly(target.Year - 1, 1, 1);
				}
				else
				{
					target = new DateOnly(2020, 1, 1);
				}

				break;

			case ChartAggregation.Monthly:
				target = DateOnly.FromDateTime(DateTime.Now).AddMonths(Expanded ? -36 : -12);
				target = new DateOnly(target.Year, target.Month, 1);
				break;

			case ChartAggregation.Daily:
				target = DateOnly.FromDateTime(DateTime.Now).AddDays(Expanded ? -42 : -14);
				break;

			default:
				throw new ArgumentOutOfRangeException(nameof(Aggregation));
		}

		Series[0].Values = Data.FirstOrDefault()?.PrepareTotal(Aggregation, target).ToList() ?? [];
	}

}