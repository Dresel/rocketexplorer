// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts;
using System.Threading;

namespace RocketExplorer.Ethereum.RocketNodeStaking.ContractDefinition
{


    public partial class RocketNodeStakingDeployment : RocketNodeStakingDeploymentBase
    {
        public RocketNodeStakingDeployment() : base(BYTECODE) { }
        public RocketNodeStakingDeployment(string byteCode) : base(byteCode) { }
    }

    public class RocketNodeStakingDeploymentBase : ContractDeploymentMessage
    {
        public static string BYTECODE = """
[
	{
		"inputs": [
			{
				"internalType": "contract RocketStorageInterface",
				"name": "_rocketStorageAddress",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLBurned",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLLegacyWithdrawn",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLLocked",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "node",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "allowed",
				"type": "bool"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLLockingAllowed",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "node",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "ethValue",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLSlashed",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "node",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLStaked",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLStaked",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLTransferred",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLUnlocked",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLUnstaked",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "RPLWithdrawn",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "node",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "caller",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "bool",
				"name": "allowed",
				"type": "bool"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "time",
				"type": "uint256"
			}
		],
		"name": "StakeRPLForAllowed",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_from",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "burnRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeETHBonded",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeETHBorrowed",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeETHCollateralisationRatio",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeLastUnstakeTime",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeLegacyStakedRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeLockedRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeMaximumRPLStakeForMinipools",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeMegapoolETHBonded",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeMegapoolETHBorrowed",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeMegapoolStakedRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeMinipoolETHBonded",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeMinipoolETHBorrowed",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeRPLStakedTime",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeStakedRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getNodeUnstakingRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "getRPLLockingAllowed",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getTotalLegacyStakedRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getTotalMegapoolStakedRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getTotalStakedRPL",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "lockRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "_allowed",
				"type": "bool"
			}
		],
		"name": "setRPLLockingAllowed",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_caller",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "_allowed",
				"type": "bool"
			}
		],
		"name": "setStakeRPLForAllowed",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "_caller",
				"type": "address"
			},
			{
				"internalType": "bool",
				"name": "_allowed",
				"type": "bool"
			}
		],
		"name": "setStakeRPLForAllowed",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_ethSlashAmount",
				"type": "uint256"
			}
		],
		"name": "slashRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "stakeRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "stakeRPLFor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "transferRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "unlockRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "unstakeRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "unstakeRPLFor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "version",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "withdrawLegacyRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "withdrawLegacyRPLFor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "withdrawRPL",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_nodeAddress",
				"type": "address"
			}
		],
		"name": "withdrawRPLFor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]
""";
        public RocketNodeStakingDeploymentBase() : base(BYTECODE) { }
        public RocketNodeStakingDeploymentBase(string byteCode) : base(byteCode) { }
        [Parameter("address", "_rocketStorageAddress", 1)]
        public virtual string RocketStorageAddress { get; set; }
    }

    public partial class BurnRPLFunction : BurnRPLFunctionBase { }

    [Function("burnRPL")]
    public class BurnRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_from", 1)]
        public virtual string From { get; set; }
        [Parameter("uint256", "_amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class GetNodeETHBondedFunction : GetNodeETHBondedFunctionBase { }

    [Function("getNodeETHBonded", "uint256")]
    public class GetNodeETHBondedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeETHBorrowedFunction : GetNodeETHBorrowedFunctionBase { }

    [Function("getNodeETHBorrowed", "uint256")]
    public class GetNodeETHBorrowedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeETHCollateralisationRatioFunction : GetNodeETHCollateralisationRatioFunctionBase { }

    [Function("getNodeETHCollateralisationRatio", "uint256")]
    public class GetNodeETHCollateralisationRatioFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeLastUnstakeTimeFunction : GetNodeLastUnstakeTimeFunctionBase { }

    [Function("getNodeLastUnstakeTime", "uint256")]
    public class GetNodeLastUnstakeTimeFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeLegacyStakedRPLFunction : GetNodeLegacyStakedRPLFunctionBase { }

    [Function("getNodeLegacyStakedRPL", "uint256")]
    public class GetNodeLegacyStakedRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeLockedRPLFunction : GetNodeLockedRPLFunctionBase { }

    [Function("getNodeLockedRPL", "uint256")]
    public class GetNodeLockedRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeMaximumRPLStakeForMinipoolsFunction : GetNodeMaximumRPLStakeForMinipoolsFunctionBase { }

    [Function("getNodeMaximumRPLStakeForMinipools", "uint256")]
    public class GetNodeMaximumRPLStakeForMinipoolsFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeMegapoolETHBondedFunction : GetNodeMegapoolETHBondedFunctionBase { }

    [Function("getNodeMegapoolETHBonded", "uint256")]
    public class GetNodeMegapoolETHBondedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeMegapoolETHBorrowedFunction : GetNodeMegapoolETHBorrowedFunctionBase { }

    [Function("getNodeMegapoolETHBorrowed", "uint256")]
    public class GetNodeMegapoolETHBorrowedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeMegapoolStakedRPLFunction : GetNodeMegapoolStakedRPLFunctionBase { }

    [Function("getNodeMegapoolStakedRPL", "uint256")]
    public class GetNodeMegapoolStakedRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeMinipoolETHBondedFunction : GetNodeMinipoolETHBondedFunctionBase { }

    [Function("getNodeMinipoolETHBonded", "uint256")]
    public class GetNodeMinipoolETHBondedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeMinipoolETHBorrowedFunction : GetNodeMinipoolETHBorrowedFunctionBase { }

    [Function("getNodeMinipoolETHBorrowed", "uint256")]
    public class GetNodeMinipoolETHBorrowedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeRPLStakedTimeFunction : GetNodeRPLStakedTimeFunctionBase { }

    [Function("getNodeRPLStakedTime", "uint256")]
    public class GetNodeRPLStakedTimeFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeStakedRPLFunction : GetNodeStakedRPLFunctionBase { }

    [Function("getNodeStakedRPL", "uint256")]
    public class GetNodeStakedRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetNodeUnstakingRPLFunction : GetNodeUnstakingRPLFunctionBase { }

    [Function("getNodeUnstakingRPL", "uint256")]
    public class GetNodeUnstakingRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetRPLLockingAllowedFunction : GetRPLLockingAllowedFunctionBase { }

    [Function("getRPLLockingAllowed", "bool")]
    public class GetRPLLockingAllowedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class GetTotalLegacyStakedRPLFunction : GetTotalLegacyStakedRPLFunctionBase { }

    [Function("getTotalLegacyStakedRPL", "uint256")]
    public class GetTotalLegacyStakedRPLFunctionBase : FunctionMessage
    {

    }

    public partial class GetTotalMegapoolStakedRPLFunction : GetTotalMegapoolStakedRPLFunctionBase { }

    [Function("getTotalMegapoolStakedRPL", "uint256")]
    public class GetTotalMegapoolStakedRPLFunctionBase : FunctionMessage
    {

    }

    public partial class GetTotalStakedRPLFunction : GetTotalStakedRPLFunctionBase { }

    [Function("getTotalStakedRPL", "uint256")]
    public class GetTotalStakedRPLFunctionBase : FunctionMessage
    {

    }

    public partial class LockRPLFunction : LockRPLFunctionBase { }

    [Function("lockRPL")]
    public class LockRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("uint256", "_amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class SetRPLLockingAllowedFunction : SetRPLLockingAllowedFunctionBase { }

    [Function("setRPLLockingAllowed")]
    public class SetRPLLockingAllowedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("bool", "_allowed", 2)]
        public virtual bool Allowed { get; set; }
    }

    public partial class SetStakeRPLForAllowedFunction : SetStakeRPLForAllowedFunctionBase { }

    [Function("setStakeRPLForAllowed")]
    public class SetStakeRPLForAllowedFunctionBase : FunctionMessage
    {
        [Parameter("address", "_caller", 1)]
        public virtual string Caller { get; set; }
        [Parameter("bool", "_allowed", 2)]
        public virtual bool Allowed { get; set; }
    }

    public partial class SetStakeRPLForAllowed1Function : SetStakeRPLForAllowed1FunctionBase { }

    [Function("setStakeRPLForAllowed")]
    public class SetStakeRPLForAllowed1FunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("address", "_caller", 2)]
        public virtual string Caller { get; set; }
        [Parameter("bool", "_allowed", 3)]
        public virtual bool Allowed { get; set; }
    }

    public partial class SlashRPLFunction : SlashRPLFunctionBase { }

    [Function("slashRPL")]
    public class SlashRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("uint256", "_ethSlashAmount", 2)]
        public virtual BigInteger EthSlashAmount { get; set; }
    }

    public partial class StakeRPLFunction : StakeRPLFunctionBase { }

    [Function("stakeRPL")]
    public class StakeRPLFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "_amount", 1)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class StakeRPLForFunction : StakeRPLForFunctionBase { }

    [Function("stakeRPLFor")]
    public class StakeRPLForFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("uint256", "_amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class TransferRPLFunction : TransferRPLFunctionBase { }

    [Function("transferRPL")]
    public class TransferRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_from", 1)]
        public virtual string From { get; set; }
        [Parameter("address", "_to", 2)]
        public virtual string To { get; set; }
        [Parameter("uint256", "_amount", 3)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class UnlockRPLFunction : UnlockRPLFunctionBase { }

    [Function("unlockRPL")]
    public class UnlockRPLFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("uint256", "_amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class UnstakeRPLFunction : UnstakeRPLFunctionBase { }

    [Function("unstakeRPL")]
    public class UnstakeRPLFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "_amount", 1)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class UnstakeRPLForFunction : UnstakeRPLForFunctionBase { }

    [Function("unstakeRPLFor")]
    public class UnstakeRPLForFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("uint256", "_amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class VersionFunction : VersionFunctionBase { }

    [Function("version", "uint8")]
    public class VersionFunctionBase : FunctionMessage
    {

    }

    public partial class WithdrawLegacyRPLFunction : WithdrawLegacyRPLFunctionBase { }

    [Function("withdrawLegacyRPL")]
    public class WithdrawLegacyRPLFunctionBase : FunctionMessage
    {
        [Parameter("uint256", "_amount", 1)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class WithdrawLegacyRPLForFunction : WithdrawLegacyRPLForFunctionBase { }

    [Function("withdrawLegacyRPLFor")]
    public class WithdrawLegacyRPLForFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
        [Parameter("uint256", "_amount", 2)]
        public virtual BigInteger Amount { get; set; }
    }

    public partial class WithdrawRPLFunction : WithdrawRPLFunctionBase { }

    [Function("withdrawRPL")]
    public class WithdrawRPLFunctionBase : FunctionMessage
    {

    }

    public partial class WithdrawRPLForFunction : WithdrawRPLForFunctionBase { }

    [Function("withdrawRPLFor")]
    public class WithdrawRPLForFunctionBase : FunctionMessage
    {
        [Parameter("address", "_nodeAddress", 1)]
        public virtual string NodeAddress { get; set; }
    }

    public partial class RPLBurnedEventDTO : RPLBurnedEventDTOBase { }

    [Event("RPLBurned")]
    public class RPLBurnedEventDTOBase : IEventDTO
    {
        [Parameter("address", "from", 1, true )]
        public virtual string From { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLLegacyWithdrawnEventDTO : RPLLegacyWithdrawnEventDTOBase { }

    [Event("RPLLegacyWithdrawn")]
    public class RPLLegacyWithdrawnEventDTOBase : IEventDTO
    {
        [Parameter("address", "to", 1, true )]
        public virtual string To { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLLockedEventDTO : RPLLockedEventDTOBase { }

    [Event("RPLLocked")]
    public class RPLLockedEventDTOBase : IEventDTO
    {
        [Parameter("address", "from", 1, true )]
        public virtual string From { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLLockingAllowedEventDTO : RPLLockingAllowedEventDTOBase { }

    [Event("RPLLockingAllowed")]
    public class RPLLockingAllowedEventDTOBase : IEventDTO
    {
        [Parameter("address", "node", 1, true )]
        public virtual string Node { get; set; }
        [Parameter("bool", "allowed", 2, false )]
        public virtual bool Allowed { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLSlashedEventDTO : RPLSlashedEventDTOBase { }

    [Event("RPLSlashed")]
    public class RPLSlashedEventDTOBase : IEventDTO
    {
        [Parameter("address", "node", 1, true )]
        public virtual string Node { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "ethValue", 3, false )]
        public virtual BigInteger EthValue { get; set; }
        [Parameter("uint256", "time", 4, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLStakedEventDTO : RPLStaked1EventDTOBase { }

    [Event("RPLStaked")]
    public class RPLStaked1EventDTOBase : IEventDTO
    {
        [Parameter("address", "node", 1, true )]
        public virtual string Node { get; set; }
        [Parameter("address", "from", 2, false )]
        public virtual string From { get; set; }
        [Parameter("uint256", "amount", 3, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 4, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLLegacyStakedEventDto : RPLStakedEventDTOBase { }

    [Event("RPLStaked")]
    public class RPLStakedEventDTOBase : IEventDTO
    {
        [Parameter("address", "from", 1, true )]
        public virtual string From { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLTransferredEventDTO : RPLTransferredEventDTOBase { }

    [Event("RPLTransferred")]
    public class RPLTransferredEventDTOBase : IEventDTO
    {
        [Parameter("address", "from", 1, true )]
        public virtual string From { get; set; }
        [Parameter("address", "to", 2, true )]
        public virtual string To { get; set; }
        [Parameter("uint256", "amount", 3, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 4, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLUnlockedEventDTO : RPLUnlockedEventDTOBase { }

    [Event("RPLUnlocked")]
    public class RPLUnlockedEventDTOBase : IEventDTO
    {
        [Parameter("address", "from", 1, true )]
        public virtual string From { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLUnstakedEventDTO : RPLUnstakedEventDTOBase { }

    [Event("RPLUnstaked")]
    public class RPLUnstakedEventDTOBase : IEventDTO
    {
        [Parameter("address", "from", 1, true )]
        public virtual string From { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class RPLOrRPLLegacyWithdrawnEventDTO : RPLWithdrawnEventDTOBase { }

    [Event("RPLWithdrawn")]
    public class RPLWithdrawnEventDTOBase : IEventDTO
    {
        [Parameter("address", "to", 1, true )]
        public virtual string To { get; set; }
        [Parameter("uint256", "amount", 2, false )]
        public virtual BigInteger Amount { get; set; }
        [Parameter("uint256", "time", 3, false )]
        public virtual BigInteger Time { get; set; }
    }

    public partial class StakeRPLForAllowedEventDTO : StakeRPLForAllowedEventDTOBase { }

    [Event("StakeRPLForAllowed")]
    public class StakeRPLForAllowedEventDTOBase : IEventDTO
    {
        [Parameter("address", "node", 1, true )]
        public virtual string Node { get; set; }
        [Parameter("address", "caller", 2, true )]
        public virtual string Caller { get; set; }
        [Parameter("bool", "allowed", 3, false )]
        public virtual bool Allowed { get; set; }
        [Parameter("uint256", "time", 4, false )]
        public virtual BigInteger Time { get; set; }
    }



    public partial class GetNodeETHBondedOutputDTO : GetNodeETHBondedOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeETHBondedOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeETHBorrowedOutputDTO : GetNodeETHBorrowedOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeETHBorrowedOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeETHCollateralisationRatioOutputDTO : GetNodeETHCollateralisationRatioOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeETHCollateralisationRatioOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeLastUnstakeTimeOutputDTO : GetNodeLastUnstakeTimeOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeLastUnstakeTimeOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeLegacyStakedRPLOutputDTO : GetNodeLegacyStakedRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeLegacyStakedRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeLockedRPLOutputDTO : GetNodeLockedRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeLockedRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeMaximumRPLStakeForMinipoolsOutputDTO : GetNodeMaximumRPLStakeForMinipoolsOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeMaximumRPLStakeForMinipoolsOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeMegapoolETHBondedOutputDTO : GetNodeMegapoolETHBondedOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeMegapoolETHBondedOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeMegapoolETHBorrowedOutputDTO : GetNodeMegapoolETHBorrowedOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeMegapoolETHBorrowedOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeMegapoolStakedRPLOutputDTO : GetNodeMegapoolStakedRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeMegapoolStakedRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeMinipoolETHBondedOutputDTO : GetNodeMinipoolETHBondedOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeMinipoolETHBondedOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeMinipoolETHBorrowedOutputDTO : GetNodeMinipoolETHBorrowedOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeMinipoolETHBorrowedOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeRPLStakedTimeOutputDTO : GetNodeRPLStakedTimeOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeRPLStakedTimeOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeStakedRPLOutputDTO : GetNodeStakedRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeStakedRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetNodeUnstakingRPLOutputDTO : GetNodeUnstakingRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetNodeUnstakingRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetRPLLockingAllowedOutputDTO : GetRPLLockingAllowedOutputDTOBase { }

    [FunctionOutput]
    public class GetRPLLockingAllowedOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("bool", "", 1)]
        public virtual bool ReturnValue1 { get; set; }
    }

    public partial class GetTotalLegacyStakedRPLOutputDTO : GetTotalLegacyStakedRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetTotalLegacyStakedRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetTotalMegapoolStakedRPLOutputDTO : GetTotalMegapoolStakedRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetTotalMegapoolStakedRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }

    public partial class GetTotalStakedRPLOutputDTO : GetTotalStakedRPLOutputDTOBase { }

    [FunctionOutput]
    public class GetTotalStakedRPLOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint256", "", 1)]
        public virtual BigInteger ReturnValue1 { get; set; }
    }























    public partial class VersionOutputDTO : VersionOutputDTOBase { }

    [FunctionOutput]
    public class VersionOutputDTOBase : IFunctionOutputDTO 
    {
        [Parameter("uint8", "", 1)]
        public virtual byte ReturnValue1 { get; set; }
    }








}
