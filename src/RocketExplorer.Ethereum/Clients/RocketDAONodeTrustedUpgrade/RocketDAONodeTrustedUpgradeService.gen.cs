// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketDAONodeTrustedUpgrade.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketDAONodeTrustedUpgrade
{
    public partial class RocketDAONodeTrustedUpgradeService: RocketDAONodeTrustedUpgradeServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketDAONodeTrustedUpgradeDeployment rocketDAONodeTrustedUpgradeDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketDAONodeTrustedUpgradeDeployment>().SendRequestAndWaitForReceiptAsync(rocketDAONodeTrustedUpgradeDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketDAONodeTrustedUpgradeDeployment rocketDAONodeTrustedUpgradeDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketDAONodeTrustedUpgradeDeployment>().SendRequestAsync(rocketDAONodeTrustedUpgradeDeployment);
        }

        public static async Task<RocketDAONodeTrustedUpgradeService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketDAONodeTrustedUpgradeDeployment rocketDAONodeTrustedUpgradeDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketDAONodeTrustedUpgradeDeployment, cancellationTokenSource);
            return new RocketDAONodeTrustedUpgradeService(web3, receipt.ContractAddress);
        }

        public RocketDAONodeTrustedUpgradeService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketDAONodeTrustedUpgradeServiceBase: ContractWeb3ServiceBase
    {

        public RocketDAONodeTrustedUpgradeServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> UpgradeRequestAsync(UpgradeFunction upgradeFunction)
        {
             return ContractHandler.SendRequestAsync(upgradeFunction);
        }

        public virtual Task<TransactionReceipt> UpgradeRequestAndWaitForReceiptAsync(UpgradeFunction upgradeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(upgradeFunction, cancellationToken);
        }

        public virtual Task<string> UpgradeRequestAsync(string type, string name, string contractAbi, string contractAddress)
        {
            var upgradeFunction = new UpgradeFunction();
                upgradeFunction.Type = type;
                upgradeFunction.Name = name;
                upgradeFunction.ContractAbi = contractAbi;
                upgradeFunction.ContractAddress = contractAddress;
            
             return ContractHandler.SendRequestAsync(upgradeFunction);
        }

        public virtual Task<TransactionReceipt> UpgradeRequestAndWaitForReceiptAsync(string type, string name, string contractAbi, string contractAddress, CancellationTokenSource cancellationToken = null)
        {
            var upgradeFunction = new UpgradeFunction();
                upgradeFunction.Type = type;
                upgradeFunction.Name = name;
                upgradeFunction.ContractAbi = contractAbi;
                upgradeFunction.ContractAddress = contractAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(upgradeFunction, cancellationToken);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(UpgradeFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(ABIAddedEventDTO),
                typeof(ABIUpgradedEventDTO),
                typeof(ContractAddedEventDTO),
                typeof(ContractUpgradedEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
