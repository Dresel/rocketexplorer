// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.AddressSetStorage.ContractDefinition;

namespace RocketExplorer.Ethereum.AddressSetStorage
{
    public partial class AddressSetStorageService: AddressSetStorageServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, AddressSetStorageDeployment addressSetStorageDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<AddressSetStorageDeployment>().SendRequestAndWaitForReceiptAsync(addressSetStorageDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, AddressSetStorageDeployment addressSetStorageDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<AddressSetStorageDeployment>().SendRequestAsync(addressSetStorageDeployment);
        }

        public static async Task<AddressSetStorageService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, AddressSetStorageDeployment addressSetStorageDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, addressSetStorageDeployment, cancellationTokenSource);
            return new AddressSetStorageService(web3, receipt.ContractAddress);
        }

        public AddressSetStorageService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class AddressSetStorageServiceBase: ContractWeb3ServiceBase
    {

        public AddressSetStorageServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> AddItemRequestAsync(AddItemFunction addItemFunction)
        {
             return ContractHandler.SendRequestAsync(addItemFunction);
        }

        public virtual Task<TransactionReceipt> AddItemRequestAndWaitForReceiptAsync(AddItemFunction addItemFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(addItemFunction, cancellationToken);
        }

        public virtual Task<string> AddItemRequestAsync(byte[] key, string value)
        {
            var addItemFunction = new AddItemFunction();
                addItemFunction.Key = key;
                addItemFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(addItemFunction);
        }

        public virtual Task<TransactionReceipt> AddItemRequestAndWaitForReceiptAsync(byte[] key, string value, CancellationTokenSource cancellationToken = null)
        {
            var addItemFunction = new AddItemFunction();
                addItemFunction.Key = key;
                addItemFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(addItemFunction, cancellationToken);
        }

        public Task<BigInteger> GetCountQueryAsync(GetCountFunction getCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetCountFunction, BigInteger>(getCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetCountQueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getCountFunction = new GetCountFunction();
                getCountFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetCountFunction, BigInteger>(getCountFunction, blockParameter);
        }

        public Task<BigInteger> GetIndexOfQueryAsync(GetIndexOfFunction getIndexOfFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetIndexOfFunction, BigInteger>(getIndexOfFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetIndexOfQueryAsync(byte[] key, string value, BlockParameter blockParameter = null)
        {
            var getIndexOfFunction = new GetIndexOfFunction();
                getIndexOfFunction.Key = key;
                getIndexOfFunction.Value = value;
            
            return ContractHandler.QueryAsync<GetIndexOfFunction, BigInteger>(getIndexOfFunction, blockParameter);
        }

        public Task<string> GetItemQueryAsync(GetItemFunction getItemFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetItemFunction, string>(getItemFunction, blockParameter);
        }

        
        public virtual Task<string> GetItemQueryAsync(byte[] key, BigInteger index, BlockParameter blockParameter = null)
        {
            var getItemFunction = new GetItemFunction();
                getItemFunction.Key = key;
                getItemFunction.Index = index;
            
            return ContractHandler.QueryAsync<GetItemFunction, string>(getItemFunction, blockParameter);
        }

        public virtual Task<string> RemoveItemRequestAsync(RemoveItemFunction removeItemFunction)
        {
             return ContractHandler.SendRequestAsync(removeItemFunction);
        }

        public virtual Task<TransactionReceipt> RemoveItemRequestAndWaitForReceiptAsync(RemoveItemFunction removeItemFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(removeItemFunction, cancellationToken);
        }

        public virtual Task<string> RemoveItemRequestAsync(byte[] key, string value)
        {
            var removeItemFunction = new RemoveItemFunction();
                removeItemFunction.Key = key;
                removeItemFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(removeItemFunction);
        }

        public virtual Task<TransactionReceipt> RemoveItemRequestAndWaitForReceiptAsync(byte[] key, string value, CancellationTokenSource cancellationToken = null)
        {
            var removeItemFunction = new RemoveItemFunction();
                removeItemFunction.Key = key;
                removeItemFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(removeItemFunction, cancellationToken);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(AddItemFunction),
                typeof(GetCountFunction),
                typeof(GetIndexOfFunction),
                typeof(GetItemFunction),
                typeof(RemoveItemFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {

            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
