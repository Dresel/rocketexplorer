// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.LinkedListStorage.ContractDefinition;

namespace RocketExplorer.Ethereum.LinkedListStorage
{
    public partial class LinkedListStorageService: LinkedListStorageServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, LinkedListStorageDeployment linkedListStorageDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<LinkedListStorageDeployment>().SendRequestAndWaitForReceiptAsync(linkedListStorageDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, LinkedListStorageDeployment linkedListStorageDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<LinkedListStorageDeployment>().SendRequestAsync(linkedListStorageDeployment);
        }

        public static async Task<LinkedListStorageService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, LinkedListStorageDeployment linkedListStorageDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, linkedListStorageDeployment, cancellationTokenSource);
            return new LinkedListStorageService(web3, receipt.ContractAddress);
        }

        public LinkedListStorageService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class LinkedListStorageServiceBase: ContractWeb3ServiceBase
    {

        public LinkedListStorageServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> DequeueItemRequestAsync(DequeueItemFunction dequeueItemFunction)
        {
             return ContractHandler.SendRequestAsync(dequeueItemFunction);
        }

        public virtual Task<TransactionReceipt> DequeueItemRequestAndWaitForReceiptAsync(DequeueItemFunction dequeueItemFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueItemFunction, cancellationToken);
        }

        public virtual Task<string> DequeueItemRequestAsync(byte[] @namespace)
        {
            var dequeueItemFunction = new DequeueItemFunction();
                dequeueItemFunction.Namespace = @namespace;
            
             return ContractHandler.SendRequestAsync(dequeueItemFunction);
        }

        public virtual Task<TransactionReceipt> DequeueItemRequestAndWaitForReceiptAsync(byte[] @namespace, CancellationTokenSource cancellationToken = null)
        {
            var dequeueItemFunction = new DequeueItemFunction();
                dequeueItemFunction.Namespace = @namespace;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueItemFunction, cancellationToken);
        }

        public virtual Task<string> EnqueueItemRequestAsync(EnqueueItemFunction enqueueItemFunction)
        {
             return ContractHandler.SendRequestAsync(enqueueItemFunction);
        }

        public virtual Task<TransactionReceipt> EnqueueItemRequestAndWaitForReceiptAsync(EnqueueItemFunction enqueueItemFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(enqueueItemFunction, cancellationToken);
        }

        public virtual Task<string> EnqueueItemRequestAsync(byte[] @namespace, DepositQueueValue item)
        {
            var enqueueItemFunction = new EnqueueItemFunction();
                enqueueItemFunction.Namespace = @namespace;
                enqueueItemFunction.Item = item;
            
             return ContractHandler.SendRequestAsync(enqueueItemFunction);
        }

        public virtual Task<TransactionReceipt> EnqueueItemRequestAndWaitForReceiptAsync(byte[] @namespace, DepositQueueValue item, CancellationTokenSource cancellationToken = null)
        {
            var enqueueItemFunction = new EnqueueItemFunction();
                enqueueItemFunction.Namespace = @namespace;
                enqueueItemFunction.Item = item;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(enqueueItemFunction, cancellationToken);
        }

        public Task<BigInteger> GetHeadIndexQueryAsync(GetHeadIndexFunction getHeadIndexFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetHeadIndexFunction, BigInteger>(getHeadIndexFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetHeadIndexQueryAsync(byte[] @namespace, BlockParameter blockParameter = null)
        {
            var getHeadIndexFunction = new GetHeadIndexFunction();
                getHeadIndexFunction.Namespace = @namespace;
            
            return ContractHandler.QueryAsync<GetHeadIndexFunction, BigInteger>(getHeadIndexFunction, blockParameter);
        }

        public Task<BigInteger> GetIndexOfQueryAsync(GetIndexOfFunction getIndexOfFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetIndexOfFunction, BigInteger>(getIndexOfFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetIndexOfQueryAsync(byte[] @namespace, DepositQueueKey key, BlockParameter blockParameter = null)
        {
            var getIndexOfFunction = new GetIndexOfFunction();
                getIndexOfFunction.Namespace = @namespace;
                getIndexOfFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetIndexOfFunction, BigInteger>(getIndexOfFunction, blockParameter);
        }

        public virtual Task<GetItemOutputDTO> GetItemQueryAsync(GetItemFunction getItemFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetItemFunction, GetItemOutputDTO>(getItemFunction, blockParameter);
        }

        public virtual Task<GetItemOutputDTO> GetItemQueryAsync(byte[] @namespace, BigInteger index, BlockParameter blockParameter = null)
        {
            var getItemFunction = new GetItemFunction();
                getItemFunction.Namespace = @namespace;
                getItemFunction.Index = index;
            
            return ContractHandler.QueryDeserializingToObjectAsync<GetItemFunction, GetItemOutputDTO>(getItemFunction, blockParameter);
        }

        public Task<BigInteger> GetLengthQueryAsync(GetLengthFunction getLengthFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetLengthFunction, BigInteger>(getLengthFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetLengthQueryAsync(byte[] @namespace, BlockParameter blockParameter = null)
        {
            var getLengthFunction = new GetLengthFunction();
                getLengthFunction.Namespace = @namespace;
            
            return ContractHandler.QueryAsync<GetLengthFunction, BigInteger>(getLengthFunction, blockParameter);
        }

        public virtual Task<GetNextItemOutputDTO> GetNextItemQueryAsync(GetNextItemFunction getNextItemFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetNextItemFunction, GetNextItemOutputDTO>(getNextItemFunction, blockParameter);
        }

        public virtual Task<GetNextItemOutputDTO> GetNextItemQueryAsync(byte[] @namespace, DepositQueueValue value, BlockParameter blockParameter = null)
        {
            var getNextItemFunction = new GetNextItemFunction();
                getNextItemFunction.Namespace = @namespace;
                getNextItemFunction.Value = value;
            
            return ContractHandler.QueryDeserializingToObjectAsync<GetNextItemFunction, GetNextItemOutputDTO>(getNextItemFunction, blockParameter);
        }

        public virtual Task<GetPreviousItemOutputDTO> GetPreviousItemQueryAsync(GetPreviousItemFunction getPreviousItemFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetPreviousItemFunction, GetPreviousItemOutputDTO>(getPreviousItemFunction, blockParameter);
        }

        public virtual Task<GetPreviousItemOutputDTO> GetPreviousItemQueryAsync(byte[] @namespace, DepositQueueValue value, BlockParameter blockParameter = null)
        {
            var getPreviousItemFunction = new GetPreviousItemFunction();
                getPreviousItemFunction.Namespace = @namespace;
                getPreviousItemFunction.Value = value;
            
            return ContractHandler.QueryDeserializingToObjectAsync<GetPreviousItemFunction, GetPreviousItemOutputDTO>(getPreviousItemFunction, blockParameter);
        }

        public virtual Task<PeekItemOutputDTO> PeekItemQueryAsync(PeekItemFunction peekItemFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<PeekItemFunction, PeekItemOutputDTO>(peekItemFunction, blockParameter);
        }

        public virtual Task<PeekItemOutputDTO> PeekItemQueryAsync(byte[] @namespace, BlockParameter blockParameter = null)
        {
            var peekItemFunction = new PeekItemFunction();
                peekItemFunction.Namespace = @namespace;
            
            return ContractHandler.QueryDeserializingToObjectAsync<PeekItemFunction, PeekItemOutputDTO>(peekItemFunction, blockParameter);
        }

        public virtual Task<string> RemoveItemRequestAsync(RemoveItemFunction removeItemFunction)
        {
             return ContractHandler.SendRequestAsync(removeItemFunction);
        }

        public virtual Task<TransactionReceipt> RemoveItemRequestAndWaitForReceiptAsync(RemoveItemFunction removeItemFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(removeItemFunction, cancellationToken);
        }

        public virtual Task<string> RemoveItemRequestAsync(byte[] @namespace, DepositQueueKey key)
        {
            var removeItemFunction = new RemoveItemFunction();
                removeItemFunction.Namespace = @namespace;
                removeItemFunction.Key = key;
            
             return ContractHandler.SendRequestAsync(removeItemFunction);
        }

        public virtual Task<TransactionReceipt> RemoveItemRequestAndWaitForReceiptAsync(byte[] @namespace, DepositQueueKey key, CancellationTokenSource cancellationToken = null)
        {
            var removeItemFunction = new RemoveItemFunction();
                removeItemFunction.Namespace = @namespace;
                removeItemFunction.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(removeItemFunction, cancellationToken);
        }

        public virtual Task<ScanOutputDTO> ScanQueryAsync(ScanFunction scanFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<ScanFunction, ScanOutputDTO>(scanFunction, blockParameter);
        }

        public virtual Task<ScanOutputDTO> ScanQueryAsync(byte[] @namespace, BigInteger start, BigInteger count, BlockParameter blockParameter = null)
        {
            var scanFunction = new ScanFunction();
                scanFunction.Namespace = @namespace;
                scanFunction.Start = start;
                scanFunction.Count = count;
            
            return ContractHandler.QueryDeserializingToObjectAsync<ScanFunction, ScanOutputDTO>(scanFunction, blockParameter);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(DequeueItemFunction),
                typeof(EnqueueItemFunction),
                typeof(GetHeadIndexFunction),
                typeof(GetIndexOfFunction),
                typeof(GetItemFunction),
                typeof(GetLengthFunction),
                typeof(GetNextItemFunction),
                typeof(GetPreviousItemFunction),
                typeof(PeekItemFunction),
                typeof(RemoveItemFunction),
                typeof(ScanFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {

            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
