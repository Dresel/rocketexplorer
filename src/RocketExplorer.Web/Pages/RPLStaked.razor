@page "/rpl-staked"
@using System.Numerics
@using LiveChartsCore.Defaults
@using RocketExplorer.Shared
@inherits PageBase<RocketExplorer.Shared.Tokens.StakedRPLSnapshot>

<PageTitle>Rocket Explorer - Staked RPL</PageTitle>
<MudStack>
	<MudText Typo="Typo.h2" Class="mud-typography-h3" Align="Align.Center">Staked RPL</MudText>

	<MudText Typo="Typo.h2" Class="mud-typography-h6" Align="Align.Center">Legacy RPL</MudText>
	<MudGrid Justify="Justify.Center">
		<MudItem>
			<ChartTotal Title="Total staked" YAxesName="RPL" Data="rplLegacyTotalStaked" MinLimit="null"></ChartTotal>
		</MudItem>
		<MudItem>
			<ChartDelta Title="Staked & unstaked" YAxesName="RPL" Data="rplLegacyStakedAndUnstaked" DataTransform="dataTransform" Series="seriesStakedAndUnstaked" MinLimit="null"></ChartDelta>
		</MudItem>
	</MudGrid>

	<MudText Typo="Typo.h2" Class="mud-typography-h6" Align="Align.Center">Megapool RPL</MudText>
	<MudGrid Justify="Justify.Center">
		<MudItem>
			<ChartTotal Title="Total staked" YAxesName="RPL" Data="rplMegapoolTotalStaked" MinLimit="null"></ChartTotal>
		</MudItem>
		<MudItem>
			<ChartDelta Title="Staked & unstaked" YAxesName="RPL" Data="rplMegapoolStakedAndUnstaked" DataTransform="dataTransform" Series="seriesStakedAndUnstaked2" MinLimit="null"></ChartDelta>
		</MudItem>
	</MudGrid>
</MudStack>

@code {

	private SortedList<DateOnly, int>[]? rplLegacyTotalStaked;
	private SortedList<DateOnly, int>[]? rplLegacyStakedAndUnstaked;

	private SortedList<DateOnly, int>[]? rplMegapoolTotalStaked;
	private SortedList<DateOnly, int>[]? rplMegapoolStakedAndUnstaked;

	private readonly Func<int, int>[] dataTransform = [x => x, x => x * -1,];

	private readonly ISeries[] seriesStakedAndUnstaked =
	[
		new ColumnSeries<DateTimePoint>
		{
			Name = "Staked",
			Padding = 3,
			MaxBarWidth = 20,
		},
		new ColumnSeries<DateTimePoint>
		{
			Name = "Unstaked",
			Padding = 3,
			MaxBarWidth = 20,
		},
	];

	private readonly ISeries[] seriesStakedAndUnstaked2 =
	[
		new ColumnSeries<DateTimePoint>
		{
			Name = "Staked",
			Padding = 3,
			MaxBarWidth = 20,
		},
		new ColumnSeries<DateTimePoint>
		{
			Name = "Unstaked",
			Padding = 3,
			MaxBarWidth = 20,
		},
	];

	protected override string ObjectStoreKey => Keys.TokensStakedRPLSnapshot;

	protected override Task OnAfterSnapshotLoadedAsync(CancellationToken cancellationToken = default)
	{
		rplLegacyStakedAndUnstaked =
		[
			new SortedList<DateOnly, int>(Snapshot?.Data.LegacyStakedDaily.ToDictionary(x => x.Key, x => (int)(x.Value / BigInteger.Pow(10, 18))) ?? []) ?? [],
			new SortedList<DateOnly, int>(Snapshot?.Data.LegacyUnstakedDaily.ToDictionary(x => x.Key, x => (int)(x.Value / BigInteger.Pow(10, 18))) ?? []) ?? [],
		];

		rplMegapoolStakedAndUnstaked =
		[
			new SortedList<DateOnly, int>(Snapshot?.Data.MegapoolStakedDaily.ToDictionary(x => x.Key, x => (int)(x.Value / BigInteger.Pow(10, 18))) ?? []) ?? [],
			new SortedList<DateOnly, int>(Snapshot?.Data.MegapoolUnstakedDaily.ToDictionary(x => x.Key, x => (int)(x.Value / BigInteger.Pow(10, 18))) ?? []) ?? [],
		];

		rplLegacyTotalStaked = [new SortedList<DateOnly, int>(Snapshot?.Data.LegacyStakedTotal.ToDictionary(x => x.Key, x => (int)(x.Value / BigInteger.Pow(10, 18))) ?? []),];
		rplMegapoolTotalStaked = [new SortedList<DateOnly, int>(Snapshot?.Data.MegapoolStakedTotal.ToDictionary(x => x.Key, x => (int)(x.Value / BigInteger.Pow(10, 18))) ?? []),];

		return Task.CompletedTask;
	}
}