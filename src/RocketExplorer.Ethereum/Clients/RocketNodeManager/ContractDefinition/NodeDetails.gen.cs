// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;

namespace RocketExplorer.Ethereum.RocketNodeManager.ContractDefinition
{
    public partial class NodeDetails : NodeDetailsBase { }

    public class NodeDetailsBase 
    {
        [Parameter("bool", "exists", 1)]
        public virtual bool Exists { get; set; }
        [Parameter("uint256", "registrationTime", 2)]
        public virtual BigInteger RegistrationTime { get; set; }
        [Parameter("string", "timezoneLocation", 3)]
        public virtual string TimezoneLocation { get; set; }
        [Parameter("bool", "feeDistributorInitialised", 4)]
        public virtual bool FeeDistributorInitialised { get; set; }
        [Parameter("address", "feeDistributorAddress", 5)]
        public virtual string FeeDistributorAddress { get; set; }
        [Parameter("uint256", "rewardNetwork", 6)]
        public virtual BigInteger RewardNetwork { get; set; }
        [Parameter("uint256", "rplStake", 7)]
        public virtual BigInteger RplStake { get; set; }
        [Parameter("uint256", "effectiveRPLStake", 8)]
        public virtual BigInteger EffectiveRPLStake { get; set; }
        [Parameter("uint256", "minimumRPLStake", 9)]
        public virtual BigInteger MinimumRPLStake { get; set; }
        [Parameter("uint256", "maximumRPLStake", 10)]
        public virtual BigInteger MaximumRPLStake { get; set; }
        [Parameter("uint256", "ethMatched", 11)]
        public virtual BigInteger EthMatched { get; set; }
        [Parameter("uint256", "ethMatchedLimit", 12)]
        public virtual BigInteger EthMatchedLimit { get; set; }
        [Parameter("uint256", "minipoolCount", 13)]
        public virtual BigInteger MinipoolCount { get; set; }
        [Parameter("uint256", "balanceETH", 14)]
        public virtual BigInteger BalanceETH { get; set; }
        [Parameter("uint256", "balanceRETH", 15)]
        public virtual BigInteger BalanceRETH { get; set; }
        [Parameter("uint256", "balanceRPL", 16)]
        public virtual BigInteger BalanceRPL { get; set; }
        [Parameter("uint256", "balanceOldRPL", 17)]
        public virtual BigInteger BalanceOldRPL { get; set; }
        [Parameter("uint256", "depositCreditBalance", 18)]
        public virtual BigInteger DepositCreditBalance { get; set; }
        [Parameter("uint256", "distributorBalanceUserETH", 19)]
        public virtual BigInteger DistributorBalanceUserETH { get; set; }
        [Parameter("uint256", "distributorBalanceNodeETH", 20)]
        public virtual BigInteger DistributorBalanceNodeETH { get; set; }
        [Parameter("address", "withdrawalAddress", 21)]
        public virtual string WithdrawalAddress { get; set; }
        [Parameter("address", "pendingWithdrawalAddress", 22)]
        public virtual string PendingWithdrawalAddress { get; set; }
        [Parameter("bool", "smoothingPoolRegistrationState", 23)]
        public virtual bool SmoothingPoolRegistrationState { get; set; }
        [Parameter("uint256", "smoothingPoolRegistrationChanged", 24)]
        public virtual BigInteger SmoothingPoolRegistrationChanged { get; set; }
        [Parameter("address", "nodeAddress", 25)]
        public virtual string NodeAddress { get; set; }
    }
}
