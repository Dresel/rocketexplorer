// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketMegapoolDelegate.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketMegapoolDelegate
{
    public partial class RocketMegapoolDelegateService: RocketMegapoolDelegateServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketMegapoolDelegateDeployment rocketMegapoolDelegateDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMegapoolDelegateDeployment>().SendRequestAndWaitForReceiptAsync(rocketMegapoolDelegateDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketMegapoolDelegateDeployment rocketMegapoolDelegateDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMegapoolDelegateDeployment>().SendRequestAsync(rocketMegapoolDelegateDeployment);
        }

        public static async Task<RocketMegapoolDelegateService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketMegapoolDelegateDeployment rocketMegapoolDelegateDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketMegapoolDelegateDeployment, cancellationTokenSource);
            return new RocketMegapoolDelegateService(web3, receipt.ContractAddress);
        }

        public RocketMegapoolDelegateService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketMegapoolDelegateServiceBase: ContractWeb3ServiceBase
    {

        public RocketMegapoolDelegateServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> AssignFundsRequestAsync(AssignFundsFunction assignFundsFunction)
        {
             return ContractHandler.SendRequestAsync(assignFundsFunction);
        }

        public virtual Task<TransactionReceipt> AssignFundsRequestAndWaitForReceiptAsync(AssignFundsFunction assignFundsFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(assignFundsFunction, cancellationToken);
        }

        public virtual Task<string> AssignFundsRequestAsync(uint validatorId)
        {
            var assignFundsFunction = new AssignFundsFunction();
                assignFundsFunction.ValidatorId = validatorId;
            
             return ContractHandler.SendRequestAsync(assignFundsFunction);
        }

        public virtual Task<TransactionReceipt> AssignFundsRequestAndWaitForReceiptAsync(uint validatorId, CancellationTokenSource cancellationToken = null)
        {
            var assignFundsFunction = new AssignFundsFunction();
                assignFundsFunction.ValidatorId = validatorId;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(assignFundsFunction, cancellationToken);
        }

        public virtual Task<CalculatePendingRewardsOutputDTO> CalculatePendingRewardsQueryAsync(CalculatePendingRewardsFunction calculatePendingRewardsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<CalculatePendingRewardsFunction, CalculatePendingRewardsOutputDTO>(calculatePendingRewardsFunction, blockParameter);
        }

        public virtual Task<CalculatePendingRewardsOutputDTO> CalculatePendingRewardsQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<CalculatePendingRewardsFunction, CalculatePendingRewardsOutputDTO>(null, blockParameter);
        }

        public virtual Task<CalculateRewardsOutputDTO> CalculateRewardsQueryAsync(CalculateRewardsFunction calculateRewardsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<CalculateRewardsFunction, CalculateRewardsOutputDTO>(calculateRewardsFunction, blockParameter);
        }

        public virtual Task<CalculateRewardsOutputDTO> CalculateRewardsQueryAsync(BigInteger amount, BlockParameter blockParameter = null)
        {
            var calculateRewardsFunction = new CalculateRewardsFunction();
                calculateRewardsFunction.Amount = amount;
            
            return ContractHandler.QueryDeserializingToObjectAsync<CalculateRewardsFunction, CalculateRewardsOutputDTO>(calculateRewardsFunction, blockParameter);
        }

        public virtual Task<string> ClaimRequestAsync(ClaimFunction claimFunction)
        {
             return ContractHandler.SendRequestAsync(claimFunction);
        }

        public virtual Task<string> ClaimRequestAsync()
        {
             return ContractHandler.SendRequestAsync<ClaimFunction>();
        }

        public virtual Task<TransactionReceipt> ClaimRequestAndWaitForReceiptAsync(ClaimFunction claimFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(claimFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> ClaimRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<ClaimFunction>(null, cancellationToken);
        }

        public virtual Task<string> DeprecateRequestAsync(DeprecateFunction deprecateFunction)
        {
             return ContractHandler.SendRequestAsync(deprecateFunction);
        }

        public virtual Task<string> DeprecateRequestAsync()
        {
             return ContractHandler.SendRequestAsync<DeprecateFunction>();
        }

        public virtual Task<TransactionReceipt> DeprecateRequestAndWaitForReceiptAsync(DeprecateFunction deprecateFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deprecateFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> DeprecateRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<DeprecateFunction>(null, cancellationToken);
        }

        public virtual Task<string> DequeueRequestAsync(DequeueFunction dequeueFunction)
        {
             return ContractHandler.SendRequestAsync(dequeueFunction);
        }

        public virtual Task<TransactionReceipt> DequeueRequestAndWaitForReceiptAsync(DequeueFunction dequeueFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueFunction, cancellationToken);
        }

        public virtual Task<string> DequeueRequestAsync(uint validatorId)
        {
            var dequeueFunction = new DequeueFunction();
                dequeueFunction.ValidatorId = validatorId;
            
             return ContractHandler.SendRequestAsync(dequeueFunction);
        }

        public virtual Task<TransactionReceipt> DequeueRequestAndWaitForReceiptAsync(uint validatorId, CancellationTokenSource cancellationToken = null)
        {
            var dequeueFunction = new DequeueFunction();
                dequeueFunction.ValidatorId = validatorId;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueFunction, cancellationToken);
        }

        public virtual Task<string> DissolveValidatorRequestAsync(DissolveValidatorFunction dissolveValidatorFunction)
        {
             return ContractHandler.SendRequestAsync(dissolveValidatorFunction);
        }

        public virtual Task<TransactionReceipt> DissolveValidatorRequestAndWaitForReceiptAsync(DissolveValidatorFunction dissolveValidatorFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dissolveValidatorFunction, cancellationToken);
        }

        public virtual Task<string> DissolveValidatorRequestAsync(uint validatorId)
        {
            var dissolveValidatorFunction = new DissolveValidatorFunction();
                dissolveValidatorFunction.ValidatorId = validatorId;
            
             return ContractHandler.SendRequestAsync(dissolveValidatorFunction);
        }

        public virtual Task<TransactionReceipt> DissolveValidatorRequestAndWaitForReceiptAsync(uint validatorId, CancellationTokenSource cancellationToken = null)
        {
            var dissolveValidatorFunction = new DissolveValidatorFunction();
                dissolveValidatorFunction.ValidatorId = validatorId;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dissolveValidatorFunction, cancellationToken);
        }

        public virtual Task<string> DistributeRequestAsync(DistributeFunction distributeFunction)
        {
             return ContractHandler.SendRequestAsync(distributeFunction);
        }

        public virtual Task<string> DistributeRequestAsync()
        {
             return ContractHandler.SendRequestAsync<DistributeFunction>();
        }

        public virtual Task<TransactionReceipt> DistributeRequestAndWaitForReceiptAsync(DistributeFunction distributeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(distributeFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> DistributeRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<DistributeFunction>(null, cancellationToken);
        }

        public Task<uint> GetActiveValidatorCountQueryAsync(GetActiveValidatorCountFunction getActiveValidatorCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetActiveValidatorCountFunction, uint>(getActiveValidatorCountFunction, blockParameter);
        }

        
        public virtual Task<uint> GetActiveValidatorCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetActiveValidatorCountFunction, uint>(null, blockParameter);
        }

        public Task<BigInteger> GetAssignedValueQueryAsync(GetAssignedValueFunction getAssignedValueFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetAssignedValueFunction, BigInteger>(getAssignedValueFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetAssignedValueQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetAssignedValueFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetDebtQueryAsync(GetDebtFunction getDebtFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetDebtFunction, BigInteger>(getDebtFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetDebtQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetDebtFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetExpirationBlockQueryAsync(GetExpirationBlockFunction getExpirationBlockFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetExpirationBlockFunction, BigInteger>(getExpirationBlockFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetExpirationBlockQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetExpirationBlockFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetLastDistributionBlockQueryAsync(GetLastDistributionBlockFunction getLastDistributionBlockFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetLastDistributionBlockFunction, BigInteger>(getLastDistributionBlockFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetLastDistributionBlockQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetLastDistributionBlockFunction, BigInteger>(null, blockParameter);
        }

        public Task<string> GetNodeAddressQueryAsync(GetNodeAddressFunction getNodeAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeAddressFunction, string>(getNodeAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeAddressQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeAddressFunction, string>(null, blockParameter);
        }

        public Task<BigInteger> GetNodeBondQueryAsync(GetNodeBondFunction getNodeBondFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeBondFunction, BigInteger>(getNodeBondFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeBondQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeBondFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetNodeCapitalQueryAsync(GetNodeCapitalFunction getNodeCapitalFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeCapitalFunction, BigInteger>(getNodeCapitalFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeCapitalQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeCapitalFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetPendingRewardsQueryAsync(GetPendingRewardsFunction getPendingRewardsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetPendingRewardsFunction, BigInteger>(getPendingRewardsFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetPendingRewardsQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetPendingRewardsFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetRefundValueQueryAsync(GetRefundValueFunction getRefundValueFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetRefundValueFunction, BigInteger>(getRefundValueFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetRefundValueQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetRefundValueFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetUserCapitalQueryAsync(GetUserCapitalFunction getUserCapitalFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserCapitalFunction, BigInteger>(getUserCapitalFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetUserCapitalQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUserCapitalFunction, BigInteger>(null, blockParameter);
        }

        public Task<uint> GetValidatorCountQueryAsync(GetValidatorCountFunction getValidatorCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetValidatorCountFunction, uint>(getValidatorCountFunction, blockParameter);
        }

        
        public virtual Task<uint> GetValidatorCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetValidatorCountFunction, uint>(null, blockParameter);
        }

        public virtual Task<GetValidatorInfoOutputDTO> GetValidatorInfoQueryAsync(GetValidatorInfoFunction getValidatorInfoFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetValidatorInfoFunction, GetValidatorInfoOutputDTO>(getValidatorInfoFunction, blockParameter);
        }

        public virtual Task<GetValidatorInfoOutputDTO> GetValidatorInfoQueryAsync(uint validatorId, BlockParameter blockParameter = null)
        {
            var getValidatorInfoFunction = new GetValidatorInfoFunction();
                getValidatorInfoFunction.ValidatorId = validatorId;
            
            return ContractHandler.QueryDeserializingToObjectAsync<GetValidatorInfoFunction, GetValidatorInfoOutputDTO>(getValidatorInfoFunction, blockParameter);
        }

        public Task<byte[]> GetWithdrawalCredentialsQueryAsync(GetWithdrawalCredentialsFunction getWithdrawalCredentialsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetWithdrawalCredentialsFunction, byte[]>(getWithdrawalCredentialsFunction, blockParameter);
        }

        
        public virtual Task<byte[]> GetWithdrawalCredentialsQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetWithdrawalCredentialsFunction, byte[]>(null, blockParameter);
        }

        public virtual Task<string> NewValidatorRequestAsync(NewValidatorFunction newValidatorFunction)
        {
             return ContractHandler.SendRequestAsync(newValidatorFunction);
        }

        public virtual Task<TransactionReceipt> NewValidatorRequestAndWaitForReceiptAsync(NewValidatorFunction newValidatorFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(newValidatorFunction, cancellationToken);
        }

        public virtual Task<string> NewValidatorRequestAsync(BigInteger bondAmount, bool useExpressTicket, byte[] validatorPubkey, byte[] validatorSignature, byte[] depositDataRoot)
        {
            var newValidatorFunction = new NewValidatorFunction();
                newValidatorFunction.BondAmount = bondAmount;
                newValidatorFunction.UseExpressTicket = useExpressTicket;
                newValidatorFunction.ValidatorPubkey = validatorPubkey;
                newValidatorFunction.ValidatorSignature = validatorSignature;
                newValidatorFunction.DepositDataRoot = depositDataRoot;
            
             return ContractHandler.SendRequestAsync(newValidatorFunction);
        }

        public virtual Task<TransactionReceipt> NewValidatorRequestAndWaitForReceiptAsync(BigInteger bondAmount, bool useExpressTicket, byte[] validatorPubkey, byte[] validatorSignature, byte[] depositDataRoot, CancellationTokenSource cancellationToken = null)
        {
            var newValidatorFunction = new NewValidatorFunction();
                newValidatorFunction.BondAmount = bondAmount;
                newValidatorFunction.UseExpressTicket = useExpressTicket;
                newValidatorFunction.ValidatorPubkey = validatorPubkey;
                newValidatorFunction.ValidatorSignature = validatorSignature;
                newValidatorFunction.DepositDataRoot = depositDataRoot;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(newValidatorFunction, cancellationToken);
        }

        public virtual Task<string> RepayDebtRequestAsync(RepayDebtFunction repayDebtFunction)
        {
             return ContractHandler.SendRequestAsync(repayDebtFunction);
        }

        public virtual Task<string> RepayDebtRequestAsync()
        {
             return ContractHandler.SendRequestAsync<RepayDebtFunction>();
        }

        public virtual Task<TransactionReceipt> RepayDebtRequestAndWaitForReceiptAsync(RepayDebtFunction repayDebtFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(repayDebtFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> RepayDebtRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<RepayDebtFunction>(null, cancellationToken);
        }

        public virtual Task<string> SetDebtRequestAsync(SetDebtFunction setDebtFunction)
        {
             return ContractHandler.SendRequestAsync(setDebtFunction);
        }

        public virtual Task<TransactionReceipt> SetDebtRequestAndWaitForReceiptAsync(SetDebtFunction setDebtFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setDebtFunction, cancellationToken);
        }

        public virtual Task<string> SetDebtRequestAsync(BigInteger debt)
        {
            var setDebtFunction = new SetDebtFunction();
                setDebtFunction.Debt = debt;
            
             return ContractHandler.SendRequestAsync(setDebtFunction);
        }

        public virtual Task<TransactionReceipt> SetDebtRequestAndWaitForReceiptAsync(BigInteger debt, CancellationTokenSource cancellationToken = null)
        {
            var setDebtFunction = new SetDebtFunction();
                setDebtFunction.Debt = debt;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setDebtFunction, cancellationToken);
        }

        public virtual Task<string> StakeRequestAsync(StakeFunction stakeFunction)
        {
             return ContractHandler.SendRequestAsync(stakeFunction);
        }

        public virtual Task<TransactionReceipt> StakeRequestAndWaitForReceiptAsync(StakeFunction stakeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeFunction, cancellationToken);
        }

        public virtual Task<string> StakeRequestAsync(uint validatorId, byte[] signature, byte[] depositDataRoot, ValidatorProof proof)
        {
            var stakeFunction = new StakeFunction();
                stakeFunction.ValidatorId = validatorId;
                stakeFunction.Signature = signature;
                stakeFunction.DepositDataRoot = depositDataRoot;
                stakeFunction.Proof = proof;
            
             return ContractHandler.SendRequestAsync(stakeFunction);
        }

        public virtual Task<TransactionReceipt> StakeRequestAndWaitForReceiptAsync(uint validatorId, byte[] signature, byte[] depositDataRoot, ValidatorProof proof, CancellationTokenSource cancellationToken = null)
        {
            var stakeFunction = new StakeFunction();
                stakeFunction.ValidatorId = validatorId;
                stakeFunction.Signature = signature;
                stakeFunction.DepositDataRoot = depositDataRoot;
                stakeFunction.Proof = proof;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeFunction, cancellationToken);
        }

        public Task<BigInteger> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, BigInteger>(versionFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, BigInteger>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(AssignFundsFunction),
                typeof(CalculatePendingRewardsFunction),
                typeof(CalculateRewardsFunction),
                typeof(ClaimFunction),
                typeof(DeprecateFunction),
                typeof(DequeueFunction),
                typeof(DissolveValidatorFunction),
                typeof(DistributeFunction),
                typeof(GetActiveValidatorCountFunction),
                typeof(GetAssignedValueFunction),
                typeof(GetDebtFunction),
                typeof(GetExpirationBlockFunction),
                typeof(GetLastDistributionBlockFunction),
                typeof(GetNodeAddressFunction),
                typeof(GetNodeBondFunction),
                typeof(GetNodeCapitalFunction),
                typeof(GetPendingRewardsFunction),
                typeof(GetRefundValueFunction),
                typeof(GetUserCapitalFunction),
                typeof(GetValidatorCountFunction),
                typeof(GetValidatorInfoFunction),
                typeof(GetWithdrawalCredentialsFunction),
                typeof(NewValidatorFunction),
                typeof(RepayDebtFunction),
                typeof(SetDebtFunction),
                typeof(StakeFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(MegapoolValidatorAssignedEventDTO),
                typeof(MegapoolValidatorDequeuedEventDTO),
                typeof(MegapoolValidatorEnqueuedEventDTO),
                typeof(RewardsClaimedEventDTO),
                typeof(RewardsDistributedEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
