// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.rocketStorage.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketStorage
{
    public partial class RocketStorageService: RocketStorageServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketStorageDeployment rocketStorageDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketStorageDeployment>().SendRequestAndWaitForReceiptAsync(rocketStorageDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketStorageDeployment rocketStorageDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketStorageDeployment>().SendRequestAsync(rocketStorageDeployment);
        }

        public static async Task<RocketStorageService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketStorageDeployment rocketStorageDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketStorageDeployment, cancellationTokenSource);
            return new RocketStorageService(web3, receipt.ContractAddress);
        }

        public RocketStorageService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketStorageServiceBase: ContractWeb3ServiceBase
    {

        public RocketStorageServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> AddUintRequestAsync(AddUintFunction addUintFunction)
        {
             return ContractHandler.SendRequestAsync(addUintFunction);
        }

        public virtual Task<TransactionReceipt> AddUintRequestAndWaitForReceiptAsync(AddUintFunction addUintFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(addUintFunction, cancellationToken);
        }

        public virtual Task<string> AddUintRequestAsync(byte[] key, BigInteger amount)
        {
            var addUintFunction = new AddUintFunction();
                addUintFunction.Key = key;
                addUintFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(addUintFunction);
        }

        public virtual Task<TransactionReceipt> AddUintRequestAndWaitForReceiptAsync(byte[] key, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var addUintFunction = new AddUintFunction();
                addUintFunction.Key = key;
                addUintFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(addUintFunction, cancellationToken);
        }

        public virtual Task<string> ConfirmGuardianRequestAsync(ConfirmGuardianFunction confirmGuardianFunction)
        {
             return ContractHandler.SendRequestAsync(confirmGuardianFunction);
        }

        public virtual Task<string> ConfirmGuardianRequestAsync()
        {
             return ContractHandler.SendRequestAsync<ConfirmGuardianFunction>();
        }

        public virtual Task<TransactionReceipt> ConfirmGuardianRequestAndWaitForReceiptAsync(ConfirmGuardianFunction confirmGuardianFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(confirmGuardianFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> ConfirmGuardianRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<ConfirmGuardianFunction>(null, cancellationToken);
        }

        public virtual Task<string> ConfirmWithdrawalAddressRequestAsync(ConfirmWithdrawalAddressFunction confirmWithdrawalAddressFunction)
        {
             return ContractHandler.SendRequestAsync(confirmWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> ConfirmWithdrawalAddressRequestAndWaitForReceiptAsync(ConfirmWithdrawalAddressFunction confirmWithdrawalAddressFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(confirmWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> ConfirmWithdrawalAddressRequestAsync(string nodeAddress)
        {
            var confirmWithdrawalAddressFunction = new ConfirmWithdrawalAddressFunction();
                confirmWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(confirmWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> ConfirmWithdrawalAddressRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var confirmWithdrawalAddressFunction = new ConfirmWithdrawalAddressFunction();
                confirmWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(confirmWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> DeleteAddressRequestAsync(DeleteAddressFunction deleteAddressFunction)
        {
             return ContractHandler.SendRequestAsync(deleteAddressFunction);
        }

        public virtual Task<TransactionReceipt> DeleteAddressRequestAndWaitForReceiptAsync(DeleteAddressFunction deleteAddressFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteAddressFunction, cancellationToken);
        }

        public virtual Task<string> DeleteAddressRequestAsync(byte[] key)
        {
            var deleteAddressFunction = new DeleteAddressFunction();
                deleteAddressFunction.Key = key;
            
             return ContractHandler.SendRequestAsync(deleteAddressFunction);
        }

        public virtual Task<TransactionReceipt> DeleteAddressRequestAndWaitForReceiptAsync(byte[] key, CancellationTokenSource cancellationToken = null)
        {
            var deleteAddressFunction = new DeleteAddressFunction();
                deleteAddressFunction.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteAddressFunction, cancellationToken);
        }

        public virtual Task<string> DeleteBoolRequestAsync(DeleteBoolFunction deleteBoolFunction)
        {
             return ContractHandler.SendRequestAsync(deleteBoolFunction);
        }

        public virtual Task<TransactionReceipt> DeleteBoolRequestAndWaitForReceiptAsync(DeleteBoolFunction deleteBoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteBoolFunction, cancellationToken);
        }

        public virtual Task<string> DeleteBoolRequestAsync(byte[] key)
        {
            var deleteBoolFunction = new DeleteBoolFunction();
                deleteBoolFunction.Key = key;
            
             return ContractHandler.SendRequestAsync(deleteBoolFunction);
        }

        public virtual Task<TransactionReceipt> DeleteBoolRequestAndWaitForReceiptAsync(byte[] key, CancellationTokenSource cancellationToken = null)
        {
            var deleteBoolFunction = new DeleteBoolFunction();
                deleteBoolFunction.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteBoolFunction, cancellationToken);
        }

        public virtual Task<string> DeleteBytesRequestAsync(DeleteBytesFunction deleteBytesFunction)
        {
             return ContractHandler.SendRequestAsync(deleteBytesFunction);
        }

        public virtual Task<TransactionReceipt> DeleteBytesRequestAndWaitForReceiptAsync(DeleteBytesFunction deleteBytesFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteBytesFunction, cancellationToken);
        }

        public virtual Task<string> DeleteBytesRequestAsync(byte[] key)
        {
            var deleteBytesFunction = new DeleteBytesFunction();
                deleteBytesFunction.Key = key;
            
             return ContractHandler.SendRequestAsync(deleteBytesFunction);
        }

        public virtual Task<TransactionReceipt> DeleteBytesRequestAndWaitForReceiptAsync(byte[] key, CancellationTokenSource cancellationToken = null)
        {
            var deleteBytesFunction = new DeleteBytesFunction();
                deleteBytesFunction.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteBytesFunction, cancellationToken);
        }

        public virtual Task<string> DeleteBytes32RequestAsync(DeleteBytes32Function deleteBytes32Function)
        {
             return ContractHandler.SendRequestAsync(deleteBytes32Function);
        }

        public virtual Task<TransactionReceipt> DeleteBytes32RequestAndWaitForReceiptAsync(DeleteBytes32Function deleteBytes32Function, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteBytes32Function, cancellationToken);
        }

        public virtual Task<string> DeleteBytes32RequestAsync(byte[] key)
        {
            var deleteBytes32Function = new DeleteBytes32Function();
                deleteBytes32Function.Key = key;
            
             return ContractHandler.SendRequestAsync(deleteBytes32Function);
        }

        public virtual Task<TransactionReceipt> DeleteBytes32RequestAndWaitForReceiptAsync(byte[] key, CancellationTokenSource cancellationToken = null)
        {
            var deleteBytes32Function = new DeleteBytes32Function();
                deleteBytes32Function.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteBytes32Function, cancellationToken);
        }

        public virtual Task<string> DeleteIntRequestAsync(DeleteIntFunction deleteIntFunction)
        {
             return ContractHandler.SendRequestAsync(deleteIntFunction);
        }

        public virtual Task<TransactionReceipt> DeleteIntRequestAndWaitForReceiptAsync(DeleteIntFunction deleteIntFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteIntFunction, cancellationToken);
        }

        public virtual Task<string> DeleteIntRequestAsync(byte[] key)
        {
            var deleteIntFunction = new DeleteIntFunction();
                deleteIntFunction.Key = key;
            
             return ContractHandler.SendRequestAsync(deleteIntFunction);
        }

        public virtual Task<TransactionReceipt> DeleteIntRequestAndWaitForReceiptAsync(byte[] key, CancellationTokenSource cancellationToken = null)
        {
            var deleteIntFunction = new DeleteIntFunction();
                deleteIntFunction.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteIntFunction, cancellationToken);
        }

        public virtual Task<string> DeleteStringRequestAsync(DeleteStringFunction deleteStringFunction)
        {
             return ContractHandler.SendRequestAsync(deleteStringFunction);
        }

        public virtual Task<TransactionReceipt> DeleteStringRequestAndWaitForReceiptAsync(DeleteStringFunction deleteStringFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteStringFunction, cancellationToken);
        }

        public virtual Task<string> DeleteStringRequestAsync(byte[] key)
        {
            var deleteStringFunction = new DeleteStringFunction();
                deleteStringFunction.Key = key;
            
             return ContractHandler.SendRequestAsync(deleteStringFunction);
        }

        public virtual Task<TransactionReceipt> DeleteStringRequestAndWaitForReceiptAsync(byte[] key, CancellationTokenSource cancellationToken = null)
        {
            var deleteStringFunction = new DeleteStringFunction();
                deleteStringFunction.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteStringFunction, cancellationToken);
        }

        public virtual Task<string> DeleteUintRequestAsync(DeleteUintFunction deleteUintFunction)
        {
             return ContractHandler.SendRequestAsync(deleteUintFunction);
        }

        public virtual Task<TransactionReceipt> DeleteUintRequestAndWaitForReceiptAsync(DeleteUintFunction deleteUintFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteUintFunction, cancellationToken);
        }

        public virtual Task<string> DeleteUintRequestAsync(byte[] key)
        {
            var deleteUintFunction = new DeleteUintFunction();
                deleteUintFunction.Key = key;
            
             return ContractHandler.SendRequestAsync(deleteUintFunction);
        }

        public virtual Task<TransactionReceipt> DeleteUintRequestAndWaitForReceiptAsync(byte[] key, CancellationTokenSource cancellationToken = null)
        {
            var deleteUintFunction = new DeleteUintFunction();
                deleteUintFunction.Key = key;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deleteUintFunction, cancellationToken);
        }

        public Task<string> GetAddressQueryAsync(GetAddressFunction getAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetAddressFunction, string>(getAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetAddressQueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getAddressFunction = new GetAddressFunction();
                getAddressFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetAddressFunction, string>(getAddressFunction, blockParameter);
        }

        public Task<bool> GetBoolQueryAsync(GetBoolFunction getBoolFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetBoolFunction, bool>(getBoolFunction, blockParameter);
        }

        
        public virtual Task<bool> GetBoolQueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getBoolFunction = new GetBoolFunction();
                getBoolFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetBoolFunction, bool>(getBoolFunction, blockParameter);
        }

        public Task<byte[]> GetBytesQueryAsync(GetBytesFunction getBytesFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetBytesFunction, byte[]>(getBytesFunction, blockParameter);
        }

        
        public virtual Task<byte[]> GetBytesQueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getBytesFunction = new GetBytesFunction();
                getBytesFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetBytesFunction, byte[]>(getBytesFunction, blockParameter);
        }

        public Task<byte[]> GetBytes32QueryAsync(GetBytes32Function getBytes32Function, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetBytes32Function, byte[]>(getBytes32Function, blockParameter);
        }

        
        public virtual Task<byte[]> GetBytes32QueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getBytes32Function = new GetBytes32Function();
                getBytes32Function.Key = key;
            
            return ContractHandler.QueryAsync<GetBytes32Function, byte[]>(getBytes32Function, blockParameter);
        }

        public Task<bool> GetDeployedStatusQueryAsync(GetDeployedStatusFunction getDeployedStatusFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetDeployedStatusFunction, bool>(getDeployedStatusFunction, blockParameter);
        }

        
        public virtual Task<bool> GetDeployedStatusQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetDeployedStatusFunction, bool>(null, blockParameter);
        }

        public Task<string> GetGuardianQueryAsync(GetGuardianFunction getGuardianFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetGuardianFunction, string>(getGuardianFunction, blockParameter);
        }

        
        public virtual Task<string> GetGuardianQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetGuardianFunction, string>(null, blockParameter);
        }

        public Task<BigInteger> GetIntQueryAsync(GetIntFunction getIntFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetIntFunction, BigInteger>(getIntFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetIntQueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getIntFunction = new GetIntFunction();
                getIntFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetIntFunction, BigInteger>(getIntFunction, blockParameter);
        }

        public Task<string> GetNodePendingWithdrawalAddressQueryAsync(GetNodePendingWithdrawalAddressFunction getNodePendingWithdrawalAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodePendingWithdrawalAddressFunction, string>(getNodePendingWithdrawalAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodePendingWithdrawalAddressQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodePendingWithdrawalAddressFunction = new GetNodePendingWithdrawalAddressFunction();
                getNodePendingWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodePendingWithdrawalAddressFunction, string>(getNodePendingWithdrawalAddressFunction, blockParameter);
        }

        public Task<string> GetNodeWithdrawalAddressQueryAsync(GetNodeWithdrawalAddressFunction getNodeWithdrawalAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeWithdrawalAddressFunction, string>(getNodeWithdrawalAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeWithdrawalAddressQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeWithdrawalAddressFunction = new GetNodeWithdrawalAddressFunction();
                getNodeWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeWithdrawalAddressFunction, string>(getNodeWithdrawalAddressFunction, blockParameter);
        }

        public Task<string> GetStringQueryAsync(GetStringFunction getStringFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStringFunction, string>(getStringFunction, blockParameter);
        }

        
        public virtual Task<string> GetStringQueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getStringFunction = new GetStringFunction();
                getStringFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetStringFunction, string>(getStringFunction, blockParameter);
        }

        public Task<BigInteger> GetUintQueryAsync(GetUintFunction getUintFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUintFunction, BigInteger>(getUintFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetUintQueryAsync(byte[] key, BlockParameter blockParameter = null)
        {
            var getUintFunction = new GetUintFunction();
                getUintFunction.Key = key;
            
            return ContractHandler.QueryAsync<GetUintFunction, BigInteger>(getUintFunction, blockParameter);
        }

        public virtual Task<string> SetAddressRequestAsync(SetAddressFunction setAddressFunction)
        {
             return ContractHandler.SendRequestAsync(setAddressFunction);
        }

        public virtual Task<TransactionReceipt> SetAddressRequestAndWaitForReceiptAsync(SetAddressFunction setAddressFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setAddressFunction, cancellationToken);
        }

        public virtual Task<string> SetAddressRequestAsync(byte[] key, string value)
        {
            var setAddressFunction = new SetAddressFunction();
                setAddressFunction.Key = key;
                setAddressFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(setAddressFunction);
        }

        public virtual Task<TransactionReceipt> SetAddressRequestAndWaitForReceiptAsync(byte[] key, string value, CancellationTokenSource cancellationToken = null)
        {
            var setAddressFunction = new SetAddressFunction();
                setAddressFunction.Key = key;
                setAddressFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setAddressFunction, cancellationToken);
        }

        public virtual Task<string> SetBoolRequestAsync(SetBoolFunction setBoolFunction)
        {
             return ContractHandler.SendRequestAsync(setBoolFunction);
        }

        public virtual Task<TransactionReceipt> SetBoolRequestAndWaitForReceiptAsync(SetBoolFunction setBoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setBoolFunction, cancellationToken);
        }

        public virtual Task<string> SetBoolRequestAsync(byte[] key, bool value)
        {
            var setBoolFunction = new SetBoolFunction();
                setBoolFunction.Key = key;
                setBoolFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(setBoolFunction);
        }

        public virtual Task<TransactionReceipt> SetBoolRequestAndWaitForReceiptAsync(byte[] key, bool value, CancellationTokenSource cancellationToken = null)
        {
            var setBoolFunction = new SetBoolFunction();
                setBoolFunction.Key = key;
                setBoolFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setBoolFunction, cancellationToken);
        }

        public virtual Task<string> SetBytesRequestAsync(SetBytesFunction setBytesFunction)
        {
             return ContractHandler.SendRequestAsync(setBytesFunction);
        }

        public virtual Task<TransactionReceipt> SetBytesRequestAndWaitForReceiptAsync(SetBytesFunction setBytesFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setBytesFunction, cancellationToken);
        }

        public virtual Task<string> SetBytesRequestAsync(byte[] key, byte[] value)
        {
            var setBytesFunction = new SetBytesFunction();
                setBytesFunction.Key = key;
                setBytesFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(setBytesFunction);
        }

        public virtual Task<TransactionReceipt> SetBytesRequestAndWaitForReceiptAsync(byte[] key, byte[] value, CancellationTokenSource cancellationToken = null)
        {
            var setBytesFunction = new SetBytesFunction();
                setBytesFunction.Key = key;
                setBytesFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setBytesFunction, cancellationToken);
        }

        public virtual Task<string> SetBytes32RequestAsync(SetBytes32Function setBytes32Function)
        {
             return ContractHandler.SendRequestAsync(setBytes32Function);
        }

        public virtual Task<TransactionReceipt> SetBytes32RequestAndWaitForReceiptAsync(SetBytes32Function setBytes32Function, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setBytes32Function, cancellationToken);
        }

        public virtual Task<string> SetBytes32RequestAsync(byte[] key, byte[] value)
        {
            var setBytes32Function = new SetBytes32Function();
                setBytes32Function.Key = key;
                setBytes32Function.Value = value;
            
             return ContractHandler.SendRequestAsync(setBytes32Function);
        }

        public virtual Task<TransactionReceipt> SetBytes32RequestAndWaitForReceiptAsync(byte[] key, byte[] value, CancellationTokenSource cancellationToken = null)
        {
            var setBytes32Function = new SetBytes32Function();
                setBytes32Function.Key = key;
                setBytes32Function.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setBytes32Function, cancellationToken);
        }

        public virtual Task<string> SetDeployedStatusRequestAsync(SetDeployedStatusFunction setDeployedStatusFunction)
        {
             return ContractHandler.SendRequestAsync(setDeployedStatusFunction);
        }

        public virtual Task<string> SetDeployedStatusRequestAsync()
        {
             return ContractHandler.SendRequestAsync<SetDeployedStatusFunction>();
        }

        public virtual Task<TransactionReceipt> SetDeployedStatusRequestAndWaitForReceiptAsync(SetDeployedStatusFunction setDeployedStatusFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setDeployedStatusFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> SetDeployedStatusRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<SetDeployedStatusFunction>(null, cancellationToken);
        }

        public virtual Task<string> SetGuardianRequestAsync(SetGuardianFunction setGuardianFunction)
        {
             return ContractHandler.SendRequestAsync(setGuardianFunction);
        }

        public virtual Task<TransactionReceipt> SetGuardianRequestAndWaitForReceiptAsync(SetGuardianFunction setGuardianFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setGuardianFunction, cancellationToken);
        }

        public virtual Task<string> SetGuardianRequestAsync(string newAddress)
        {
            var setGuardianFunction = new SetGuardianFunction();
                setGuardianFunction.NewAddress = newAddress;
            
             return ContractHandler.SendRequestAsync(setGuardianFunction);
        }

        public virtual Task<TransactionReceipt> SetGuardianRequestAndWaitForReceiptAsync(string newAddress, CancellationTokenSource cancellationToken = null)
        {
            var setGuardianFunction = new SetGuardianFunction();
                setGuardianFunction.NewAddress = newAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setGuardianFunction, cancellationToken);
        }

        public virtual Task<string> SetIntRequestAsync(SetIntFunction setIntFunction)
        {
             return ContractHandler.SendRequestAsync(setIntFunction);
        }

        public virtual Task<TransactionReceipt> SetIntRequestAndWaitForReceiptAsync(SetIntFunction setIntFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setIntFunction, cancellationToken);
        }

        public virtual Task<string> SetIntRequestAsync(byte[] key, BigInteger value)
        {
            var setIntFunction = new SetIntFunction();
                setIntFunction.Key = key;
                setIntFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(setIntFunction);
        }

        public virtual Task<TransactionReceipt> SetIntRequestAndWaitForReceiptAsync(byte[] key, BigInteger value, CancellationTokenSource cancellationToken = null)
        {
            var setIntFunction = new SetIntFunction();
                setIntFunction.Key = key;
                setIntFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setIntFunction, cancellationToken);
        }

        public virtual Task<string> SetStringRequestAsync(SetStringFunction setStringFunction)
        {
             return ContractHandler.SendRequestAsync(setStringFunction);
        }

        public virtual Task<TransactionReceipt> SetStringRequestAndWaitForReceiptAsync(SetStringFunction setStringFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setStringFunction, cancellationToken);
        }

        public virtual Task<string> SetStringRequestAsync(byte[] key, string value)
        {
            var setStringFunction = new SetStringFunction();
                setStringFunction.Key = key;
                setStringFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(setStringFunction);
        }

        public virtual Task<TransactionReceipt> SetStringRequestAndWaitForReceiptAsync(byte[] key, string value, CancellationTokenSource cancellationToken = null)
        {
            var setStringFunction = new SetStringFunction();
                setStringFunction.Key = key;
                setStringFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setStringFunction, cancellationToken);
        }

        public virtual Task<string> SetUintRequestAsync(SetUintFunction setUintFunction)
        {
             return ContractHandler.SendRequestAsync(setUintFunction);
        }

        public virtual Task<TransactionReceipt> SetUintRequestAndWaitForReceiptAsync(SetUintFunction setUintFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setUintFunction, cancellationToken);
        }

        public virtual Task<string> SetUintRequestAsync(byte[] key, BigInteger value)
        {
            var setUintFunction = new SetUintFunction();
                setUintFunction.Key = key;
                setUintFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(setUintFunction);
        }

        public virtual Task<TransactionReceipt> SetUintRequestAndWaitForReceiptAsync(byte[] key, BigInteger value, CancellationTokenSource cancellationToken = null)
        {
            var setUintFunction = new SetUintFunction();
                setUintFunction.Key = key;
                setUintFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setUintFunction, cancellationToken);
        }

        public virtual Task<string> SetWithdrawalAddressRequestAsync(SetWithdrawalAddressFunction setWithdrawalAddressFunction)
        {
             return ContractHandler.SendRequestAsync(setWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> SetWithdrawalAddressRequestAndWaitForReceiptAsync(SetWithdrawalAddressFunction setWithdrawalAddressFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> SetWithdrawalAddressRequestAsync(string nodeAddress, string newWithdrawalAddress, bool confirm)
        {
            var setWithdrawalAddressFunction = new SetWithdrawalAddressFunction();
                setWithdrawalAddressFunction.NodeAddress = nodeAddress;
                setWithdrawalAddressFunction.NewWithdrawalAddress = newWithdrawalAddress;
                setWithdrawalAddressFunction.Confirm = confirm;
            
             return ContractHandler.SendRequestAsync(setWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> SetWithdrawalAddressRequestAndWaitForReceiptAsync(string nodeAddress, string newWithdrawalAddress, bool confirm, CancellationTokenSource cancellationToken = null)
        {
            var setWithdrawalAddressFunction = new SetWithdrawalAddressFunction();
                setWithdrawalAddressFunction.NodeAddress = nodeAddress;
                setWithdrawalAddressFunction.NewWithdrawalAddress = newWithdrawalAddress;
                setWithdrawalAddressFunction.Confirm = confirm;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> SubUintRequestAsync(SubUintFunction subUintFunction)
        {
             return ContractHandler.SendRequestAsync(subUintFunction);
        }

        public virtual Task<TransactionReceipt> SubUintRequestAndWaitForReceiptAsync(SubUintFunction subUintFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(subUintFunction, cancellationToken);
        }

        public virtual Task<string> SubUintRequestAsync(byte[] key, BigInteger amount)
        {
            var subUintFunction = new SubUintFunction();
                subUintFunction.Key = key;
                subUintFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(subUintFunction);
        }

        public virtual Task<TransactionReceipt> SubUintRequestAndWaitForReceiptAsync(byte[] key, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var subUintFunction = new SubUintFunction();
                subUintFunction.Key = key;
                subUintFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(subUintFunction, cancellationToken);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(AddUintFunction),
                typeof(ConfirmGuardianFunction),
                typeof(ConfirmWithdrawalAddressFunction),
                typeof(DeleteAddressFunction),
                typeof(DeleteBoolFunction),
                typeof(DeleteBytesFunction),
                typeof(DeleteBytes32Function),
                typeof(DeleteIntFunction),
                typeof(DeleteStringFunction),
                typeof(DeleteUintFunction),
                typeof(GetAddressFunction),
                typeof(GetBoolFunction),
                typeof(GetBytesFunction),
                typeof(GetBytes32Function),
                typeof(GetDeployedStatusFunction),
                typeof(GetGuardianFunction),
                typeof(GetIntFunction),
                typeof(GetNodePendingWithdrawalAddressFunction),
                typeof(GetNodeWithdrawalAddressFunction),
                typeof(GetStringFunction),
                typeof(GetUintFunction),
                typeof(SetAddressFunction),
                typeof(SetBoolFunction),
                typeof(SetBytesFunction),
                typeof(SetBytes32Function),
                typeof(SetDeployedStatusFunction),
                typeof(SetGuardianFunction),
                typeof(SetIntFunction),
                typeof(SetStringFunction),
                typeof(SetUintFunction),
                typeof(SetWithdrawalAddressFunction),
                typeof(SubUintFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(GuardianChangedEventDTO),
                typeof(NodeWithdrawalAddressSetEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
