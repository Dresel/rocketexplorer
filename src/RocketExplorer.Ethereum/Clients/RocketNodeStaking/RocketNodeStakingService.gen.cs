// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketNodeStaking.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketNodeStaking
{
    public partial class RocketNodeStakingService: RocketNodeStakingServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketNodeStakingDeployment rocketNodeStakingDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketNodeStakingDeployment>().SendRequestAndWaitForReceiptAsync(rocketNodeStakingDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketNodeStakingDeployment rocketNodeStakingDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketNodeStakingDeployment>().SendRequestAsync(rocketNodeStakingDeployment);
        }

        public static async Task<RocketNodeStakingService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketNodeStakingDeployment rocketNodeStakingDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketNodeStakingDeployment, cancellationTokenSource);
            return new RocketNodeStakingService(web3, receipt.ContractAddress);
        }

        public RocketNodeStakingService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketNodeStakingServiceBase: ContractWeb3ServiceBase
    {

        public RocketNodeStakingServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> BurnRPLRequestAsync(BurnRPLFunction burnRPLFunction)
        {
             return ContractHandler.SendRequestAsync(burnRPLFunction);
        }

        public virtual Task<TransactionReceipt> BurnRPLRequestAndWaitForReceiptAsync(BurnRPLFunction burnRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(burnRPLFunction, cancellationToken);
        }

        public virtual Task<string> BurnRPLRequestAsync(string from, BigInteger amount)
        {
            var burnRPLFunction = new BurnRPLFunction();
                burnRPLFunction.From = from;
                burnRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(burnRPLFunction);
        }

        public virtual Task<TransactionReceipt> BurnRPLRequestAndWaitForReceiptAsync(string from, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var burnRPLFunction = new BurnRPLFunction();
                burnRPLFunction.From = from;
                burnRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(burnRPLFunction, cancellationToken);
        }

        public Task<BigInteger> GetNodeETHBondedQueryAsync(GetNodeETHBondedFunction getNodeETHBondedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeETHBondedFunction, BigInteger>(getNodeETHBondedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeETHBondedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeETHBondedFunction = new GetNodeETHBondedFunction();
                getNodeETHBondedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeETHBondedFunction, BigInteger>(getNodeETHBondedFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeETHBorrowedQueryAsync(GetNodeETHBorrowedFunction getNodeETHBorrowedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeETHBorrowedFunction, BigInteger>(getNodeETHBorrowedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeETHBorrowedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeETHBorrowedFunction = new GetNodeETHBorrowedFunction();
                getNodeETHBorrowedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeETHBorrowedFunction, BigInteger>(getNodeETHBorrowedFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeETHCollateralisationRatioQueryAsync(GetNodeETHCollateralisationRatioFunction getNodeETHCollateralisationRatioFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeETHCollateralisationRatioFunction, BigInteger>(getNodeETHCollateralisationRatioFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeETHCollateralisationRatioQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeETHCollateralisationRatioFunction = new GetNodeETHCollateralisationRatioFunction();
                getNodeETHCollateralisationRatioFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeETHCollateralisationRatioFunction, BigInteger>(getNodeETHCollateralisationRatioFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeLastUnstakeTimeQueryAsync(GetNodeLastUnstakeTimeFunction getNodeLastUnstakeTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeLastUnstakeTimeFunction, BigInteger>(getNodeLastUnstakeTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeLastUnstakeTimeQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeLastUnstakeTimeFunction = new GetNodeLastUnstakeTimeFunction();
                getNodeLastUnstakeTimeFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeLastUnstakeTimeFunction, BigInteger>(getNodeLastUnstakeTimeFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeLegacyStakedRPLQueryAsync(GetNodeLegacyStakedRPLFunction getNodeLegacyStakedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeLegacyStakedRPLFunction, BigInteger>(getNodeLegacyStakedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeLegacyStakedRPLQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeLegacyStakedRPLFunction = new GetNodeLegacyStakedRPLFunction();
                getNodeLegacyStakedRPLFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeLegacyStakedRPLFunction, BigInteger>(getNodeLegacyStakedRPLFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeLockedRPLQueryAsync(GetNodeLockedRPLFunction getNodeLockedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeLockedRPLFunction, BigInteger>(getNodeLockedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeLockedRPLQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeLockedRPLFunction = new GetNodeLockedRPLFunction();
                getNodeLockedRPLFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeLockedRPLFunction, BigInteger>(getNodeLockedRPLFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeMaximumRPLStakeForMinipoolsQueryAsync(GetNodeMaximumRPLStakeForMinipoolsFunction getNodeMaximumRPLStakeForMinipoolsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMaximumRPLStakeForMinipoolsFunction, BigInteger>(getNodeMaximumRPLStakeForMinipoolsFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeMaximumRPLStakeForMinipoolsQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeMaximumRPLStakeForMinipoolsFunction = new GetNodeMaximumRPLStakeForMinipoolsFunction();
                getNodeMaximumRPLStakeForMinipoolsFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeMaximumRPLStakeForMinipoolsFunction, BigInteger>(getNodeMaximumRPLStakeForMinipoolsFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeMegapoolETHBondedQueryAsync(GetNodeMegapoolETHBondedFunction getNodeMegapoolETHBondedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMegapoolETHBondedFunction, BigInteger>(getNodeMegapoolETHBondedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeMegapoolETHBondedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeMegapoolETHBondedFunction = new GetNodeMegapoolETHBondedFunction();
                getNodeMegapoolETHBondedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeMegapoolETHBondedFunction, BigInteger>(getNodeMegapoolETHBondedFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeMegapoolETHBorrowedQueryAsync(GetNodeMegapoolETHBorrowedFunction getNodeMegapoolETHBorrowedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMegapoolETHBorrowedFunction, BigInteger>(getNodeMegapoolETHBorrowedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeMegapoolETHBorrowedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeMegapoolETHBorrowedFunction = new GetNodeMegapoolETHBorrowedFunction();
                getNodeMegapoolETHBorrowedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeMegapoolETHBorrowedFunction, BigInteger>(getNodeMegapoolETHBorrowedFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeMegapoolStakedRPLQueryAsync(GetNodeMegapoolStakedRPLFunction getNodeMegapoolStakedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMegapoolStakedRPLFunction, BigInteger>(getNodeMegapoolStakedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeMegapoolStakedRPLQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeMegapoolStakedRPLFunction = new GetNodeMegapoolStakedRPLFunction();
                getNodeMegapoolStakedRPLFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeMegapoolStakedRPLFunction, BigInteger>(getNodeMegapoolStakedRPLFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeMinipoolETHBondedQueryAsync(GetNodeMinipoolETHBondedFunction getNodeMinipoolETHBondedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMinipoolETHBondedFunction, BigInteger>(getNodeMinipoolETHBondedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeMinipoolETHBondedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeMinipoolETHBondedFunction = new GetNodeMinipoolETHBondedFunction();
                getNodeMinipoolETHBondedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeMinipoolETHBondedFunction, BigInteger>(getNodeMinipoolETHBondedFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeMinipoolETHBorrowedQueryAsync(GetNodeMinipoolETHBorrowedFunction getNodeMinipoolETHBorrowedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMinipoolETHBorrowedFunction, BigInteger>(getNodeMinipoolETHBorrowedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeMinipoolETHBorrowedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeMinipoolETHBorrowedFunction = new GetNodeMinipoolETHBorrowedFunction();
                getNodeMinipoolETHBorrowedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeMinipoolETHBorrowedFunction, BigInteger>(getNodeMinipoolETHBorrowedFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeRPLStakedTimeQueryAsync(GetNodeRPLStakedTimeFunction getNodeRPLStakedTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeRPLStakedTimeFunction, BigInteger>(getNodeRPLStakedTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeRPLStakedTimeQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeRPLStakedTimeFunction = new GetNodeRPLStakedTimeFunction();
                getNodeRPLStakedTimeFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeRPLStakedTimeFunction, BigInteger>(getNodeRPLStakedTimeFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeStakedRPLQueryAsync(GetNodeStakedRPLFunction getNodeStakedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeStakedRPLFunction, BigInteger>(getNodeStakedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeStakedRPLQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeStakedRPLFunction = new GetNodeStakedRPLFunction();
                getNodeStakedRPLFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeStakedRPLFunction, BigInteger>(getNodeStakedRPLFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeUnstakingRPLQueryAsync(GetNodeUnstakingRPLFunction getNodeUnstakingRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeUnstakingRPLFunction, BigInteger>(getNodeUnstakingRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeUnstakingRPLQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeUnstakingRPLFunction = new GetNodeUnstakingRPLFunction();
                getNodeUnstakingRPLFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeUnstakingRPLFunction, BigInteger>(getNodeUnstakingRPLFunction, blockParameter);
        }

        public Task<bool> GetRPLLockingAllowedQueryAsync(GetRPLLockingAllowedFunction getRPLLockingAllowedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetRPLLockingAllowedFunction, bool>(getRPLLockingAllowedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetRPLLockingAllowedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getRPLLockingAllowedFunction = new GetRPLLockingAllowedFunction();
                getRPLLockingAllowedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetRPLLockingAllowedFunction, bool>(getRPLLockingAllowedFunction, blockParameter);
        }

        public Task<BigInteger> GetTotalLegacyStakedRPLQueryAsync(GetTotalLegacyStakedRPLFunction getTotalLegacyStakedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalLegacyStakedRPLFunction, BigInteger>(getTotalLegacyStakedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetTotalLegacyStakedRPLQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalLegacyStakedRPLFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetTotalMegapoolStakedRPLQueryAsync(GetTotalMegapoolStakedRPLFunction getTotalMegapoolStakedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalMegapoolStakedRPLFunction, BigInteger>(getTotalMegapoolStakedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetTotalMegapoolStakedRPLQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalMegapoolStakedRPLFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetTotalStakedRPLQueryAsync(GetTotalStakedRPLFunction getTotalStakedRPLFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalStakedRPLFunction, BigInteger>(getTotalStakedRPLFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetTotalStakedRPLQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalStakedRPLFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<string> LockRPLRequestAsync(LockRPLFunction lockRPLFunction)
        {
             return ContractHandler.SendRequestAsync(lockRPLFunction);
        }

        public virtual Task<TransactionReceipt> LockRPLRequestAndWaitForReceiptAsync(LockRPLFunction lockRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(lockRPLFunction, cancellationToken);
        }

        public virtual Task<string> LockRPLRequestAsync(string nodeAddress, BigInteger amount)
        {
            var lockRPLFunction = new LockRPLFunction();
                lockRPLFunction.NodeAddress = nodeAddress;
                lockRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(lockRPLFunction);
        }

        public virtual Task<TransactionReceipt> LockRPLRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var lockRPLFunction = new LockRPLFunction();
                lockRPLFunction.NodeAddress = nodeAddress;
                lockRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(lockRPLFunction, cancellationToken);
        }

        public virtual Task<string> SetRPLLockingAllowedRequestAsync(SetRPLLockingAllowedFunction setRPLLockingAllowedFunction)
        {
             return ContractHandler.SendRequestAsync(setRPLLockingAllowedFunction);
        }

        public virtual Task<TransactionReceipt> SetRPLLockingAllowedRequestAndWaitForReceiptAsync(SetRPLLockingAllowedFunction setRPLLockingAllowedFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setRPLLockingAllowedFunction, cancellationToken);
        }

        public virtual Task<string> SetRPLLockingAllowedRequestAsync(string nodeAddress, bool allowed)
        {
            var setRPLLockingAllowedFunction = new SetRPLLockingAllowedFunction();
                setRPLLockingAllowedFunction.NodeAddress = nodeAddress;
                setRPLLockingAllowedFunction.Allowed = allowed;
            
             return ContractHandler.SendRequestAsync(setRPLLockingAllowedFunction);
        }

        public virtual Task<TransactionReceipt> SetRPLLockingAllowedRequestAndWaitForReceiptAsync(string nodeAddress, bool allowed, CancellationTokenSource cancellationToken = null)
        {
            var setRPLLockingAllowedFunction = new SetRPLLockingAllowedFunction();
                setRPLLockingAllowedFunction.NodeAddress = nodeAddress;
                setRPLLockingAllowedFunction.Allowed = allowed;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setRPLLockingAllowedFunction, cancellationToken);
        }

        public virtual Task<string> SetStakeRPLForAllowedRequestAsync(SetStakeRPLForAllowedFunction setStakeRPLForAllowedFunction)
        {
             return ContractHandler.SendRequestAsync(setStakeRPLForAllowedFunction);
        }

        public virtual Task<TransactionReceipt> SetStakeRPLForAllowedRequestAndWaitForReceiptAsync(SetStakeRPLForAllowedFunction setStakeRPLForAllowedFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setStakeRPLForAllowedFunction, cancellationToken);
        }

        public virtual Task<string> SetStakeRPLForAllowedRequestAsync(string caller, bool allowed)
        {
            var setStakeRPLForAllowedFunction = new SetStakeRPLForAllowedFunction();
                setStakeRPLForAllowedFunction.Caller = caller;
                setStakeRPLForAllowedFunction.Allowed = allowed;
            
             return ContractHandler.SendRequestAsync(setStakeRPLForAllowedFunction);
        }

        public virtual Task<TransactionReceipt> SetStakeRPLForAllowedRequestAndWaitForReceiptAsync(string caller, bool allowed, CancellationTokenSource cancellationToken = null)
        {
            var setStakeRPLForAllowedFunction = new SetStakeRPLForAllowedFunction();
                setStakeRPLForAllowedFunction.Caller = caller;
                setStakeRPLForAllowedFunction.Allowed = allowed;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setStakeRPLForAllowedFunction, cancellationToken);
        }

        public virtual Task<string> SetStakeRPLForAllowedRequestAsync(SetStakeRPLForAllowed1Function setStakeRPLForAllowed1Function)
        {
             return ContractHandler.SendRequestAsync(setStakeRPLForAllowed1Function);
        }

        public virtual Task<TransactionReceipt> SetStakeRPLForAllowedRequestAndWaitForReceiptAsync(SetStakeRPLForAllowed1Function setStakeRPLForAllowed1Function, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setStakeRPLForAllowed1Function, cancellationToken);
        }

        public virtual Task<string> SetStakeRPLForAllowedRequestAsync(string nodeAddress, string caller, bool allowed)
        {
            var setStakeRPLForAllowed1Function = new SetStakeRPLForAllowed1Function();
                setStakeRPLForAllowed1Function.NodeAddress = nodeAddress;
                setStakeRPLForAllowed1Function.Caller = caller;
                setStakeRPLForAllowed1Function.Allowed = allowed;
            
             return ContractHandler.SendRequestAsync(setStakeRPLForAllowed1Function);
        }

        public virtual Task<TransactionReceipt> SetStakeRPLForAllowedRequestAndWaitForReceiptAsync(string nodeAddress, string caller, bool allowed, CancellationTokenSource cancellationToken = null)
        {
            var setStakeRPLForAllowed1Function = new SetStakeRPLForAllowed1Function();
                setStakeRPLForAllowed1Function.NodeAddress = nodeAddress;
                setStakeRPLForAllowed1Function.Caller = caller;
                setStakeRPLForAllowed1Function.Allowed = allowed;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setStakeRPLForAllowed1Function, cancellationToken);
        }

        public virtual Task<string> SlashRPLRequestAsync(SlashRPLFunction slashRPLFunction)
        {
             return ContractHandler.SendRequestAsync(slashRPLFunction);
        }

        public virtual Task<TransactionReceipt> SlashRPLRequestAndWaitForReceiptAsync(SlashRPLFunction slashRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(slashRPLFunction, cancellationToken);
        }

        public virtual Task<string> SlashRPLRequestAsync(string nodeAddress, BigInteger ethSlashAmount)
        {
            var slashRPLFunction = new SlashRPLFunction();
                slashRPLFunction.NodeAddress = nodeAddress;
                slashRPLFunction.EthSlashAmount = ethSlashAmount;
            
             return ContractHandler.SendRequestAsync(slashRPLFunction);
        }

        public virtual Task<TransactionReceipt> SlashRPLRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger ethSlashAmount, CancellationTokenSource cancellationToken = null)
        {
            var slashRPLFunction = new SlashRPLFunction();
                slashRPLFunction.NodeAddress = nodeAddress;
                slashRPLFunction.EthSlashAmount = ethSlashAmount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(slashRPLFunction, cancellationToken);
        }

        public virtual Task<string> StakeRPLRequestAsync(StakeRPLFunction stakeRPLFunction)
        {
             return ContractHandler.SendRequestAsync(stakeRPLFunction);
        }

        public virtual Task<TransactionReceipt> StakeRPLRequestAndWaitForReceiptAsync(StakeRPLFunction stakeRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeRPLFunction, cancellationToken);
        }

        public virtual Task<string> StakeRPLRequestAsync(BigInteger amount)
        {
            var stakeRPLFunction = new StakeRPLFunction();
                stakeRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(stakeRPLFunction);
        }

        public virtual Task<TransactionReceipt> StakeRPLRequestAndWaitForReceiptAsync(BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var stakeRPLFunction = new StakeRPLFunction();
                stakeRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeRPLFunction, cancellationToken);
        }

        public virtual Task<string> StakeRPLForRequestAsync(StakeRPLForFunction stakeRPLForFunction)
        {
             return ContractHandler.SendRequestAsync(stakeRPLForFunction);
        }

        public virtual Task<TransactionReceipt> StakeRPLForRequestAndWaitForReceiptAsync(StakeRPLForFunction stakeRPLForFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeRPLForFunction, cancellationToken);
        }

        public virtual Task<string> StakeRPLForRequestAsync(string nodeAddress, BigInteger amount)
        {
            var stakeRPLForFunction = new StakeRPLForFunction();
                stakeRPLForFunction.NodeAddress = nodeAddress;
                stakeRPLForFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(stakeRPLForFunction);
        }

        public virtual Task<TransactionReceipt> StakeRPLForRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var stakeRPLForFunction = new StakeRPLForFunction();
                stakeRPLForFunction.NodeAddress = nodeAddress;
                stakeRPLForFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(stakeRPLForFunction, cancellationToken);
        }

        public virtual Task<string> TransferRPLRequestAsync(TransferRPLFunction transferRPLFunction)
        {
             return ContractHandler.SendRequestAsync(transferRPLFunction);
        }

        public virtual Task<TransactionReceipt> TransferRPLRequestAndWaitForReceiptAsync(TransferRPLFunction transferRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferRPLFunction, cancellationToken);
        }

        public virtual Task<string> TransferRPLRequestAsync(string from, string to, BigInteger amount)
        {
            var transferRPLFunction = new TransferRPLFunction();
                transferRPLFunction.From = from;
                transferRPLFunction.To = to;
                transferRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(transferRPLFunction);
        }

        public virtual Task<TransactionReceipt> TransferRPLRequestAndWaitForReceiptAsync(string from, string to, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var transferRPLFunction = new TransferRPLFunction();
                transferRPLFunction.From = from;
                transferRPLFunction.To = to;
                transferRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferRPLFunction, cancellationToken);
        }

        public virtual Task<string> UnlockRPLRequestAsync(UnlockRPLFunction unlockRPLFunction)
        {
             return ContractHandler.SendRequestAsync(unlockRPLFunction);
        }

        public virtual Task<TransactionReceipt> UnlockRPLRequestAndWaitForReceiptAsync(UnlockRPLFunction unlockRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unlockRPLFunction, cancellationToken);
        }

        public virtual Task<string> UnlockRPLRequestAsync(string nodeAddress, BigInteger amount)
        {
            var unlockRPLFunction = new UnlockRPLFunction();
                unlockRPLFunction.NodeAddress = nodeAddress;
                unlockRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(unlockRPLFunction);
        }

        public virtual Task<TransactionReceipt> UnlockRPLRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var unlockRPLFunction = new UnlockRPLFunction();
                unlockRPLFunction.NodeAddress = nodeAddress;
                unlockRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unlockRPLFunction, cancellationToken);
        }

        public virtual Task<string> UnstakeRPLRequestAsync(UnstakeRPLFunction unstakeRPLFunction)
        {
             return ContractHandler.SendRequestAsync(unstakeRPLFunction);
        }

        public virtual Task<TransactionReceipt> UnstakeRPLRequestAndWaitForReceiptAsync(UnstakeRPLFunction unstakeRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unstakeRPLFunction, cancellationToken);
        }

        public virtual Task<string> UnstakeRPLRequestAsync(BigInteger amount)
        {
            var unstakeRPLFunction = new UnstakeRPLFunction();
                unstakeRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(unstakeRPLFunction);
        }

        public virtual Task<TransactionReceipt> UnstakeRPLRequestAndWaitForReceiptAsync(BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var unstakeRPLFunction = new UnstakeRPLFunction();
                unstakeRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unstakeRPLFunction, cancellationToken);
        }

        public virtual Task<string> UnstakeRPLForRequestAsync(UnstakeRPLForFunction unstakeRPLForFunction)
        {
             return ContractHandler.SendRequestAsync(unstakeRPLForFunction);
        }

        public virtual Task<TransactionReceipt> UnstakeRPLForRequestAndWaitForReceiptAsync(UnstakeRPLForFunction unstakeRPLForFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unstakeRPLForFunction, cancellationToken);
        }

        public virtual Task<string> UnstakeRPLForRequestAsync(string nodeAddress, BigInteger amount)
        {
            var unstakeRPLForFunction = new UnstakeRPLForFunction();
                unstakeRPLForFunction.NodeAddress = nodeAddress;
                unstakeRPLForFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(unstakeRPLForFunction);
        }

        public virtual Task<TransactionReceipt> UnstakeRPLForRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var unstakeRPLForFunction = new UnstakeRPLForFunction();
                unstakeRPLForFunction.NodeAddress = nodeAddress;
                unstakeRPLForFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unstakeRPLForFunction, cancellationToken);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public virtual Task<string> WithdrawLegacyRPLRequestAsync(WithdrawLegacyRPLFunction withdrawLegacyRPLFunction)
        {
             return ContractHandler.SendRequestAsync(withdrawLegacyRPLFunction);
        }

        public virtual Task<TransactionReceipt> WithdrawLegacyRPLRequestAndWaitForReceiptAsync(WithdrawLegacyRPLFunction withdrawLegacyRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(withdrawLegacyRPLFunction, cancellationToken);
        }

        public virtual Task<string> WithdrawLegacyRPLRequestAsync(BigInteger amount)
        {
            var withdrawLegacyRPLFunction = new WithdrawLegacyRPLFunction();
                withdrawLegacyRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(withdrawLegacyRPLFunction);
        }

        public virtual Task<TransactionReceipt> WithdrawLegacyRPLRequestAndWaitForReceiptAsync(BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var withdrawLegacyRPLFunction = new WithdrawLegacyRPLFunction();
                withdrawLegacyRPLFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(withdrawLegacyRPLFunction, cancellationToken);
        }

        public virtual Task<string> WithdrawLegacyRPLForRequestAsync(WithdrawLegacyRPLForFunction withdrawLegacyRPLForFunction)
        {
             return ContractHandler.SendRequestAsync(withdrawLegacyRPLForFunction);
        }

        public virtual Task<TransactionReceipt> WithdrawLegacyRPLForRequestAndWaitForReceiptAsync(WithdrawLegacyRPLForFunction withdrawLegacyRPLForFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(withdrawLegacyRPLForFunction, cancellationToken);
        }

        public virtual Task<string> WithdrawLegacyRPLForRequestAsync(string nodeAddress, BigInteger amount)
        {
            var withdrawLegacyRPLForFunction = new WithdrawLegacyRPLForFunction();
                withdrawLegacyRPLForFunction.NodeAddress = nodeAddress;
                withdrawLegacyRPLForFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(withdrawLegacyRPLForFunction);
        }

        public virtual Task<TransactionReceipt> WithdrawLegacyRPLForRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var withdrawLegacyRPLForFunction = new WithdrawLegacyRPLForFunction();
                withdrawLegacyRPLForFunction.NodeAddress = nodeAddress;
                withdrawLegacyRPLForFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(withdrawLegacyRPLForFunction, cancellationToken);
        }

        public virtual Task<string> WithdrawRPLRequestAsync(WithdrawRPLFunction withdrawRPLFunction)
        {
             return ContractHandler.SendRequestAsync(withdrawRPLFunction);
        }

        public virtual Task<string> WithdrawRPLRequestAsync()
        {
             return ContractHandler.SendRequestAsync<WithdrawRPLFunction>();
        }

        public virtual Task<TransactionReceipt> WithdrawRPLRequestAndWaitForReceiptAsync(WithdrawRPLFunction withdrawRPLFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(withdrawRPLFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> WithdrawRPLRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<WithdrawRPLFunction>(null, cancellationToken);
        }

        public virtual Task<string> WithdrawRPLForRequestAsync(WithdrawRPLForFunction withdrawRPLForFunction)
        {
             return ContractHandler.SendRequestAsync(withdrawRPLForFunction);
        }

        public virtual Task<TransactionReceipt> WithdrawRPLForRequestAndWaitForReceiptAsync(WithdrawRPLForFunction withdrawRPLForFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(withdrawRPLForFunction, cancellationToken);
        }

        public virtual Task<string> WithdrawRPLForRequestAsync(string nodeAddress)
        {
            var withdrawRPLForFunction = new WithdrawRPLForFunction();
                withdrawRPLForFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(withdrawRPLForFunction);
        }

        public virtual Task<TransactionReceipt> WithdrawRPLForRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var withdrawRPLForFunction = new WithdrawRPLForFunction();
                withdrawRPLForFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(withdrawRPLForFunction, cancellationToken);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(BurnRPLFunction),
                typeof(GetNodeETHBondedFunction),
                typeof(GetNodeETHBorrowedFunction),
                typeof(GetNodeETHCollateralisationRatioFunction),
                typeof(GetNodeLastUnstakeTimeFunction),
                typeof(GetNodeLegacyStakedRPLFunction),
                typeof(GetNodeLockedRPLFunction),
                typeof(GetNodeMaximumRPLStakeForMinipoolsFunction),
                typeof(GetNodeMegapoolETHBondedFunction),
                typeof(GetNodeMegapoolETHBorrowedFunction),
                typeof(GetNodeMegapoolStakedRPLFunction),
                typeof(GetNodeMinipoolETHBondedFunction),
                typeof(GetNodeMinipoolETHBorrowedFunction),
                typeof(GetNodeRPLStakedTimeFunction),
                typeof(GetNodeStakedRPLFunction),
                typeof(GetNodeUnstakingRPLFunction),
                typeof(GetRPLLockingAllowedFunction),
                typeof(GetTotalLegacyStakedRPLFunction),
                typeof(GetTotalMegapoolStakedRPLFunction),
                typeof(GetTotalStakedRPLFunction),
                typeof(LockRPLFunction),
                typeof(SetRPLLockingAllowedFunction),
                typeof(SetStakeRPLForAllowedFunction),
                typeof(SetStakeRPLForAllowed1Function),
                typeof(SlashRPLFunction),
                typeof(StakeRPLFunction),
                typeof(StakeRPLForFunction),
                typeof(TransferRPLFunction),
                typeof(UnlockRPLFunction),
                typeof(UnstakeRPLFunction),
                typeof(UnstakeRPLForFunction),
                typeof(VersionFunction),
                typeof(WithdrawLegacyRPLFunction),
                typeof(WithdrawLegacyRPLForFunction),
                typeof(WithdrawRPLFunction),
                typeof(WithdrawRPLForFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(RPLBurnedEventDTO),
                typeof(RPLLegacyWithdrawnEventDTO),
                typeof(RPLLockedEventDTO),
                typeof(RPLLockingAllowedEventDTO),
                typeof(RPLSlashedEventDTO),
                typeof(RPLStakedEventDTO),
                typeof(RPLLegacyStakedEventDto),
                typeof(RPLTransferredEventDTO),
                typeof(RPLUnlockedEventDTO),
                typeof(RPLUnstakedEventDTO),
                typeof(RPLOrRPLLegacyWithdrawnEventDTO),
                typeof(StakeRPLForAllowedEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
