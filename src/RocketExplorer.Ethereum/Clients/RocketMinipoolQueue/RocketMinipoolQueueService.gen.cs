// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketMinipoolQueue.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketMinipoolQueue
{
    public partial class RocketMinipoolQueueService: RocketMinipoolQueueServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolQueueDeployment rocketMinipoolQueueDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMinipoolQueueDeployment>().SendRequestAndWaitForReceiptAsync(rocketMinipoolQueueDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolQueueDeployment rocketMinipoolQueueDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMinipoolQueueDeployment>().SendRequestAsync(rocketMinipoolQueueDeployment);
        }

        public static async Task<RocketMinipoolQueueService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolQueueDeployment rocketMinipoolQueueDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketMinipoolQueueDeployment, cancellationTokenSource);
            return new RocketMinipoolQueueService(web3, receipt.ContractAddress);
        }

        public RocketMinipoolQueueService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketMinipoolQueueServiceBase: ContractWeb3ServiceBase
    {

        public RocketMinipoolQueueServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> DequeueMinipoolByDepositLegacyRequestAsync(DequeueMinipoolByDepositLegacyFunction dequeueMinipoolByDepositLegacyFunction)
        {
             return ContractHandler.SendRequestAsync(dequeueMinipoolByDepositLegacyFunction);
        }

        public virtual Task<TransactionReceipt> DequeueMinipoolByDepositLegacyRequestAndWaitForReceiptAsync(DequeueMinipoolByDepositLegacyFunction dequeueMinipoolByDepositLegacyFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueMinipoolByDepositLegacyFunction, cancellationToken);
        }

        public virtual Task<string> DequeueMinipoolByDepositLegacyRequestAsync(byte depositType)
        {
            var dequeueMinipoolByDepositLegacyFunction = new DequeueMinipoolByDepositLegacyFunction();
                dequeueMinipoolByDepositLegacyFunction.DepositType = depositType;
            
             return ContractHandler.SendRequestAsync(dequeueMinipoolByDepositLegacyFunction);
        }

        public virtual Task<TransactionReceipt> DequeueMinipoolByDepositLegacyRequestAndWaitForReceiptAsync(byte depositType, CancellationTokenSource cancellationToken = null)
        {
            var dequeueMinipoolByDepositLegacyFunction = new DequeueMinipoolByDepositLegacyFunction();
                dequeueMinipoolByDepositLegacyFunction.DepositType = depositType;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueMinipoolByDepositLegacyFunction, cancellationToken);
        }

        public virtual Task<string> DequeueMinipoolsRequestAsync(DequeueMinipoolsFunction dequeueMinipoolsFunction)
        {
             return ContractHandler.SendRequestAsync(dequeueMinipoolsFunction);
        }

        public virtual Task<TransactionReceipt> DequeueMinipoolsRequestAndWaitForReceiptAsync(DequeueMinipoolsFunction dequeueMinipoolsFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueMinipoolsFunction, cancellationToken);
        }

        public virtual Task<string> DequeueMinipoolsRequestAsync(BigInteger maxToDequeue)
        {
            var dequeueMinipoolsFunction = new DequeueMinipoolsFunction();
                dequeueMinipoolsFunction.MaxToDequeue = maxToDequeue;
            
             return ContractHandler.SendRequestAsync(dequeueMinipoolsFunction);
        }

        public virtual Task<TransactionReceipt> DequeueMinipoolsRequestAndWaitForReceiptAsync(BigInteger maxToDequeue, CancellationTokenSource cancellationToken = null)
        {
            var dequeueMinipoolsFunction = new DequeueMinipoolsFunction();
                dequeueMinipoolsFunction.MaxToDequeue = maxToDequeue;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(dequeueMinipoolsFunction, cancellationToken);
        }

        public virtual Task<string> EnqueueMinipoolRequestAsync(EnqueueMinipoolFunction enqueueMinipoolFunction)
        {
             return ContractHandler.SendRequestAsync(enqueueMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> EnqueueMinipoolRequestAndWaitForReceiptAsync(EnqueueMinipoolFunction enqueueMinipoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(enqueueMinipoolFunction, cancellationToken);
        }

        public virtual Task<string> EnqueueMinipoolRequestAsync(string minipool)
        {
            var enqueueMinipoolFunction = new EnqueueMinipoolFunction();
                enqueueMinipoolFunction.Minipool = minipool;
            
             return ContractHandler.SendRequestAsync(enqueueMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> EnqueueMinipoolRequestAndWaitForReceiptAsync(string minipool, CancellationTokenSource cancellationToken = null)
        {
            var enqueueMinipoolFunction = new EnqueueMinipoolFunction();
                enqueueMinipoolFunction.Minipool = minipool;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(enqueueMinipoolFunction, cancellationToken);
        }

        public Task<bool> GetContainsLegacyQueryAsync(GetContainsLegacyFunction getContainsLegacyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetContainsLegacyFunction, bool>(getContainsLegacyFunction, blockParameter);
        }

        
        public virtual Task<bool> GetContainsLegacyQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetContainsLegacyFunction, bool>(null, blockParameter);
        }

        public Task<BigInteger> GetEffectiveCapacityQueryAsync(GetEffectiveCapacityFunction getEffectiveCapacityFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetEffectiveCapacityFunction, BigInteger>(getEffectiveCapacityFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetEffectiveCapacityQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetEffectiveCapacityFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetLengthQueryAsync(GetLengthFunction getLengthFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetLengthFunction, BigInteger>(getLengthFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetLengthQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetLengthFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetLengthLegacyQueryAsync(GetLengthLegacyFunction getLengthLegacyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetLengthLegacyFunction, BigInteger>(getLengthLegacyFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetLengthLegacyQueryAsync(byte depositType, BlockParameter blockParameter = null)
        {
            var getLengthLegacyFunction = new GetLengthLegacyFunction();
                getLengthLegacyFunction.DepositType = depositType;
            
            return ContractHandler.QueryAsync<GetLengthLegacyFunction, BigInteger>(getLengthLegacyFunction, blockParameter);
        }

        public Task<string> GetMinipoolAtQueryAsync(GetMinipoolAtFunction getMinipoolAtFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolAtFunction, string>(getMinipoolAtFunction, blockParameter);
        }

        
        public virtual Task<string> GetMinipoolAtQueryAsync(BigInteger index, BlockParameter blockParameter = null)
        {
            var getMinipoolAtFunction = new GetMinipoolAtFunction();
                getMinipoolAtFunction.Index = index;
            
            return ContractHandler.QueryAsync<GetMinipoolAtFunction, string>(getMinipoolAtFunction, blockParameter);
        }

        public Task<BigInteger> GetMinipoolPositionQueryAsync(GetMinipoolPositionFunction getMinipoolPositionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolPositionFunction, BigInteger>(getMinipoolPositionFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetMinipoolPositionQueryAsync(string minipool, BlockParameter blockParameter = null)
        {
            var getMinipoolPositionFunction = new GetMinipoolPositionFunction();
                getMinipoolPositionFunction.Minipool = minipool;
            
            return ContractHandler.QueryAsync<GetMinipoolPositionFunction, BigInteger>(getMinipoolPositionFunction, blockParameter);
        }

        public Task<BigInteger> GetNextCapacityLegacyQueryAsync(GetNextCapacityLegacyFunction getNextCapacityLegacyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNextCapacityLegacyFunction, BigInteger>(getNextCapacityLegacyFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNextCapacityLegacyQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNextCapacityLegacyFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<GetNextDepositLegacyOutputDTO> GetNextDepositLegacyQueryAsync(GetNextDepositLegacyFunction getNextDepositLegacyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetNextDepositLegacyFunction, GetNextDepositLegacyOutputDTO>(getNextDepositLegacyFunction, blockParameter);
        }

        public virtual Task<GetNextDepositLegacyOutputDTO> GetNextDepositLegacyQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetNextDepositLegacyFunction, GetNextDepositLegacyOutputDTO>(null, blockParameter);
        }

        public Task<BigInteger> GetTotalCapacityQueryAsync(GetTotalCapacityFunction getTotalCapacityFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalCapacityFunction, BigInteger>(getTotalCapacityFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetTotalCapacityQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalCapacityFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetTotalLengthQueryAsync(GetTotalLengthFunction getTotalLengthFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalLengthFunction, BigInteger>(getTotalLengthFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetTotalLengthQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetTotalLengthFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<string> RemoveMinipoolRequestAsync(RemoveMinipoolFunction removeMinipoolFunction)
        {
             return ContractHandler.SendRequestAsync(removeMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> RemoveMinipoolRequestAndWaitForReceiptAsync(RemoveMinipoolFunction removeMinipoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(removeMinipoolFunction, cancellationToken);
        }

        public virtual Task<string> RemoveMinipoolRequestAsync(byte depositType)
        {
            var removeMinipoolFunction = new RemoveMinipoolFunction();
                removeMinipoolFunction.DepositType = depositType;
            
             return ContractHandler.SendRequestAsync(removeMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> RemoveMinipoolRequestAndWaitForReceiptAsync(byte depositType, CancellationTokenSource cancellationToken = null)
        {
            var removeMinipoolFunction = new RemoveMinipoolFunction();
                removeMinipoolFunction.DepositType = depositType;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(removeMinipoolFunction, cancellationToken);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(DequeueMinipoolByDepositLegacyFunction),
                typeof(DequeueMinipoolsFunction),
                typeof(EnqueueMinipoolFunction),
                typeof(GetContainsLegacyFunction),
                typeof(GetEffectiveCapacityFunction),
                typeof(GetLengthFunction),
                typeof(GetLengthLegacyFunction),
                typeof(GetMinipoolAtFunction),
                typeof(GetMinipoolPositionFunction),
                typeof(GetNextCapacityLegacyFunction),
                typeof(GetNextDepositLegacyFunction),
                typeof(GetTotalCapacityFunction),
                typeof(GetTotalLengthFunction),
                typeof(RemoveMinipoolFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(MinipoolDequeuedEventDTO),
                typeof(MinipoolEnqueuedEventDTO),
                typeof(MinipoolRemovedEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
