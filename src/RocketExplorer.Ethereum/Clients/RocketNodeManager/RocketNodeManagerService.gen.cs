// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketNodeManager.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketNodeManager
{
    public partial class RocketNodeManagerService: RocketNodeManagerServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketNodeManagerDeployment rocketNodeManagerDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketNodeManagerDeployment>().SendRequestAndWaitForReceiptAsync(rocketNodeManagerDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketNodeManagerDeployment rocketNodeManagerDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketNodeManagerDeployment>().SendRequestAsync(rocketNodeManagerDeployment);
        }

        public static async Task<RocketNodeManagerService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketNodeManagerDeployment rocketNodeManagerDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketNodeManagerDeployment, cancellationTokenSource);
            return new RocketNodeManagerService(web3, receipt.ContractAddress);
        }

        public RocketNodeManagerService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketNodeManagerServiceBase: ContractWeb3ServiceBase
    {

        public RocketNodeManagerServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> AddUnclaimedRewardsRequestAsync(AddUnclaimedRewardsFunction addUnclaimedRewardsFunction)
        {
             return ContractHandler.SendRequestAsync(addUnclaimedRewardsFunction);
        }

        public virtual Task<TransactionReceipt> AddUnclaimedRewardsRequestAndWaitForReceiptAsync(AddUnclaimedRewardsFunction addUnclaimedRewardsFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(addUnclaimedRewardsFunction, cancellationToken);
        }

        public virtual Task<string> AddUnclaimedRewardsRequestAsync(string nodeAddress)
        {
            var addUnclaimedRewardsFunction = new AddUnclaimedRewardsFunction();
                addUnclaimedRewardsFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(addUnclaimedRewardsFunction);
        }

        public virtual Task<TransactionReceipt> AddUnclaimedRewardsRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var addUnclaimedRewardsFunction = new AddUnclaimedRewardsFunction();
                addUnclaimedRewardsFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(addUnclaimedRewardsFunction, cancellationToken);
        }

        public virtual Task<string> ClaimUnclaimedRewardsRequestAsync(ClaimUnclaimedRewardsFunction claimUnclaimedRewardsFunction)
        {
             return ContractHandler.SendRequestAsync(claimUnclaimedRewardsFunction);
        }

        public virtual Task<TransactionReceipt> ClaimUnclaimedRewardsRequestAndWaitForReceiptAsync(ClaimUnclaimedRewardsFunction claimUnclaimedRewardsFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(claimUnclaimedRewardsFunction, cancellationToken);
        }

        public virtual Task<string> ClaimUnclaimedRewardsRequestAsync(string nodeAddress)
        {
            var claimUnclaimedRewardsFunction = new ClaimUnclaimedRewardsFunction();
                claimUnclaimedRewardsFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(claimUnclaimedRewardsFunction);
        }

        public virtual Task<TransactionReceipt> ClaimUnclaimedRewardsRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var claimUnclaimedRewardsFunction = new ClaimUnclaimedRewardsFunction();
                claimUnclaimedRewardsFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(claimUnclaimedRewardsFunction, cancellationToken);
        }

        public virtual Task<string> ConfirmRPLWithdrawalAddressRequestAsync(ConfirmRPLWithdrawalAddressFunction confirmRPLWithdrawalAddressFunction)
        {
             return ContractHandler.SendRequestAsync(confirmRPLWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> ConfirmRPLWithdrawalAddressRequestAndWaitForReceiptAsync(ConfirmRPLWithdrawalAddressFunction confirmRPLWithdrawalAddressFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(confirmRPLWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> ConfirmRPLWithdrawalAddressRequestAsync(string nodeAddress)
        {
            var confirmRPLWithdrawalAddressFunction = new ConfirmRPLWithdrawalAddressFunction();
                confirmRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(confirmRPLWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> ConfirmRPLWithdrawalAddressRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var confirmRPLWithdrawalAddressFunction = new ConfirmRPLWithdrawalAddressFunction();
                confirmRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(confirmRPLWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> DeployMegapoolRequestAsync(DeployMegapoolFunction deployMegapoolFunction)
        {
             return ContractHandler.SendRequestAsync(deployMegapoolFunction);
        }

        public virtual Task<string> DeployMegapoolRequestAsync()
        {
             return ContractHandler.SendRequestAsync<DeployMegapoolFunction>();
        }

        public virtual Task<TransactionReceipt> DeployMegapoolRequestAndWaitForReceiptAsync(DeployMegapoolFunction deployMegapoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(deployMegapoolFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> DeployMegapoolRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<DeployMegapoolFunction>(null, cancellationToken);
        }

        public Task<BigInteger> GetAverageNodeFeeQueryAsync(GetAverageNodeFeeFunction getAverageNodeFeeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetAverageNodeFeeFunction, BigInteger>(getAverageNodeFeeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetAverageNodeFeeQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getAverageNodeFeeFunction = new GetAverageNodeFeeFunction();
                getAverageNodeFeeFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetAverageNodeFeeFunction, BigInteger>(getAverageNodeFeeFunction, blockParameter);
        }

        public Task<BigInteger> GetExpressTicketCountQueryAsync(GetExpressTicketCountFunction getExpressTicketCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetExpressTicketCountFunction, BigInteger>(getExpressTicketCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetExpressTicketCountQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getExpressTicketCountFunction = new GetExpressTicketCountFunction();
                getExpressTicketCountFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetExpressTicketCountFunction, BigInteger>(getExpressTicketCountFunction, blockParameter);
        }

        public Task<bool> GetFeeDistributorInitialisedQueryAsync(GetFeeDistributorInitialisedFunction getFeeDistributorInitialisedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetFeeDistributorInitialisedFunction, bool>(getFeeDistributorInitialisedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetFeeDistributorInitialisedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getFeeDistributorInitialisedFunction = new GetFeeDistributorInitialisedFunction();
                getFeeDistributorInitialisedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetFeeDistributorInitialisedFunction, bool>(getFeeDistributorInitialisedFunction, blockParameter);
        }

        public Task<string> GetMegapoolAddressQueryAsync(GetMegapoolAddressFunction getMegapoolAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMegapoolAddressFunction, string>(getMegapoolAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetMegapoolAddressQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getMegapoolAddressFunction = new GetMegapoolAddressFunction();
                getMegapoolAddressFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetMegapoolAddressFunction, string>(getMegapoolAddressFunction, blockParameter);
        }

        public Task<List<string>> GetNodeAddressesQueryAsync(GetNodeAddressesFunction getNodeAddressesFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeAddressesFunction, List<string>>(getNodeAddressesFunction, blockParameter);
        }

        
        public virtual Task<List<string>> GetNodeAddressesQueryAsync(BigInteger offset, BigInteger limit, BlockParameter blockParameter = null)
        {
            var getNodeAddressesFunction = new GetNodeAddressesFunction();
                getNodeAddressesFunction.Offset = offset;
                getNodeAddressesFunction.Limit = limit;
            
            return ContractHandler.QueryAsync<GetNodeAddressesFunction, List<string>>(getNodeAddressesFunction, blockParameter);
        }

        public Task<string> GetNodeAtQueryAsync(GetNodeAtFunction getNodeAtFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeAtFunction, string>(getNodeAtFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeAtQueryAsync(BigInteger index, BlockParameter blockParameter = null)
        {
            var getNodeAtFunction = new GetNodeAtFunction();
                getNodeAtFunction.Index = index;
            
            return ContractHandler.QueryAsync<GetNodeAtFunction, string>(getNodeAtFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeCountQueryAsync(GetNodeCountFunction getNodeCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeCountFunction, BigInteger>(getNodeCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeCountFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<GetNodeCountPerTimezoneOutputDTO> GetNodeCountPerTimezoneQueryAsync(GetNodeCountPerTimezoneFunction getNodeCountPerTimezoneFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetNodeCountPerTimezoneFunction, GetNodeCountPerTimezoneOutputDTO>(getNodeCountPerTimezoneFunction, blockParameter);
        }

        public virtual Task<GetNodeCountPerTimezoneOutputDTO> GetNodeCountPerTimezoneQueryAsync(BigInteger offset, BigInteger limit, BlockParameter blockParameter = null)
        {
            var getNodeCountPerTimezoneFunction = new GetNodeCountPerTimezoneFunction();
                getNodeCountPerTimezoneFunction.Offset = offset;
                getNodeCountPerTimezoneFunction.Limit = limit;
            
            return ContractHandler.QueryDeserializingToObjectAsync<GetNodeCountPerTimezoneFunction, GetNodeCountPerTimezoneOutputDTO>(getNodeCountPerTimezoneFunction, blockParameter);
        }

        public Task<bool> GetNodeExistsQueryAsync(GetNodeExistsFunction getNodeExistsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeExistsFunction, bool>(getNodeExistsFunction, blockParameter);
        }

        
        public virtual Task<bool> GetNodeExistsQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeExistsFunction = new GetNodeExistsFunction();
                getNodeExistsFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeExistsFunction, bool>(getNodeExistsFunction, blockParameter);
        }

        public Task<string> GetNodePendingRPLWithdrawalAddressQueryAsync(GetNodePendingRPLWithdrawalAddressFunction getNodePendingRPLWithdrawalAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodePendingRPLWithdrawalAddressFunction, string>(getNodePendingRPLWithdrawalAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodePendingRPLWithdrawalAddressQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodePendingRPLWithdrawalAddressFunction = new GetNodePendingRPLWithdrawalAddressFunction();
                getNodePendingRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodePendingRPLWithdrawalAddressFunction, string>(getNodePendingRPLWithdrawalAddressFunction, blockParameter);
        }

        public Task<string> GetNodePendingWithdrawalAddressQueryAsync(GetNodePendingWithdrawalAddressFunction getNodePendingWithdrawalAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodePendingWithdrawalAddressFunction, string>(getNodePendingWithdrawalAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodePendingWithdrawalAddressQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodePendingWithdrawalAddressFunction = new GetNodePendingWithdrawalAddressFunction();
                getNodePendingWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodePendingWithdrawalAddressFunction, string>(getNodePendingWithdrawalAddressFunction, blockParameter);
        }

        public Task<string> GetNodeRPLWithdrawalAddressQueryAsync(GetNodeRPLWithdrawalAddressFunction getNodeRPLWithdrawalAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeRPLWithdrawalAddressFunction, string>(getNodeRPLWithdrawalAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeRPLWithdrawalAddressQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeRPLWithdrawalAddressFunction = new GetNodeRPLWithdrawalAddressFunction();
                getNodeRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeRPLWithdrawalAddressFunction, string>(getNodeRPLWithdrawalAddressFunction, blockParameter);
        }

        public Task<bool> GetNodeRPLWithdrawalAddressIsSetQueryAsync(GetNodeRPLWithdrawalAddressIsSetFunction getNodeRPLWithdrawalAddressIsSetFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeRPLWithdrawalAddressIsSetFunction, bool>(getNodeRPLWithdrawalAddressIsSetFunction, blockParameter);
        }

        
        public virtual Task<bool> GetNodeRPLWithdrawalAddressIsSetQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeRPLWithdrawalAddressIsSetFunction = new GetNodeRPLWithdrawalAddressIsSetFunction();
                getNodeRPLWithdrawalAddressIsSetFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeRPLWithdrawalAddressIsSetFunction, bool>(getNodeRPLWithdrawalAddressIsSetFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeRegistrationTimeQueryAsync(GetNodeRegistrationTimeFunction getNodeRegistrationTimeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeRegistrationTimeFunction, BigInteger>(getNodeRegistrationTimeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeRegistrationTimeQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeRegistrationTimeFunction = new GetNodeRegistrationTimeFunction();
                getNodeRegistrationTimeFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeRegistrationTimeFunction, BigInteger>(getNodeRegistrationTimeFunction, blockParameter);
        }

        public Task<string> GetNodeTimezoneLocationQueryAsync(GetNodeTimezoneLocationFunction getNodeTimezoneLocationFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeTimezoneLocationFunction, string>(getNodeTimezoneLocationFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeTimezoneLocationQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeTimezoneLocationFunction = new GetNodeTimezoneLocationFunction();
                getNodeTimezoneLocationFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeTimezoneLocationFunction, string>(getNodeTimezoneLocationFunction, blockParameter);
        }

        public Task<string> GetNodeWithdrawalAddressQueryAsync(GetNodeWithdrawalAddressFunction getNodeWithdrawalAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeWithdrawalAddressFunction, string>(getNodeWithdrawalAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeWithdrawalAddressQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeWithdrawalAddressFunction = new GetNodeWithdrawalAddressFunction();
                getNodeWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeWithdrawalAddressFunction, string>(getNodeWithdrawalAddressFunction, blockParameter);
        }

        public Task<BigInteger> GetRewardNetworkQueryAsync(GetRewardNetworkFunction getRewardNetworkFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetRewardNetworkFunction, BigInteger>(getRewardNetworkFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetRewardNetworkQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getRewardNetworkFunction = new GetRewardNetworkFunction();
                getRewardNetworkFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetRewardNetworkFunction, BigInteger>(getRewardNetworkFunction, blockParameter);
        }

        public Task<BigInteger> GetSmoothingPoolRegisteredNodeCountQueryAsync(GetSmoothingPoolRegisteredNodeCountFunction getSmoothingPoolRegisteredNodeCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSmoothingPoolRegisteredNodeCountFunction, BigInteger>(getSmoothingPoolRegisteredNodeCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSmoothingPoolRegisteredNodeCountQueryAsync(BigInteger offset, BigInteger limit, BlockParameter blockParameter = null)
        {
            var getSmoothingPoolRegisteredNodeCountFunction = new GetSmoothingPoolRegisteredNodeCountFunction();
                getSmoothingPoolRegisteredNodeCountFunction.Offset = offset;
                getSmoothingPoolRegisteredNodeCountFunction.Limit = limit;
            
            return ContractHandler.QueryAsync<GetSmoothingPoolRegisteredNodeCountFunction, BigInteger>(getSmoothingPoolRegisteredNodeCountFunction, blockParameter);
        }

        public Task<BigInteger> GetSmoothingPoolRegistrationChangedQueryAsync(GetSmoothingPoolRegistrationChangedFunction getSmoothingPoolRegistrationChangedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSmoothingPoolRegistrationChangedFunction, BigInteger>(getSmoothingPoolRegistrationChangedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSmoothingPoolRegistrationChangedQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getSmoothingPoolRegistrationChangedFunction = new GetSmoothingPoolRegistrationChangedFunction();
                getSmoothingPoolRegistrationChangedFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetSmoothingPoolRegistrationChangedFunction, BigInteger>(getSmoothingPoolRegistrationChangedFunction, blockParameter);
        }

        public Task<bool> GetSmoothingPoolRegistrationStateQueryAsync(GetSmoothingPoolRegistrationStateFunction getSmoothingPoolRegistrationStateFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSmoothingPoolRegistrationStateFunction, bool>(getSmoothingPoolRegistrationStateFunction, blockParameter);
        }

        
        public virtual Task<bool> GetSmoothingPoolRegistrationStateQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getSmoothingPoolRegistrationStateFunction = new GetSmoothingPoolRegistrationStateFunction();
                getSmoothingPoolRegistrationStateFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetSmoothingPoolRegistrationStateFunction, bool>(getSmoothingPoolRegistrationStateFunction, blockParameter);
        }

        public Task<BigInteger> GetUnclaimedRewardsQueryAsync(GetUnclaimedRewardsFunction getUnclaimedRewardsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetUnclaimedRewardsFunction, BigInteger>(getUnclaimedRewardsFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetUnclaimedRewardsQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getUnclaimedRewardsFunction = new GetUnclaimedRewardsFunction();
                getUnclaimedRewardsFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetUnclaimedRewardsFunction, BigInteger>(getUnclaimedRewardsFunction, blockParameter);
        }

        public virtual Task<string> InitialiseFeeDistributorRequestAsync(InitialiseFeeDistributorFunction initialiseFeeDistributorFunction)
        {
             return ContractHandler.SendRequestAsync(initialiseFeeDistributorFunction);
        }

        public virtual Task<string> InitialiseFeeDistributorRequestAsync()
        {
             return ContractHandler.SendRequestAsync<InitialiseFeeDistributorFunction>();
        }

        public virtual Task<TransactionReceipt> InitialiseFeeDistributorRequestAndWaitForReceiptAsync(InitialiseFeeDistributorFunction initialiseFeeDistributorFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(initialiseFeeDistributorFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> InitialiseFeeDistributorRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<InitialiseFeeDistributorFunction>(null, cancellationToken);
        }

        public virtual Task<string> ProvisionExpressTicketsRequestAsync(ProvisionExpressTicketsFunction provisionExpressTicketsFunction)
        {
             return ContractHandler.SendRequestAsync(provisionExpressTicketsFunction);
        }

        public virtual Task<TransactionReceipt> ProvisionExpressTicketsRequestAndWaitForReceiptAsync(ProvisionExpressTicketsFunction provisionExpressTicketsFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(provisionExpressTicketsFunction, cancellationToken);
        }

        public virtual Task<string> ProvisionExpressTicketsRequestAsync(string nodeAddress)
        {
            var provisionExpressTicketsFunction = new ProvisionExpressTicketsFunction();
                provisionExpressTicketsFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(provisionExpressTicketsFunction);
        }

        public virtual Task<TransactionReceipt> ProvisionExpressTicketsRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var provisionExpressTicketsFunction = new ProvisionExpressTicketsFunction();
                provisionExpressTicketsFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(provisionExpressTicketsFunction, cancellationToken);
        }

        public virtual Task<string> ReceiveVaultWithdrawalETHRequestAsync(ReceiveVaultWithdrawalETHFunction receiveVaultWithdrawalETHFunction)
        {
             return ContractHandler.SendRequestAsync(receiveVaultWithdrawalETHFunction);
        }

        public virtual Task<string> ReceiveVaultWithdrawalETHRequestAsync()
        {
             return ContractHandler.SendRequestAsync<ReceiveVaultWithdrawalETHFunction>();
        }

        public virtual Task<TransactionReceipt> ReceiveVaultWithdrawalETHRequestAndWaitForReceiptAsync(ReceiveVaultWithdrawalETHFunction receiveVaultWithdrawalETHFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(receiveVaultWithdrawalETHFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> ReceiveVaultWithdrawalETHRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<ReceiveVaultWithdrawalETHFunction>(null, cancellationToken);
        }

        public virtual Task<string> RefundExpressTicketRequestAsync(RefundExpressTicketFunction refundExpressTicketFunction)
        {
             return ContractHandler.SendRequestAsync(refundExpressTicketFunction);
        }

        public virtual Task<TransactionReceipt> RefundExpressTicketRequestAndWaitForReceiptAsync(RefundExpressTicketFunction refundExpressTicketFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(refundExpressTicketFunction, cancellationToken);
        }

        public virtual Task<string> RefundExpressTicketRequestAsync(string nodeAddress)
        {
            var refundExpressTicketFunction = new RefundExpressTicketFunction();
                refundExpressTicketFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(refundExpressTicketFunction);
        }

        public virtual Task<TransactionReceipt> RefundExpressTicketRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var refundExpressTicketFunction = new RefundExpressTicketFunction();
                refundExpressTicketFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(refundExpressTicketFunction, cancellationToken);
        }

        public virtual Task<string> RegisterNodeRequestAsync(RegisterNodeFunction registerNodeFunction)
        {
             return ContractHandler.SendRequestAsync(registerNodeFunction);
        }

        public virtual Task<TransactionReceipt> RegisterNodeRequestAndWaitForReceiptAsync(RegisterNodeFunction registerNodeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(registerNodeFunction, cancellationToken);
        }

        public virtual Task<string> RegisterNodeRequestAsync(string timezoneLocation)
        {
            var registerNodeFunction = new RegisterNodeFunction();
                registerNodeFunction.TimezoneLocation = timezoneLocation;
            
             return ContractHandler.SendRequestAsync(registerNodeFunction);
        }

        public virtual Task<TransactionReceipt> RegisterNodeRequestAndWaitForReceiptAsync(string timezoneLocation, CancellationTokenSource cancellationToken = null)
        {
            var registerNodeFunction = new RegisterNodeFunction();
                registerNodeFunction.TimezoneLocation = timezoneLocation;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(registerNodeFunction, cancellationToken);
        }

        public virtual Task<string> SetRPLWithdrawalAddressRequestAsync(SetRPLWithdrawalAddressFunction setRPLWithdrawalAddressFunction)
        {
             return ContractHandler.SendRequestAsync(setRPLWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> SetRPLWithdrawalAddressRequestAndWaitForReceiptAsync(SetRPLWithdrawalAddressFunction setRPLWithdrawalAddressFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setRPLWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> SetRPLWithdrawalAddressRequestAsync(string nodeAddress, string newRPLWithdrawalAddress, bool confirm)
        {
            var setRPLWithdrawalAddressFunction = new SetRPLWithdrawalAddressFunction();
                setRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
                setRPLWithdrawalAddressFunction.NewRPLWithdrawalAddress = newRPLWithdrawalAddress;
                setRPLWithdrawalAddressFunction.Confirm = confirm;
            
             return ContractHandler.SendRequestAsync(setRPLWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> SetRPLWithdrawalAddressRequestAndWaitForReceiptAsync(string nodeAddress, string newRPLWithdrawalAddress, bool confirm, CancellationTokenSource cancellationToken = null)
        {
            var setRPLWithdrawalAddressFunction = new SetRPLWithdrawalAddressFunction();
                setRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
                setRPLWithdrawalAddressFunction.NewRPLWithdrawalAddress = newRPLWithdrawalAddress;
                setRPLWithdrawalAddressFunction.Confirm = confirm;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setRPLWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> SetRewardNetworkRequestAsync(SetRewardNetworkFunction setRewardNetworkFunction)
        {
             return ContractHandler.SendRequestAsync(setRewardNetworkFunction);
        }

        public virtual Task<TransactionReceipt> SetRewardNetworkRequestAndWaitForReceiptAsync(SetRewardNetworkFunction setRewardNetworkFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setRewardNetworkFunction, cancellationToken);
        }

        public virtual Task<string> SetRewardNetworkRequestAsync(string nodeAddress, BigInteger network)
        {
            var setRewardNetworkFunction = new SetRewardNetworkFunction();
                setRewardNetworkFunction.NodeAddress = nodeAddress;
                setRewardNetworkFunction.Network = network;
            
             return ContractHandler.SendRequestAsync(setRewardNetworkFunction);
        }

        public virtual Task<TransactionReceipt> SetRewardNetworkRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger network, CancellationTokenSource cancellationToken = null)
        {
            var setRewardNetworkFunction = new SetRewardNetworkFunction();
                setRewardNetworkFunction.NodeAddress = nodeAddress;
                setRewardNetworkFunction.Network = network;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setRewardNetworkFunction, cancellationToken);
        }

        public virtual Task<string> SetSmoothingPoolRegistrationStateRequestAsync(SetSmoothingPoolRegistrationStateFunction setSmoothingPoolRegistrationStateFunction)
        {
             return ContractHandler.SendRequestAsync(setSmoothingPoolRegistrationStateFunction);
        }

        public virtual Task<TransactionReceipt> SetSmoothingPoolRegistrationStateRequestAndWaitForReceiptAsync(SetSmoothingPoolRegistrationStateFunction setSmoothingPoolRegistrationStateFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSmoothingPoolRegistrationStateFunction, cancellationToken);
        }

        public virtual Task<string> SetSmoothingPoolRegistrationStateRequestAsync(bool state)
        {
            var setSmoothingPoolRegistrationStateFunction = new SetSmoothingPoolRegistrationStateFunction();
                setSmoothingPoolRegistrationStateFunction.State = state;
            
             return ContractHandler.SendRequestAsync(setSmoothingPoolRegistrationStateFunction);
        }

        public virtual Task<TransactionReceipt> SetSmoothingPoolRegistrationStateRequestAndWaitForReceiptAsync(bool state, CancellationTokenSource cancellationToken = null)
        {
            var setSmoothingPoolRegistrationStateFunction = new SetSmoothingPoolRegistrationStateFunction();
                setSmoothingPoolRegistrationStateFunction.State = state;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSmoothingPoolRegistrationStateFunction, cancellationToken);
        }

        public virtual Task<string> SetTimezoneLocationRequestAsync(SetTimezoneLocationFunction setTimezoneLocationFunction)
        {
             return ContractHandler.SendRequestAsync(setTimezoneLocationFunction);
        }

        public virtual Task<TransactionReceipt> SetTimezoneLocationRequestAndWaitForReceiptAsync(SetTimezoneLocationFunction setTimezoneLocationFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setTimezoneLocationFunction, cancellationToken);
        }

        public virtual Task<string> SetTimezoneLocationRequestAsync(string timezoneLocation)
        {
            var setTimezoneLocationFunction = new SetTimezoneLocationFunction();
                setTimezoneLocationFunction.TimezoneLocation = timezoneLocation;
            
             return ContractHandler.SendRequestAsync(setTimezoneLocationFunction);
        }

        public virtual Task<TransactionReceipt> SetTimezoneLocationRequestAndWaitForReceiptAsync(string timezoneLocation, CancellationTokenSource cancellationToken = null)
        {
            var setTimezoneLocationFunction = new SetTimezoneLocationFunction();
                setTimezoneLocationFunction.TimezoneLocation = timezoneLocation;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setTimezoneLocationFunction, cancellationToken);
        }

        public virtual Task<string> UnsetRPLWithdrawalAddressRequestAsync(UnsetRPLWithdrawalAddressFunction unsetRPLWithdrawalAddressFunction)
        {
             return ContractHandler.SendRequestAsync(unsetRPLWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> UnsetRPLWithdrawalAddressRequestAndWaitForReceiptAsync(UnsetRPLWithdrawalAddressFunction unsetRPLWithdrawalAddressFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unsetRPLWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> UnsetRPLWithdrawalAddressRequestAsync(string nodeAddress)
        {
            var unsetRPLWithdrawalAddressFunction = new UnsetRPLWithdrawalAddressFunction();
                unsetRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(unsetRPLWithdrawalAddressFunction);
        }

        public virtual Task<TransactionReceipt> UnsetRPLWithdrawalAddressRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var unsetRPLWithdrawalAddressFunction = new UnsetRPLWithdrawalAddressFunction();
                unsetRPLWithdrawalAddressFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(unsetRPLWithdrawalAddressFunction, cancellationToken);
        }

        public virtual Task<string> UseExpressTicketRequestAsync(UseExpressTicketFunction useExpressTicketFunction)
        {
             return ContractHandler.SendRequestAsync(useExpressTicketFunction);
        }

        public virtual Task<TransactionReceipt> UseExpressTicketRequestAndWaitForReceiptAsync(UseExpressTicketFunction useExpressTicketFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(useExpressTicketFunction, cancellationToken);
        }

        public virtual Task<string> UseExpressTicketRequestAsync(string nodeAddress)
        {
            var useExpressTicketFunction = new UseExpressTicketFunction();
                useExpressTicketFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(useExpressTicketFunction);
        }

        public virtual Task<TransactionReceipt> UseExpressTicketRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var useExpressTicketFunction = new UseExpressTicketFunction();
                useExpressTicketFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(useExpressTicketFunction, cancellationToken);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(AddUnclaimedRewardsFunction),
                typeof(ClaimUnclaimedRewardsFunction),
                typeof(ConfirmRPLWithdrawalAddressFunction),
                typeof(DeployMegapoolFunction),
                typeof(GetAverageNodeFeeFunction),
                typeof(GetExpressTicketCountFunction),
                typeof(GetFeeDistributorInitialisedFunction),
                typeof(GetMegapoolAddressFunction),
                typeof(GetNodeAddressesFunction),
                typeof(GetNodeAtFunction),
                typeof(GetNodeCountFunction),
                typeof(GetNodeCountPerTimezoneFunction),
                typeof(GetNodeExistsFunction),
                typeof(GetNodePendingRPLWithdrawalAddressFunction),
                typeof(GetNodePendingWithdrawalAddressFunction),
                typeof(GetNodeRPLWithdrawalAddressFunction),
                typeof(GetNodeRPLWithdrawalAddressIsSetFunction),
                typeof(GetNodeRegistrationTimeFunction),
                typeof(GetNodeTimezoneLocationFunction),
                typeof(GetNodeWithdrawalAddressFunction),
                typeof(GetRewardNetworkFunction),
                typeof(GetSmoothingPoolRegisteredNodeCountFunction),
                typeof(GetSmoothingPoolRegistrationChangedFunction),
                typeof(GetSmoothingPoolRegistrationStateFunction),
                typeof(GetUnclaimedRewardsFunction),
                typeof(InitialiseFeeDistributorFunction),
                typeof(ProvisionExpressTicketsFunction),
                typeof(ReceiveVaultWithdrawalETHFunction),
                typeof(RefundExpressTicketFunction),
                typeof(RegisterNodeFunction),
                typeof(SetRPLWithdrawalAddressFunction),
                typeof(SetRewardNetworkFunction),
                typeof(SetSmoothingPoolRegistrationStateFunction),
                typeof(SetTimezoneLocationFunction),
                typeof(UnsetRPLWithdrawalAddressFunction),
                typeof(UseExpressTicketFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(NodeRPLWithdrawalAddressSetEventDTO),
                typeof(NodeRPLWithdrawalAddressUnsetEventDTO),
                typeof(NodeRegisteredEventDTO),
                typeof(NodeRewardNetworkChangedEventDTO),
                typeof(NodeSmoothingPoolStateChangedEventDTO),
                typeof(NodeTimezoneLocationSetEventDTO),
                typeof(NodeUnclaimedRewardsAddedEventDTO),
                typeof(NodeUnclaimedRewardsClaimedEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
