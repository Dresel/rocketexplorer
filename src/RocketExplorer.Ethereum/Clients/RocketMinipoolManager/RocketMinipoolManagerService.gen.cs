// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketMinipoolManager.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketMinipoolManager
{
    public partial class RocketMinipoolManagerService: RocketMinipoolManagerServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolManagerDeployment rocketMinipoolManagerDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMinipoolManagerDeployment>().SendRequestAndWaitForReceiptAsync(rocketMinipoolManagerDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolManagerDeployment rocketMinipoolManagerDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketMinipoolManagerDeployment>().SendRequestAsync(rocketMinipoolManagerDeployment);
        }

        public static async Task<RocketMinipoolManagerService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketMinipoolManagerDeployment rocketMinipoolManagerDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketMinipoolManagerDeployment, cancellationTokenSource);
            return new RocketMinipoolManagerService(web3, receipt.ContractAddress);
        }

        public RocketMinipoolManagerService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketMinipoolManagerServiceBase: ContractWeb3ServiceBase
    {

        public RocketMinipoolManagerServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public virtual Task<string> CreateMinipoolRequestAsync(CreateMinipoolFunction createMinipoolFunction)
        {
             return ContractHandler.SendRequestAsync(createMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> CreateMinipoolRequestAndWaitForReceiptAsync(CreateMinipoolFunction createMinipoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(createMinipoolFunction, cancellationToken);
        }

        public virtual Task<string> CreateMinipoolRequestAsync(string nodeAddress, BigInteger salt)
        {
            var createMinipoolFunction = new CreateMinipoolFunction();
                createMinipoolFunction.NodeAddress = nodeAddress;
                createMinipoolFunction.Salt = salt;
            
             return ContractHandler.SendRequestAsync(createMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> CreateMinipoolRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger salt, CancellationTokenSource cancellationToken = null)
        {
            var createMinipoolFunction = new CreateMinipoolFunction();
                createMinipoolFunction.NodeAddress = nodeAddress;
                createMinipoolFunction.Salt = salt;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(createMinipoolFunction, cancellationToken);
        }

        public virtual Task<string> CreateVacantMinipoolRequestAsync(CreateVacantMinipoolFunction createVacantMinipoolFunction)
        {
             return ContractHandler.SendRequestAsync(createVacantMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> CreateVacantMinipoolRequestAndWaitForReceiptAsync(CreateVacantMinipoolFunction createVacantMinipoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(createVacantMinipoolFunction, cancellationToken);
        }

        public virtual Task<string> CreateVacantMinipoolRequestAsync(string nodeAddress, BigInteger salt, byte[] validatorPubkey, BigInteger bondAmount, BigInteger currentBalance)
        {
            var createVacantMinipoolFunction = new CreateVacantMinipoolFunction();
                createVacantMinipoolFunction.NodeAddress = nodeAddress;
                createVacantMinipoolFunction.Salt = salt;
                createVacantMinipoolFunction.ValidatorPubkey = validatorPubkey;
                createVacantMinipoolFunction.BondAmount = bondAmount;
                createVacantMinipoolFunction.CurrentBalance = currentBalance;
            
             return ContractHandler.SendRequestAsync(createVacantMinipoolFunction);
        }

        public virtual Task<TransactionReceipt> CreateVacantMinipoolRequestAndWaitForReceiptAsync(string nodeAddress, BigInteger salt, byte[] validatorPubkey, BigInteger bondAmount, BigInteger currentBalance, CancellationTokenSource cancellationToken = null)
        {
            var createVacantMinipoolFunction = new CreateVacantMinipoolFunction();
                createVacantMinipoolFunction.NodeAddress = nodeAddress;
                createVacantMinipoolFunction.Salt = salt;
                createVacantMinipoolFunction.ValidatorPubkey = validatorPubkey;
                createVacantMinipoolFunction.BondAmount = bondAmount;
                createVacantMinipoolFunction.CurrentBalance = currentBalance;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(createVacantMinipoolFunction, cancellationToken);
        }

        public virtual Task<string> DecrementNodeStakingMinipoolCountRequestAsync(DecrementNodeStakingMinipoolCountFunction decrementNodeStakingMinipoolCountFunction)
        {
             return ContractHandler.SendRequestAsync(decrementNodeStakingMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> DecrementNodeStakingMinipoolCountRequestAndWaitForReceiptAsync(DecrementNodeStakingMinipoolCountFunction decrementNodeStakingMinipoolCountFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(decrementNodeStakingMinipoolCountFunction, cancellationToken);
        }

        public virtual Task<string> DecrementNodeStakingMinipoolCountRequestAsync(string nodeAddress)
        {
            var decrementNodeStakingMinipoolCountFunction = new DecrementNodeStakingMinipoolCountFunction();
                decrementNodeStakingMinipoolCountFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(decrementNodeStakingMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> DecrementNodeStakingMinipoolCountRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var decrementNodeStakingMinipoolCountFunction = new DecrementNodeStakingMinipoolCountFunction();
                decrementNodeStakingMinipoolCountFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(decrementNodeStakingMinipoolCountFunction, cancellationToken);
        }

        public virtual Task<string> DestroyMinipoolRequestAsync(DestroyMinipoolFunction destroyMinipoolFunction)
        {
             return ContractHandler.SendRequestAsync(destroyMinipoolFunction);
        }

        public virtual Task<string> DestroyMinipoolRequestAsync()
        {
             return ContractHandler.SendRequestAsync<DestroyMinipoolFunction>();
        }

        public virtual Task<TransactionReceipt> DestroyMinipoolRequestAndWaitForReceiptAsync(DestroyMinipoolFunction destroyMinipoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(destroyMinipoolFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> DestroyMinipoolRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<DestroyMinipoolFunction>(null, cancellationToken);
        }

        public Task<BigInteger> GetActiveMinipoolCountQueryAsync(GetActiveMinipoolCountFunction getActiveMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetActiveMinipoolCountFunction, BigInteger>(getActiveMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetActiveMinipoolCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetActiveMinipoolCountFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetFinalisedMinipoolCountQueryAsync(GetFinalisedMinipoolCountFunction getFinalisedMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetFinalisedMinipoolCountFunction, BigInteger>(getFinalisedMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetFinalisedMinipoolCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetFinalisedMinipoolCountFunction, BigInteger>(null, blockParameter);
        }

        public Task<string> GetMinipoolAtQueryAsync(GetMinipoolAtFunction getMinipoolAtFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolAtFunction, string>(getMinipoolAtFunction, blockParameter);
        }

        
        public virtual Task<string> GetMinipoolAtQueryAsync(BigInteger index, BlockParameter blockParameter = null)
        {
            var getMinipoolAtFunction = new GetMinipoolAtFunction();
                getMinipoolAtFunction.Index = index;
            
            return ContractHandler.QueryAsync<GetMinipoolAtFunction, string>(getMinipoolAtFunction, blockParameter);
        }

        public Task<string> GetMinipoolByPubkeyQueryAsync(GetMinipoolByPubkeyFunction getMinipoolByPubkeyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolByPubkeyFunction, string>(getMinipoolByPubkeyFunction, blockParameter);
        }

        
        public virtual Task<string> GetMinipoolByPubkeyQueryAsync(byte[] pubkey, BlockParameter blockParameter = null)
        {
            var getMinipoolByPubkeyFunction = new GetMinipoolByPubkeyFunction();
                getMinipoolByPubkeyFunction.Pubkey = pubkey;
            
            return ContractHandler.QueryAsync<GetMinipoolByPubkeyFunction, string>(getMinipoolByPubkeyFunction, blockParameter);
        }

        public Task<BigInteger> GetMinipoolCountQueryAsync(GetMinipoolCountFunction getMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolCountFunction, BigInteger>(getMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetMinipoolCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolCountFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<GetMinipoolCountPerStatusOutputDTO> GetMinipoolCountPerStatusQueryAsync(GetMinipoolCountPerStatusFunction getMinipoolCountPerStatusFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryDeserializingToObjectAsync<GetMinipoolCountPerStatusFunction, GetMinipoolCountPerStatusOutputDTO>(getMinipoolCountPerStatusFunction, blockParameter);
        }

        public virtual Task<GetMinipoolCountPerStatusOutputDTO> GetMinipoolCountPerStatusQueryAsync(BigInteger offset, BigInteger limit, BlockParameter blockParameter = null)
        {
            var getMinipoolCountPerStatusFunction = new GetMinipoolCountPerStatusFunction();
                getMinipoolCountPerStatusFunction.Offset = offset;
                getMinipoolCountPerStatusFunction.Limit = limit;
            
            return ContractHandler.QueryDeserializingToObjectAsync<GetMinipoolCountPerStatusFunction, GetMinipoolCountPerStatusOutputDTO>(getMinipoolCountPerStatusFunction, blockParameter);
        }

        public Task<byte> GetMinipoolDepositTypeQueryAsync(GetMinipoolDepositTypeFunction getMinipoolDepositTypeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolDepositTypeFunction, byte>(getMinipoolDepositTypeFunction, blockParameter);
        }

        
        public virtual Task<byte> GetMinipoolDepositTypeQueryAsync(string minipoolAddress, BlockParameter blockParameter = null)
        {
            var getMinipoolDepositTypeFunction = new GetMinipoolDepositTypeFunction();
                getMinipoolDepositTypeFunction.MinipoolAddress = minipoolAddress;
            
            return ContractHandler.QueryAsync<GetMinipoolDepositTypeFunction, byte>(getMinipoolDepositTypeFunction, blockParameter);
        }

        public Task<bool> GetMinipoolDestroyedQueryAsync(GetMinipoolDestroyedFunction getMinipoolDestroyedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolDestroyedFunction, bool>(getMinipoolDestroyedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetMinipoolDestroyedQueryAsync(string minipoolAddress, BlockParameter blockParameter = null)
        {
            var getMinipoolDestroyedFunction = new GetMinipoolDestroyedFunction();
                getMinipoolDestroyedFunction.MinipoolAddress = minipoolAddress;
            
            return ContractHandler.QueryAsync<GetMinipoolDestroyedFunction, bool>(getMinipoolDestroyedFunction, blockParameter);
        }

        public Task<bool> GetMinipoolExistsQueryAsync(GetMinipoolExistsFunction getMinipoolExistsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolExistsFunction, bool>(getMinipoolExistsFunction, blockParameter);
        }

        
        public virtual Task<bool> GetMinipoolExistsQueryAsync(string minipoolAddress, BlockParameter blockParameter = null)
        {
            var getMinipoolExistsFunction = new GetMinipoolExistsFunction();
                getMinipoolExistsFunction.MinipoolAddress = minipoolAddress;
            
            return ContractHandler.QueryAsync<GetMinipoolExistsFunction, bool>(getMinipoolExistsFunction, blockParameter);
        }

        public Task<byte[]> GetMinipoolPubkeyQueryAsync(GetMinipoolPubkeyFunction getMinipoolPubkeyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolPubkeyFunction, byte[]>(getMinipoolPubkeyFunction, blockParameter);
        }

        
        public virtual Task<byte[]> GetMinipoolPubkeyQueryAsync(string minipoolAddress, BlockParameter blockParameter = null)
        {
            var getMinipoolPubkeyFunction = new GetMinipoolPubkeyFunction();
                getMinipoolPubkeyFunction.MinipoolAddress = minipoolAddress;
            
            return ContractHandler.QueryAsync<GetMinipoolPubkeyFunction, byte[]>(getMinipoolPubkeyFunction, blockParameter);
        }

        public Task<bool> GetMinipoolRPLSlashedQueryAsync(GetMinipoolRPLSlashedFunction getMinipoolRPLSlashedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolRPLSlashedFunction, bool>(getMinipoolRPLSlashedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetMinipoolRPLSlashedQueryAsync(string minipoolAddress, BlockParameter blockParameter = null)
        {
            var getMinipoolRPLSlashedFunction = new GetMinipoolRPLSlashedFunction();
                getMinipoolRPLSlashedFunction.MinipoolAddress = minipoolAddress;
            
            return ContractHandler.QueryAsync<GetMinipoolRPLSlashedFunction, bool>(getMinipoolRPLSlashedFunction, blockParameter);
        }

        public Task<byte[]> GetMinipoolWithdrawalCredentialsQueryAsync(GetMinipoolWithdrawalCredentialsFunction getMinipoolWithdrawalCredentialsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetMinipoolWithdrawalCredentialsFunction, byte[]>(getMinipoolWithdrawalCredentialsFunction, blockParameter);
        }

        
        public virtual Task<byte[]> GetMinipoolWithdrawalCredentialsQueryAsync(string minipoolAddress, BlockParameter blockParameter = null)
        {
            var getMinipoolWithdrawalCredentialsFunction = new GetMinipoolWithdrawalCredentialsFunction();
                getMinipoolWithdrawalCredentialsFunction.MinipoolAddress = minipoolAddress;
            
            return ContractHandler.QueryAsync<GetMinipoolWithdrawalCredentialsFunction, byte[]>(getMinipoolWithdrawalCredentialsFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeActiveMinipoolCountQueryAsync(GetNodeActiveMinipoolCountFunction getNodeActiveMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeActiveMinipoolCountFunction, BigInteger>(getNodeActiveMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeActiveMinipoolCountQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeActiveMinipoolCountFunction = new GetNodeActiveMinipoolCountFunction();
                getNodeActiveMinipoolCountFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeActiveMinipoolCountFunction, BigInteger>(getNodeActiveMinipoolCountFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeFinalisedMinipoolCountQueryAsync(GetNodeFinalisedMinipoolCountFunction getNodeFinalisedMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeFinalisedMinipoolCountFunction, BigInteger>(getNodeFinalisedMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeFinalisedMinipoolCountQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeFinalisedMinipoolCountFunction = new GetNodeFinalisedMinipoolCountFunction();
                getNodeFinalisedMinipoolCountFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeFinalisedMinipoolCountFunction, BigInteger>(getNodeFinalisedMinipoolCountFunction, blockParameter);
        }

        public Task<string> GetNodeMinipoolAtQueryAsync(GetNodeMinipoolAtFunction getNodeMinipoolAtFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMinipoolAtFunction, string>(getNodeMinipoolAtFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeMinipoolAtQueryAsync(string nodeAddress, BigInteger index, BlockParameter blockParameter = null)
        {
            var getNodeMinipoolAtFunction = new GetNodeMinipoolAtFunction();
                getNodeMinipoolAtFunction.NodeAddress = nodeAddress;
                getNodeMinipoolAtFunction.Index = index;
            
            return ContractHandler.QueryAsync<GetNodeMinipoolAtFunction, string>(getNodeMinipoolAtFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeMinipoolCountQueryAsync(GetNodeMinipoolCountFunction getNodeMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeMinipoolCountFunction, BigInteger>(getNodeMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeMinipoolCountQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeMinipoolCountFunction = new GetNodeMinipoolCountFunction();
                getNodeMinipoolCountFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeMinipoolCountFunction, BigInteger>(getNodeMinipoolCountFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeStakingMinipoolCountQueryAsync(GetNodeStakingMinipoolCountFunction getNodeStakingMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeStakingMinipoolCountFunction, BigInteger>(getNodeStakingMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeStakingMinipoolCountQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeStakingMinipoolCountFunction = new GetNodeStakingMinipoolCountFunction();
                getNodeStakingMinipoolCountFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeStakingMinipoolCountFunction, BigInteger>(getNodeStakingMinipoolCountFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeStakingMinipoolCountBySizeQueryAsync(GetNodeStakingMinipoolCountBySizeFunction getNodeStakingMinipoolCountBySizeFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeStakingMinipoolCountBySizeFunction, BigInteger>(getNodeStakingMinipoolCountBySizeFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeStakingMinipoolCountBySizeQueryAsync(string nodeAddress, BigInteger depositSize, BlockParameter blockParameter = null)
        {
            var getNodeStakingMinipoolCountBySizeFunction = new GetNodeStakingMinipoolCountBySizeFunction();
                getNodeStakingMinipoolCountBySizeFunction.NodeAddress = nodeAddress;
                getNodeStakingMinipoolCountBySizeFunction.DepositSize = depositSize;
            
            return ContractHandler.QueryAsync<GetNodeStakingMinipoolCountBySizeFunction, BigInteger>(getNodeStakingMinipoolCountBySizeFunction, blockParameter);
        }

        public Task<string> GetNodeValidatingMinipoolAtQueryAsync(GetNodeValidatingMinipoolAtFunction getNodeValidatingMinipoolAtFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeValidatingMinipoolAtFunction, string>(getNodeValidatingMinipoolAtFunction, blockParameter);
        }

        
        public virtual Task<string> GetNodeValidatingMinipoolAtQueryAsync(string nodeAddress, BigInteger index, BlockParameter blockParameter = null)
        {
            var getNodeValidatingMinipoolAtFunction = new GetNodeValidatingMinipoolAtFunction();
                getNodeValidatingMinipoolAtFunction.NodeAddress = nodeAddress;
                getNodeValidatingMinipoolAtFunction.Index = index;
            
            return ContractHandler.QueryAsync<GetNodeValidatingMinipoolAtFunction, string>(getNodeValidatingMinipoolAtFunction, blockParameter);
        }

        public Task<BigInteger> GetNodeValidatingMinipoolCountQueryAsync(GetNodeValidatingMinipoolCountFunction getNodeValidatingMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetNodeValidatingMinipoolCountFunction, BigInteger>(getNodeValidatingMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetNodeValidatingMinipoolCountQueryAsync(string nodeAddress, BlockParameter blockParameter = null)
        {
            var getNodeValidatingMinipoolCountFunction = new GetNodeValidatingMinipoolCountFunction();
                getNodeValidatingMinipoolCountFunction.NodeAddress = nodeAddress;
            
            return ContractHandler.QueryAsync<GetNodeValidatingMinipoolCountFunction, BigInteger>(getNodeValidatingMinipoolCountFunction, blockParameter);
        }

        public Task<List<string>> GetPrelaunchMinipoolsQueryAsync(GetPrelaunchMinipoolsFunction getPrelaunchMinipoolsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetPrelaunchMinipoolsFunction, List<string>>(getPrelaunchMinipoolsFunction, blockParameter);
        }

        
        public virtual Task<List<string>> GetPrelaunchMinipoolsQueryAsync(BigInteger offset, BigInteger limit, BlockParameter blockParameter = null)
        {
            var getPrelaunchMinipoolsFunction = new GetPrelaunchMinipoolsFunction();
                getPrelaunchMinipoolsFunction.Offset = offset;
                getPrelaunchMinipoolsFunction.Limit = limit;
            
            return ContractHandler.QueryAsync<GetPrelaunchMinipoolsFunction, List<string>>(getPrelaunchMinipoolsFunction, blockParameter);
        }

        public Task<BigInteger> GetStakingMinipoolCountQueryAsync(GetStakingMinipoolCountFunction getStakingMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStakingMinipoolCountFunction, BigInteger>(getStakingMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetStakingMinipoolCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetStakingMinipoolCountFunction, BigInteger>(null, blockParameter);
        }

        public Task<string> GetVacantMinipoolAtQueryAsync(GetVacantMinipoolAtFunction getVacantMinipoolAtFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetVacantMinipoolAtFunction, string>(getVacantMinipoolAtFunction, blockParameter);
        }

        
        public virtual Task<string> GetVacantMinipoolAtQueryAsync(BigInteger index, BlockParameter blockParameter = null)
        {
            var getVacantMinipoolAtFunction = new GetVacantMinipoolAtFunction();
                getVacantMinipoolAtFunction.Index = index;
            
            return ContractHandler.QueryAsync<GetVacantMinipoolAtFunction, string>(getVacantMinipoolAtFunction, blockParameter);
        }

        public Task<BigInteger> GetVacantMinipoolCountQueryAsync(GetVacantMinipoolCountFunction getVacantMinipoolCountFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetVacantMinipoolCountFunction, BigInteger>(getVacantMinipoolCountFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetVacantMinipoolCountQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetVacantMinipoolCountFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<string> IncrementNodeFinalisedMinipoolCountRequestAsync(IncrementNodeFinalisedMinipoolCountFunction incrementNodeFinalisedMinipoolCountFunction)
        {
             return ContractHandler.SendRequestAsync(incrementNodeFinalisedMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> IncrementNodeFinalisedMinipoolCountRequestAndWaitForReceiptAsync(IncrementNodeFinalisedMinipoolCountFunction incrementNodeFinalisedMinipoolCountFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(incrementNodeFinalisedMinipoolCountFunction, cancellationToken);
        }

        public virtual Task<string> IncrementNodeFinalisedMinipoolCountRequestAsync(string nodeAddress)
        {
            var incrementNodeFinalisedMinipoolCountFunction = new IncrementNodeFinalisedMinipoolCountFunction();
                incrementNodeFinalisedMinipoolCountFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(incrementNodeFinalisedMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> IncrementNodeFinalisedMinipoolCountRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var incrementNodeFinalisedMinipoolCountFunction = new IncrementNodeFinalisedMinipoolCountFunction();
                incrementNodeFinalisedMinipoolCountFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(incrementNodeFinalisedMinipoolCountFunction, cancellationToken);
        }

        public virtual Task<string> IncrementNodeStakingMinipoolCountRequestAsync(IncrementNodeStakingMinipoolCountFunction incrementNodeStakingMinipoolCountFunction)
        {
             return ContractHandler.SendRequestAsync(incrementNodeStakingMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> IncrementNodeStakingMinipoolCountRequestAndWaitForReceiptAsync(IncrementNodeStakingMinipoolCountFunction incrementNodeStakingMinipoolCountFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(incrementNodeStakingMinipoolCountFunction, cancellationToken);
        }

        public virtual Task<string> IncrementNodeStakingMinipoolCountRequestAsync(string nodeAddress)
        {
            var incrementNodeStakingMinipoolCountFunction = new IncrementNodeStakingMinipoolCountFunction();
                incrementNodeStakingMinipoolCountFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(incrementNodeStakingMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> IncrementNodeStakingMinipoolCountRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var incrementNodeStakingMinipoolCountFunction = new IncrementNodeStakingMinipoolCountFunction();
                incrementNodeStakingMinipoolCountFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(incrementNodeStakingMinipoolCountFunction, cancellationToken);
        }

        public virtual Task<string> RemoveVacantMinipoolRequestAsync(RemoveVacantMinipoolFunction removeVacantMinipoolFunction)
        {
             return ContractHandler.SendRequestAsync(removeVacantMinipoolFunction);
        }

        public virtual Task<string> RemoveVacantMinipoolRequestAsync()
        {
             return ContractHandler.SendRequestAsync<RemoveVacantMinipoolFunction>();
        }

        public virtual Task<TransactionReceipt> RemoveVacantMinipoolRequestAndWaitForReceiptAsync(RemoveVacantMinipoolFunction removeVacantMinipoolFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(removeVacantMinipoolFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> RemoveVacantMinipoolRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<RemoveVacantMinipoolFunction>(null, cancellationToken);
        }

        public virtual Task<string> SetMinipoolPubkeyRequestAsync(SetMinipoolPubkeyFunction setMinipoolPubkeyFunction)
        {
             return ContractHandler.SendRequestAsync(setMinipoolPubkeyFunction);
        }

        public virtual Task<TransactionReceipt> SetMinipoolPubkeyRequestAndWaitForReceiptAsync(SetMinipoolPubkeyFunction setMinipoolPubkeyFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setMinipoolPubkeyFunction, cancellationToken);
        }

        public virtual Task<string> SetMinipoolPubkeyRequestAsync(byte[] pubkey)
        {
            var setMinipoolPubkeyFunction = new SetMinipoolPubkeyFunction();
                setMinipoolPubkeyFunction.Pubkey = pubkey;
            
             return ContractHandler.SendRequestAsync(setMinipoolPubkeyFunction);
        }

        public virtual Task<TransactionReceipt> SetMinipoolPubkeyRequestAndWaitForReceiptAsync(byte[] pubkey, CancellationTokenSource cancellationToken = null)
        {
            var setMinipoolPubkeyFunction = new SetMinipoolPubkeyFunction();
                setMinipoolPubkeyFunction.Pubkey = pubkey;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setMinipoolPubkeyFunction, cancellationToken);
        }

        public virtual Task<string> TryDistributeRequestAsync(TryDistributeFunction tryDistributeFunction)
        {
             return ContractHandler.SendRequestAsync(tryDistributeFunction);
        }

        public virtual Task<TransactionReceipt> TryDistributeRequestAndWaitForReceiptAsync(TryDistributeFunction tryDistributeFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(tryDistributeFunction, cancellationToken);
        }

        public virtual Task<string> TryDistributeRequestAsync(string nodeAddress)
        {
            var tryDistributeFunction = new TryDistributeFunction();
                tryDistributeFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAsync(tryDistributeFunction);
        }

        public virtual Task<TransactionReceipt> TryDistributeRequestAndWaitForReceiptAsync(string nodeAddress, CancellationTokenSource cancellationToken = null)
        {
            var tryDistributeFunction = new TryDistributeFunction();
                tryDistributeFunction.NodeAddress = nodeAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(tryDistributeFunction, cancellationToken);
        }

        public virtual Task<string> UpdateNodeStakingMinipoolCountRequestAsync(UpdateNodeStakingMinipoolCountFunction updateNodeStakingMinipoolCountFunction)
        {
             return ContractHandler.SendRequestAsync(updateNodeStakingMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> UpdateNodeStakingMinipoolCountRequestAndWaitForReceiptAsync(UpdateNodeStakingMinipoolCountFunction updateNodeStakingMinipoolCountFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(updateNodeStakingMinipoolCountFunction, cancellationToken);
        }

        public virtual Task<string> UpdateNodeStakingMinipoolCountRequestAsync(BigInteger previousBond, BigInteger newBond, BigInteger previousFee, BigInteger newFee)
        {
            var updateNodeStakingMinipoolCountFunction = new UpdateNodeStakingMinipoolCountFunction();
                updateNodeStakingMinipoolCountFunction.PreviousBond = previousBond;
                updateNodeStakingMinipoolCountFunction.NewBond = newBond;
                updateNodeStakingMinipoolCountFunction.PreviousFee = previousFee;
                updateNodeStakingMinipoolCountFunction.NewFee = newFee;
            
             return ContractHandler.SendRequestAsync(updateNodeStakingMinipoolCountFunction);
        }

        public virtual Task<TransactionReceipt> UpdateNodeStakingMinipoolCountRequestAndWaitForReceiptAsync(BigInteger previousBond, BigInteger newBond, BigInteger previousFee, BigInteger newFee, CancellationTokenSource cancellationToken = null)
        {
            var updateNodeStakingMinipoolCountFunction = new UpdateNodeStakingMinipoolCountFunction();
                updateNodeStakingMinipoolCountFunction.PreviousBond = previousBond;
                updateNodeStakingMinipoolCountFunction.NewBond = newBond;
                updateNodeStakingMinipoolCountFunction.PreviousFee = previousFee;
                updateNodeStakingMinipoolCountFunction.NewFee = newFee;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(updateNodeStakingMinipoolCountFunction, cancellationToken);
        }

        public Task<byte> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(versionFunction, blockParameter);
        }

        
        public virtual Task<byte> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, byte>(null, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(CreateMinipoolFunction),
                typeof(CreateVacantMinipoolFunction),
                typeof(DecrementNodeStakingMinipoolCountFunction),
                typeof(DestroyMinipoolFunction),
                typeof(GetActiveMinipoolCountFunction),
                typeof(GetFinalisedMinipoolCountFunction),
                typeof(GetMinipoolAtFunction),
                typeof(GetMinipoolByPubkeyFunction),
                typeof(GetMinipoolCountFunction),
                typeof(GetMinipoolCountPerStatusFunction),
                typeof(GetMinipoolDepositTypeFunction),
                typeof(GetMinipoolDestroyedFunction),
                typeof(GetMinipoolExistsFunction),
                typeof(GetMinipoolPubkeyFunction),
                typeof(GetMinipoolRPLSlashedFunction),
                typeof(GetMinipoolWithdrawalCredentialsFunction),
                typeof(GetNodeActiveMinipoolCountFunction),
                typeof(GetNodeFinalisedMinipoolCountFunction),
                typeof(GetNodeMinipoolAtFunction),
                typeof(GetNodeMinipoolCountFunction),
                typeof(GetNodeStakingMinipoolCountFunction),
                typeof(GetNodeStakingMinipoolCountBySizeFunction),
                typeof(GetNodeValidatingMinipoolAtFunction),
                typeof(GetNodeValidatingMinipoolCountFunction),
                typeof(GetPrelaunchMinipoolsFunction),
                typeof(GetStakingMinipoolCountFunction),
                typeof(GetVacantMinipoolAtFunction),
                typeof(GetVacantMinipoolCountFunction),
                typeof(IncrementNodeFinalisedMinipoolCountFunction),
                typeof(IncrementNodeStakingMinipoolCountFunction),
                typeof(RemoveVacantMinipoolFunction),
                typeof(SetMinipoolPubkeyFunction),
                typeof(TryDistributeFunction),
                typeof(UpdateNodeStakingMinipoolCountFunction),
                typeof(VersionFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(BeginBondReductionEventDTO),
                typeof(CancelReductionVotedEventDTO),
                typeof(MinipoolCreatedEventDTO),
                typeof(MinipoolDestroyedEventDTO),
                typeof(ReductionCancelledEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
