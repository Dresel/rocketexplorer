// <auto-generated>
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Web3;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Contracts.CQS;
using Nethereum.Contracts.ContractHandlers;
using Nethereum.Contracts;
using System.Threading;
using RocketExplorer.Ethereum.RocketTokenRPLOld.ContractDefinition;

namespace RocketExplorer.Ethereum.RocketTokenRPLOld
{
    public partial class RocketTokenRPLOldService: RocketTokenRPLOldServiceBase
    {
        public static Task<TransactionReceipt> DeployContractAndWaitForReceiptAsync(Nethereum.Web3.IWeb3 web3, RocketTokenRPLOldDeployment rocketTokenRPLOldDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketTokenRPLOldDeployment>().SendRequestAndWaitForReceiptAsync(rocketTokenRPLOldDeployment, cancellationTokenSource);
        }

        public static Task<string> DeployContractAsync(Nethereum.Web3.IWeb3 web3, RocketTokenRPLOldDeployment rocketTokenRPLOldDeployment)
        {
            return web3.Eth.GetContractDeploymentHandler<RocketTokenRPLOldDeployment>().SendRequestAsync(rocketTokenRPLOldDeployment);
        }

        public static async Task<RocketTokenRPLOldService> DeployContractAndGetServiceAsync(Nethereum.Web3.IWeb3 web3, RocketTokenRPLOldDeployment rocketTokenRPLOldDeployment, CancellationTokenSource cancellationTokenSource = null)
        {
            var receipt = await DeployContractAndWaitForReceiptAsync(web3, rocketTokenRPLOldDeployment, cancellationTokenSource);
            return new RocketTokenRPLOldService(web3, receipt.ContractAddress);
        }

        public RocketTokenRPLOldService(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

    }


    public partial class RocketTokenRPLOldServiceBase: ContractWeb3ServiceBase
    {

        public RocketTokenRPLOldServiceBase(Nethereum.Web3.IWeb3 web3, string contractAddress) : base(web3, contractAddress)
        {
        }

        public Task<string> NameQueryAsync(NameFunction nameFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<NameFunction, string>(nameFunction, blockParameter);
        }

        
        public virtual Task<string> NameQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<NameFunction, string>(null, blockParameter);
        }

        public virtual Task<string> ApproveRequestAsync(ApproveFunction approveFunction)
        {
             return ContractHandler.SendRequestAsync(approveFunction);
        }

        public virtual Task<TransactionReceipt> ApproveRequestAndWaitForReceiptAsync(ApproveFunction approveFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(approveFunction, cancellationToken);
        }

        public virtual Task<string> ApproveRequestAsync(string spender, BigInteger value)
        {
            var approveFunction = new ApproveFunction();
                approveFunction.Spender = spender;
                approveFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(approveFunction);
        }

        public virtual Task<TransactionReceipt> ApproveRequestAndWaitForReceiptAsync(string spender, BigInteger value, CancellationTokenSource cancellationToken = null)
        {
            var approveFunction = new ApproveFunction();
                approveFunction.Spender = spender;
                approveFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(approveFunction, cancellationToken);
        }

        public virtual Task<string> SetSaleContractDepositAddressVerifiedRequestAsync(SetSaleContractDepositAddressVerifiedFunction setSaleContractDepositAddressVerifiedFunction)
        {
             return ContractHandler.SendRequestAsync(setSaleContractDepositAddressVerifiedFunction);
        }

        public virtual Task<TransactionReceipt> SetSaleContractDepositAddressVerifiedRequestAndWaitForReceiptAsync(SetSaleContractDepositAddressVerifiedFunction setSaleContractDepositAddressVerifiedFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSaleContractDepositAddressVerifiedFunction, cancellationToken);
        }

        public virtual Task<string> SetSaleContractDepositAddressVerifiedRequestAsync(string verifyAddress)
        {
            var setSaleContractDepositAddressVerifiedFunction = new SetSaleContractDepositAddressVerifiedFunction();
                setSaleContractDepositAddressVerifiedFunction.VerifyAddress = verifyAddress;
            
             return ContractHandler.SendRequestAsync(setSaleContractDepositAddressVerifiedFunction);
        }

        public virtual Task<TransactionReceipt> SetSaleContractDepositAddressVerifiedRequestAndWaitForReceiptAsync(string verifyAddress, CancellationTokenSource cancellationToken = null)
        {
            var setSaleContractDepositAddressVerifiedFunction = new SetSaleContractDepositAddressVerifiedFunction();
                setSaleContractDepositAddressVerifiedFunction.VerifyAddress = verifyAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSaleContractDepositAddressVerifiedFunction, cancellationToken);
        }

        public Task<BigInteger> GetSaleContractDepositEtherMaxQueryAsync(GetSaleContractDepositEtherMaxFunction getSaleContractDepositEtherMaxFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractDepositEtherMaxFunction, BigInteger>(getSaleContractDepositEtherMaxFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractDepositEtherMaxQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractDepositEtherMaxFunction = new GetSaleContractDepositEtherMaxFunction();
                getSaleContractDepositEtherMaxFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractDepositEtherMaxFunction, BigInteger>(getSaleContractDepositEtherMaxFunction, blockParameter);
        }

        public Task<BigInteger> TotalSupplyQueryAsync(TotalSupplyFunction totalSupplyFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSupplyFunction, BigInteger>(totalSupplyFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> TotalSupplyQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSupplyFunction, BigInteger>(null, blockParameter);
        }

        public virtual Task<string> TransferFromRequestAsync(TransferFromFunction transferFromFunction)
        {
             return ContractHandler.SendRequestAsync(transferFromFunction);
        }

        public virtual Task<TransactionReceipt> TransferFromRequestAndWaitForReceiptAsync(TransferFromFunction transferFromFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFromFunction, cancellationToken);
        }

        public virtual Task<string> TransferFromRequestAsync(string from, string to, BigInteger value)
        {
            var transferFromFunction = new TransferFromFunction();
                transferFromFunction.From = from;
                transferFromFunction.To = to;
                transferFromFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(transferFromFunction);
        }

        public virtual Task<TransactionReceipt> TransferFromRequestAndWaitForReceiptAsync(string from, string to, BigInteger value, CancellationTokenSource cancellationToken = null)
        {
            var transferFromFunction = new TransferFromFunction();
                transferFromFunction.From = from;
                transferFromFunction.To = to;
                transferFromFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFromFunction, cancellationToken);
        }

        public Task<BigInteger> GetSaleContractStartBlockQueryAsync(GetSaleContractStartBlockFunction getSaleContractStartBlockFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractStartBlockFunction, BigInteger>(getSaleContractStartBlockFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractStartBlockQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractStartBlockFunction = new GetSaleContractStartBlockFunction();
                getSaleContractStartBlockFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractStartBlockFunction, BigInteger>(getSaleContractStartBlockFunction, blockParameter);
        }

        public Task<byte> DecimalsQueryAsync(DecimalsFunction decimalsFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<DecimalsFunction, byte>(decimalsFunction, blockParameter);
        }

        
        public virtual Task<byte> DecimalsQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<DecimalsFunction, byte>(null, blockParameter);
        }

        public virtual Task<string> MintRequestAsync(MintFunction mintFunction)
        {
             return ContractHandler.SendRequestAsync(mintFunction);
        }

        public virtual Task<TransactionReceipt> MintRequestAndWaitForReceiptAsync(MintFunction mintFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(mintFunction, cancellationToken);
        }

        public virtual Task<string> MintRequestAsync(string to, BigInteger amount)
        {
            var mintFunction = new MintFunction();
                mintFunction.To = to;
                mintFunction.Amount = amount;
            
             return ContractHandler.SendRequestAsync(mintFunction);
        }

        public virtual Task<TransactionReceipt> MintRequestAndWaitForReceiptAsync(string to, BigInteger amount, CancellationTokenSource cancellationToken = null)
        {
            var mintFunction = new MintFunction();
                mintFunction.To = to;
                mintFunction.Amount = amount;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(mintFunction, cancellationToken);
        }

        public virtual Task<string> ValidateClaimTokensRequestAsync(ValidateClaimTokensFunction validateClaimTokensFunction)
        {
             return ContractHandler.SendRequestAsync(validateClaimTokensFunction);
        }

        public virtual Task<TransactionReceipt> ValidateClaimTokensRequestAndWaitForReceiptAsync(ValidateClaimTokensFunction validateClaimTokensFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(validateClaimTokensFunction, cancellationToken);
        }

        public virtual Task<string> ValidateClaimTokensRequestAsync(string sender)
        {
            var validateClaimTokensFunction = new ValidateClaimTokensFunction();
                validateClaimTokensFunction.Sender = sender;
            
             return ContractHandler.SendRequestAsync(validateClaimTokensFunction);
        }

        public virtual Task<TransactionReceipt> ValidateClaimTokensRequestAndWaitForReceiptAsync(string sender, CancellationTokenSource cancellationToken = null)
        {
            var validateClaimTokensFunction = new ValidateClaimTokensFunction();
                validateClaimTokensFunction.Sender = sender;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(validateClaimTokensFunction, cancellationToken);
        }

        public virtual Task<string> SetSaleContractFinalisedRequestAsync(SetSaleContractFinalisedFunction setSaleContractFinalisedFunction)
        {
             return ContractHandler.SendRequestAsync(setSaleContractFinalisedFunction);
        }

        public virtual Task<TransactionReceipt> SetSaleContractFinalisedRequestAndWaitForReceiptAsync(SetSaleContractFinalisedFunction setSaleContractFinalisedFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSaleContractFinalisedFunction, cancellationToken);
        }

        public virtual Task<string> SetSaleContractFinalisedRequestAsync(string sender)
        {
            var setSaleContractFinalisedFunction = new SetSaleContractFinalisedFunction();
                setSaleContractFinalisedFunction.Sender = sender;
            
             return ContractHandler.SendRequestAsync(setSaleContractFinalisedFunction);
        }

        public virtual Task<TransactionReceipt> SetSaleContractFinalisedRequestAndWaitForReceiptAsync(string sender, CancellationTokenSource cancellationToken = null)
        {
            var setSaleContractFinalisedFunction = new SetSaleContractFinalisedFunction();
                setSaleContractFinalisedFunction.Sender = sender;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSaleContractFinalisedFunction, cancellationToken);
        }

        public Task<BigInteger> GetSaleContractTargetEtherMinQueryAsync(GetSaleContractTargetEtherMinFunction getSaleContractTargetEtherMinFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractTargetEtherMinFunction, BigInteger>(getSaleContractTargetEtherMinFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractTargetEtherMinQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractTargetEtherMinFunction = new GetSaleContractTargetEtherMinFunction();
                getSaleContractTargetEtherMinFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractTargetEtherMinFunction, BigInteger>(getSaleContractTargetEtherMinFunction, blockParameter);
        }

        public Task<BigInteger> GetSaleContractTokensMintedQueryAsync(GetSaleContractTokensMintedFunction getSaleContractTokensMintedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractTokensMintedFunction, BigInteger>(getSaleContractTokensMintedFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractTokensMintedQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractTokensMintedFunction = new GetSaleContractTokensMintedFunction();
                getSaleContractTokensMintedFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractTokensMintedFunction, BigInteger>(getSaleContractTokensMintedFunction, blockParameter);
        }

        public Task<BigInteger> ExponentQueryAsync(ExponentFunction exponentFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<ExponentFunction, BigInteger>(exponentFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> ExponentQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<ExponentFunction, BigInteger>(null, blockParameter);
        }

        public Task<string> VersionQueryAsync(VersionFunction versionFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, string>(versionFunction, blockParameter);
        }

        
        public virtual Task<string> VersionQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<VersionFunction, string>(null, blockParameter);
        }

        public Task<string> GetSaleContractDepositAddressQueryAsync(GetSaleContractDepositAddressFunction getSaleContractDepositAddressFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractDepositAddressFunction, string>(getSaleContractDepositAddressFunction, blockParameter);
        }

        
        public virtual Task<string> GetSaleContractDepositAddressQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractDepositAddressFunction = new GetSaleContractDepositAddressFunction();
                getSaleContractDepositAddressFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractDepositAddressFunction, string>(getSaleContractDepositAddressFunction, blockParameter);
        }

        public Task<BigInteger> BalanceOfQueryAsync(BalanceOfFunction balanceOfFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<BalanceOfFunction, BigInteger>(balanceOfFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> BalanceOfQueryAsync(string owner, BlockParameter blockParameter = null)
        {
            var balanceOfFunction = new BalanceOfFunction();
                balanceOfFunction.Owner = owner;
            
            return ContractHandler.QueryAsync<BalanceOfFunction, BigInteger>(balanceOfFunction, blockParameter);
        }

        public virtual Task<string> AcceptOwnershipRequestAsync(AcceptOwnershipFunction acceptOwnershipFunction)
        {
             return ContractHandler.SendRequestAsync(acceptOwnershipFunction);
        }

        public virtual Task<string> AcceptOwnershipRequestAsync()
        {
             return ContractHandler.SendRequestAsync<AcceptOwnershipFunction>();
        }

        public virtual Task<TransactionReceipt> AcceptOwnershipRequestAndWaitForReceiptAsync(AcceptOwnershipFunction acceptOwnershipFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(acceptOwnershipFunction, cancellationToken);
        }

        public virtual Task<TransactionReceipt> AcceptOwnershipRequestAndWaitForReceiptAsync(CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync<AcceptOwnershipFunction>(null, cancellationToken);
        }

        public Task<string> OwnerQueryAsync(OwnerFunction ownerFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<OwnerFunction, string>(ownerFunction, blockParameter);
        }

        
        public virtual Task<string> OwnerQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<OwnerFunction, string>(null, blockParameter);
        }

        public Task<string> SymbolQueryAsync(SymbolFunction symbolFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<SymbolFunction, string>(symbolFunction, blockParameter);
        }

        
        public virtual Task<string> SymbolQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<SymbolFunction, string>(null, blockParameter);
        }

        public virtual Task<string> ValidateContributionRequestAsync(ValidateContributionFunction validateContributionFunction)
        {
             return ContractHandler.SendRequestAsync(validateContributionFunction);
        }

        public virtual Task<TransactionReceipt> ValidateContributionRequestAndWaitForReceiptAsync(ValidateContributionFunction validateContributionFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(validateContributionFunction, cancellationToken);
        }

        public virtual Task<string> ValidateContributionRequestAsync(BigInteger value)
        {
            var validateContributionFunction = new ValidateContributionFunction();
                validateContributionFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(validateContributionFunction);
        }

        public virtual Task<TransactionReceipt> ValidateContributionRequestAndWaitForReceiptAsync(BigInteger value, CancellationTokenSource cancellationToken = null)
        {
            var validateContributionFunction = new ValidateContributionFunction();
                validateContributionFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(validateContributionFunction, cancellationToken);
        }

        public virtual Task<string> SetSaleAgentContractRequestAsync(SetSaleAgentContractFunction setSaleAgentContractFunction)
        {
             return ContractHandler.SendRequestAsync(setSaleAgentContractFunction);
        }

        public virtual Task<TransactionReceipt> SetSaleAgentContractRequestAndWaitForReceiptAsync(SetSaleAgentContractFunction setSaleAgentContractFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSaleAgentContractFunction, cancellationToken);
        }

        public virtual Task<string> SetSaleAgentContractRequestAsync(string saleAddress, string saleContractType, BigInteger targetEthMin, BigInteger targetEthMax, BigInteger tokensLimit, BigInteger minDeposit, BigInteger maxDeposit, BigInteger startBlock, BigInteger endBlock, string depositAddress)
        {
            var setSaleAgentContractFunction = new SetSaleAgentContractFunction();
                setSaleAgentContractFunction.SaleAddress = saleAddress;
                setSaleAgentContractFunction.SaleContractType = saleContractType;
                setSaleAgentContractFunction.TargetEthMin = targetEthMin;
                setSaleAgentContractFunction.TargetEthMax = targetEthMax;
                setSaleAgentContractFunction.TokensLimit = tokensLimit;
                setSaleAgentContractFunction.MinDeposit = minDeposit;
                setSaleAgentContractFunction.MaxDeposit = maxDeposit;
                setSaleAgentContractFunction.StartBlock = startBlock;
                setSaleAgentContractFunction.EndBlock = endBlock;
                setSaleAgentContractFunction.DepositAddress = depositAddress;
            
             return ContractHandler.SendRequestAsync(setSaleAgentContractFunction);
        }

        public virtual Task<TransactionReceipt> SetSaleAgentContractRequestAndWaitForReceiptAsync(string saleAddress, string saleContractType, BigInteger targetEthMin, BigInteger targetEthMax, BigInteger tokensLimit, BigInteger minDeposit, BigInteger maxDeposit, BigInteger startBlock, BigInteger endBlock, string depositAddress, CancellationTokenSource cancellationToken = null)
        {
            var setSaleAgentContractFunction = new SetSaleAgentContractFunction();
                setSaleAgentContractFunction.SaleAddress = saleAddress;
                setSaleAgentContractFunction.SaleContractType = saleContractType;
                setSaleAgentContractFunction.TargetEthMin = targetEthMin;
                setSaleAgentContractFunction.TargetEthMax = targetEthMax;
                setSaleAgentContractFunction.TokensLimit = tokensLimit;
                setSaleAgentContractFunction.MinDeposit = minDeposit;
                setSaleAgentContractFunction.MaxDeposit = maxDeposit;
                setSaleAgentContractFunction.StartBlock = startBlock;
                setSaleAgentContractFunction.EndBlock = endBlock;
                setSaleAgentContractFunction.DepositAddress = depositAddress;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(setSaleAgentContractFunction, cancellationToken);
        }

        public virtual Task<string> TransferRequestAsync(TransferFunction transferFunction)
        {
             return ContractHandler.SendRequestAsync(transferFunction);
        }

        public virtual Task<TransactionReceipt> TransferRequestAndWaitForReceiptAsync(TransferFunction transferFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFunction, cancellationToken);
        }

        public virtual Task<string> TransferRequestAsync(string to, BigInteger value)
        {
            var transferFunction = new TransferFunction();
                transferFunction.To = to;
                transferFunction.Value = value;
            
             return ContractHandler.SendRequestAsync(transferFunction);
        }

        public virtual Task<TransactionReceipt> TransferRequestAndWaitForReceiptAsync(string to, BigInteger value, CancellationTokenSource cancellationToken = null)
        {
            var transferFunction = new TransferFunction();
                transferFunction.To = to;
                transferFunction.Value = value;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferFunction, cancellationToken);
        }

        public Task<BigInteger> GetRemainingTokensQueryAsync(GetRemainingTokensFunction getRemainingTokensFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetRemainingTokensFunction, BigInteger>(getRemainingTokensFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetRemainingTokensQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetRemainingTokensFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> TotalSupplyCapQueryAsync(TotalSupplyCapFunction totalSupplyCapFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSupplyCapFunction, BigInteger>(totalSupplyCapFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> TotalSupplyCapQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<TotalSupplyCapFunction, BigInteger>(null, blockParameter);
        }

        public Task<BigInteger> GetSaleContractDepositEtherMinQueryAsync(GetSaleContractDepositEtherMinFunction getSaleContractDepositEtherMinFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractDepositEtherMinFunction, BigInteger>(getSaleContractDepositEtherMinFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractDepositEtherMinQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractDepositEtherMinFunction = new GetSaleContractDepositEtherMinFunction();
                getSaleContractDepositEtherMinFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractDepositEtherMinFunction, BigInteger>(getSaleContractDepositEtherMinFunction, blockParameter);
        }

        public Task<BigInteger> GetSaleContractTargetEtherMaxQueryAsync(GetSaleContractTargetEtherMaxFunction getSaleContractTargetEtherMaxFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractTargetEtherMaxFunction, BigInteger>(getSaleContractTargetEtherMaxFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractTargetEtherMaxQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractTargetEtherMaxFunction = new GetSaleContractTargetEtherMaxFunction();
                getSaleContractTargetEtherMaxFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractTargetEtherMaxFunction, BigInteger>(getSaleContractTargetEtherMaxFunction, blockParameter);
        }

        public Task<string> NewOwnerQueryAsync(NewOwnerFunction newOwnerFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<NewOwnerFunction, string>(newOwnerFunction, blockParameter);
        }

        
        public virtual Task<string> NewOwnerQueryAsync(BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<NewOwnerFunction, string>(null, blockParameter);
        }

        public Task<BigInteger> AllowanceQueryAsync(AllowanceFunction allowanceFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<AllowanceFunction, BigInteger>(allowanceFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> AllowanceQueryAsync(string owner, string spender, BlockParameter blockParameter = null)
        {
            var allowanceFunction = new AllowanceFunction();
                allowanceFunction.Owner = owner;
                allowanceFunction.Spender = spender;
            
            return ContractHandler.QueryAsync<AllowanceFunction, BigInteger>(allowanceFunction, blockParameter);
        }

        public Task<bool> GetSaleContractDepositAddressVerifiedQueryAsync(GetSaleContractDepositAddressVerifiedFunction getSaleContractDepositAddressVerifiedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractDepositAddressVerifiedFunction, bool>(getSaleContractDepositAddressVerifiedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetSaleContractDepositAddressVerifiedQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractDepositAddressVerifiedFunction = new GetSaleContractDepositAddressVerifiedFunction();
                getSaleContractDepositAddressVerifiedFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractDepositAddressVerifiedFunction, bool>(getSaleContractDepositAddressVerifiedFunction, blockParameter);
        }

        public Task<BigInteger> GetSaleContractEndBlockQueryAsync(GetSaleContractEndBlockFunction getSaleContractEndBlockFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractEndBlockFunction, BigInteger>(getSaleContractEndBlockFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractEndBlockQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractEndBlockFunction = new GetSaleContractEndBlockFunction();
                getSaleContractEndBlockFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractEndBlockFunction, BigInteger>(getSaleContractEndBlockFunction, blockParameter);
        }

        public virtual Task<string> TransferOwnershipRequestAsync(TransferOwnershipFunction transferOwnershipFunction)
        {
             return ContractHandler.SendRequestAsync(transferOwnershipFunction);
        }

        public virtual Task<TransactionReceipt> TransferOwnershipRequestAndWaitForReceiptAsync(TransferOwnershipFunction transferOwnershipFunction, CancellationTokenSource cancellationToken = null)
        {
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferOwnershipFunction, cancellationToken);
        }

        public virtual Task<string> TransferOwnershipRequestAsync(string newOwner)
        {
            var transferOwnershipFunction = new TransferOwnershipFunction();
                transferOwnershipFunction.NewOwner = newOwner;
            
             return ContractHandler.SendRequestAsync(transferOwnershipFunction);
        }

        public virtual Task<TransactionReceipt> TransferOwnershipRequestAndWaitForReceiptAsync(string newOwner, CancellationTokenSource cancellationToken = null)
        {
            var transferOwnershipFunction = new TransferOwnershipFunction();
                transferOwnershipFunction.NewOwner = newOwner;
            
             return ContractHandler.SendRequestAndWaitForReceiptAsync(transferOwnershipFunction, cancellationToken);
        }

        public Task<bool> GetSaleContractIsFinalisedQueryAsync(GetSaleContractIsFinalisedFunction getSaleContractIsFinalisedFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractIsFinalisedFunction, bool>(getSaleContractIsFinalisedFunction, blockParameter);
        }

        
        public virtual Task<bool> GetSaleContractIsFinalisedQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractIsFinalisedFunction = new GetSaleContractIsFinalisedFunction();
                getSaleContractIsFinalisedFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractIsFinalisedFunction, bool>(getSaleContractIsFinalisedFunction, blockParameter);
        }

        public Task<BigInteger> GetSaleContractTokensLimitQueryAsync(GetSaleContractTokensLimitFunction getSaleContractTokensLimitFunction, BlockParameter blockParameter = null)
        {
            return ContractHandler.QueryAsync<GetSaleContractTokensLimitFunction, BigInteger>(getSaleContractTokensLimitFunction, blockParameter);
        }

        
        public virtual Task<BigInteger> GetSaleContractTokensLimitQueryAsync(string salesAgentAddress, BlockParameter blockParameter = null)
        {
            var getSaleContractTokensLimitFunction = new GetSaleContractTokensLimitFunction();
                getSaleContractTokensLimitFunction.SalesAgentAddress = salesAgentAddress;
            
            return ContractHandler.QueryAsync<GetSaleContractTokensLimitFunction, BigInteger>(getSaleContractTokensLimitFunction, blockParameter);
        }

        public override List<Type> GetAllFunctionTypes()
        {
            return new List<Type>
            {
                typeof(NameFunction),
                typeof(ApproveFunction),
                typeof(SetSaleContractDepositAddressVerifiedFunction),
                typeof(GetSaleContractDepositEtherMaxFunction),
                typeof(TotalSupplyFunction),
                typeof(TransferFromFunction),
                typeof(GetSaleContractStartBlockFunction),
                typeof(DecimalsFunction),
                typeof(MintFunction),
                typeof(ValidateClaimTokensFunction),
                typeof(SetSaleContractFinalisedFunction),
                typeof(GetSaleContractTargetEtherMinFunction),
                typeof(GetSaleContractTokensMintedFunction),
                typeof(ExponentFunction),
                typeof(VersionFunction),
                typeof(GetSaleContractDepositAddressFunction),
                typeof(BalanceOfFunction),
                typeof(AcceptOwnershipFunction),
                typeof(OwnerFunction),
                typeof(SymbolFunction),
                typeof(ValidateContributionFunction),
                typeof(SetSaleAgentContractFunction),
                typeof(TransferFunction),
                typeof(GetRemainingTokensFunction),
                typeof(TotalSupplyCapFunction),
                typeof(GetSaleContractDepositEtherMinFunction),
                typeof(GetSaleContractTargetEtherMaxFunction),
                typeof(NewOwnerFunction),
                typeof(AllowanceFunction),
                typeof(GetSaleContractDepositAddressVerifiedFunction),
                typeof(GetSaleContractEndBlockFunction),
                typeof(TransferOwnershipFunction),
                typeof(GetSaleContractIsFinalisedFunction),
                typeof(GetSaleContractTokensLimitFunction)
            };
        }

        public override List<Type> GetAllEventTypes()
        {
            return new List<Type>
            {
                typeof(MintTokenEventDTO),
                typeof(SaleFinalisedEventDTO),
                typeof(FlagUintEventDTO),
                typeof(FlagAddressEventDTO),
                typeof(OwnershipTransferredEventDTO),
                typeof(TransferEventDTO),
                typeof(ApprovalEventDTO)
            };
        }

        public override List<Type> GetAllErrorTypes()
        {
            return new List<Type>
            {

            };
        }
    }
}
